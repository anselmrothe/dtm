UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Natural language – no infinity and probably no recursion
Permalink
https://escholarship.org/uc/item/7bt25035
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 34(34)
Authors
Luuk, Erkki
Luuk, Hendrik
Publication Date
2012-01-01
Peer reviewed
 eScholarship.org                                  Powered by the California Digital Library
                                                                    University of California

                       Natural language – no infinity and probably no recursion
                                                 Erkki Luuk (erkkil@gmail.com)
                                     Institute of Computer Science, University of Tartu, Liivi 2
                                                         50409 Tartu, Estonia
                                           Hendrik Luuk (hendrik.luuk@gmail.com)
                                      Department of Physiology, University of Tartu, Ravila 19
                                                         Tartu 50411, Estonia
                             Abstract 1
  We question the need for recursion in human cognitive
                                                                     Recursion
  processing by arguing that a generally simpler and less            Defining recursion Rogers Jr. (1987, pp. 5-6) gives the
  resource demanding process – iteration – is sufficient to          following description of a Gödelian recursive definition: "A
  account for human natural language and arithmetic                  recursive definition for a function is, roughly speaking, a
  performance. We claim that the only motivation for recursion,      definition wherein values of the function for given
  the infinity in natural language and arithmetic competence, is
  equally approachable by iteration and recursion. Second, we
                                                                     arguments are directly related to values of the same function
  submit that the infinity in natural language and arithmetic        for "simpler" arguments or to values of "simpler"
  competence reduces to imagining infinite embedding or              functions." For example, in the recursive function for
  concatenation, which is completely independent from the            defining Fibonacci numbers (for integers n>1), Fib(n) is
  ability to implement infinite computation, and thus,               directly related to Fib(n-1) and Fib(n-2): Fib(n) = Fib(n-1) +
  independent from both recursion and iteration. Furthermore,        Fib(n-2). For the present discussion, the most imporant
  we show that natural language is a finite rather than infinite     aspect of recursion lies in its ability to describe an infinity of
  set.
                                                                     (input,output) pairs by a finitely definable set of operations
   Keywords: recursion; iteration; language; brain; infinity;        in an effectively computable manner (see Odifreddi, 1992,
   embedding; arithmetic.                                            pp. 34-36, for details).
                                                                        Recursion differs from iteration (another form of
                Recursion and embedding                              repetition) in two essential respects. First, definitions
An influential line of thought claims that a hallmark of             employing iteration do not involve self-reference. Second,
human cognitive processing is recursion (e.g. Fitch, Hauser,         without self-reference, every (input,output) pair needs to be
& Chomsky, 2005; Hauser, Chomsky, & Fitch, 2002;                     defined explicitly, rendering it impossible to define infinite
Premack, 2007). Hauser et al. (2002) drew a distinction              sets by finite means other than by a control flow loop.
between the whole language faculty, including the aspects            Computationally, there is a clear difference between a
shared with other species or faculties (the faculty of               procedure that invokes another instance of itself (recursion)
language in the broad sense) and the unique aspects of the           and a procedure that repeats itself either mechanically or
language faculty (the faculty of language in the narrow              with a control flow loop (iteration). Recursion and iteration
sense). They hypothesized that the unique aspects of the             are the only computational solutions for handling repetition.
language faculty comprise "only the core computational                  As a rule, implementations of recursive functions are
mechanisms of recursion as they appear in narrow syntax              slower than those of iterative because recursive functions
and the mappings to the Sensory-Motor and Conceptual-                must allocate memory for their multiple instances. In
Intentional interfaces" (Hauser et al., 2002, p. 1573). Lately,      Abelson et al. (1996), the difference between recursive and
this hypothesis has been vigorously challenged (e.g.                 iterative processes is captured as follows. Recursive
(Jackendoff & Pinker, 2005; Pinker & Jackendoff, 2005).              processes are characterized by a chain of deferred
Interestingly, none of the challenges question the infinity in       operations and require that the interpreter keep track of the
natural language, and recursion is contested only in                 operations to be performed later on. An iterative process is
Lieberman (2008) and Bickerton (2009) from a                         one whose state can be summarized by a fixed number of
neuroscientific and linguistic perspective, respectively.            state variables, together with a fixed rule that describes how
                                                                     the state variables should be updated as the process moves
                                                                     from state to state. All this being said, recursive procedures
                                                                     (or definitions) tend to be formally and notationally more
                                                                     elegant than iterative ones. The difference between process
  1                                                                  and procedure is explained below.
    An earlier version of this paper "The redundancy of recursion
and infinity for natural language" appeared in Cognitive
                                                                        The influential paper by Hauser et al. (2002) was the first
Processing (2011, 12 (1)). As compared to the earlier version,       to explicitly formulate the view that recursion is a
some inaccuracies have been corrected, loosely relevant parts        component of the language faculty (regrettably, no
omitted and new arguments added to the present paper.                definition of recursion was given in the article). After
                                                                 1942

reviewing all statements about recursion in the paper the              implemented non-recursively (i.e. by iteration) at levels 4-5!
following definition emerges (numbers in brackets refer to             In the next section we will give an example of this. It is also
the pages in Hauser et al. (2002)): recursion is a neurally            important to note that level 1 in Tab. 1 corresponds to
implemented (p. 1574) computational mechanism (p. 1573)                Marr's level 1 (computational theory) and levels 4 and 5 in
that yields a potentially infinite array of discrete expressions       Tab. 1 correspond to Marr's level 2 (algorithm and
(pp. 1570, 1571, 1574) from a finite set of elements (p.               input/output representation) of information processing. The
1571). Crucially, a computational mechanism with finite                following section examines whether and how any of the
input and potentially infinite output, described here, does            levels in Tab. 1 can be connected to Marr's level 3
not imply recursion, as it is possible to generate a                   (hardware implementation) in the brain.
potentially infinite output from a finite set of elements
without recursive operation by implementing n→∞                        Recursion, iteration, and inductive definition All open-
operations iteratively. Hence, it is not clear whether the             ended sets (e.g. language expressions, N) can be defined
mechanism described by Hauser et al. (2002) is recursive or            inductively, i.e. recursively in the broadest sense. For
iterative. While it is plausible that the notion of recursion as       example, one can have the following inductive definition of
applied by Hauser et al. (2002) refers to the 'recursion' in the       'bear': (a) Ted is a bear; (b) All entities that share at least
Minimalist Program (Chomsky, 1995), the latter allows for              98% of Ted's genome are bears. Observe that, although the
a range of interpretations. Tomalin (2011, p. 308) has,                set of potential 'bears' is open-ended and inductively
usefully,      distinguished       between      nine      different    defined, no recursion is computationally necessary to
interpretations of 'recursion' in formal sciences, with                determine its contents. An iterative process that compares
'inductive definition' as the most broad one (and thus the             Ted's genome to that of potential 'bears' would do the job.
safest for syntactic theory). Tomalin's (2011) theoretic               Importantly, the difference between iteration and recursion
variants and computational equivalents of recursion (λ-                pertains to levels 4-5 only. Thus, even if recursion were
definability, Turing computability et al.) are more or less on         used in levels 1-3, the involvement of a recursive process or
the same level of abstraction but recursion can also be                procedure would not be implied, as it can be implemented
defined in five different levels (in the order of decreasing           with a purely iterative computational process (e.g. on a
abstractness):                                                         Turing machine).
                                                                          Below is a strip of iterative pseudocode (1) that defines
           Table 1. 'Recursion' in five different levels.              the infinite set of finite strings ...[X[X[X[XY]]]] that is also
                                                                       defined by the recursive strip (2):
     1.   Inductive (or recursive) definition: A definition
          with a base rule, specifying that certain "simple"                (1) Y → XY (iteration) :
          objects are in the class, and an inductive (recursive)               s=Y                    //assign Y to s
          rule, stating that if certain objects are in the class,              while true:            //infinite loop:
          then so are certain other objects formed or derived                  rw(Y,XY,s)            //rewrite Y as XY in s
          from them (Minsky, 1972).
     2.   Recursive definition for a function: A definition                 (2) Y → XY (recursion) :
          wherein values of the function for given arguments                   s=Y                    //assign Y to s
          are directly related to values of the same function                  rec(s)                 //declare function rec(s)
          for "simpler" arguments or to values of "simpler"                    {                      //start definition of rec(s)
          functions (Rogers Jr., 1987).                                        rw(Y,XY,s)             //rewrite Y as XY in s
     3.   Recursive function: A function that is defined                       rec(s)                 //call function rec(s)
          recursively (see 2).                                                 }                      //end definition of rec(s)
     4.   Recursive procedure: A procedure that, when
          executed, invokes another instance of itself                 As one may observe, (1) and (2) are computationally
          (Abelson, Sussman, & Sussman, 1996).                         equivalent – at the level of computational theory, both are
     5.   Recursive process: An execution of a recursive               described by the rewrite rule Y → XY. Incidentally, this
          procedure (see 4).                                           also means that rewrite rules can be "recursive" only in the
                                                                       sense of "recursive definition" (level 1 in Tab 1., which
We suggest that, for cognitive and neural modelling, the               corresponds to Marr's level 1).
procedural level (4) is of central importance. For the                    From the viewpoint of effective calculability, general
following discussion, it is crucial that the recursion we are          recursion and Turing computability are equivalent (Kleene
looking for is implemented in the brain (Hauser et al., p.             1952, p. 300), and a universal Turing machine can
1574), i.e. it is not something that is posited at the level of        enumerate any recursively enumerable formal language (an
computational theory only (Marr's (1982) level 1 of his                infinite set of finite strings) as can general recursion (Sipser,
three levels of information processing). However, the                  1997). Turing machine is based on iteration, whereas
situation is still very confusing, as it is possible to have           general recursion is based only on recursion. Over finite
neurally implemented recursion of level 1 that is
                                                                   1943

outputs, recursion and infinite iteration are computationally       iteration is defined as the repeated application of a
equivalent (Turing-equivalent).                                     transformation (Weisstein, 2003), which is something that
   Crucially, as there is no neural model of recursion (of          Chomsky's (1956, p. 113) description of his early
whatever level), one is unable to identify it in the brain and,     transformational version of generative grammar explicitly
accordingly, unable to verify its existence. On the other           incoporates: "/---/ phrase structure is limited to a kernel of
hand, Lieberman (2008, p. 527) has recently suggested that          simple sentences from which all other sentences are
"neural circuits linking local operations in the cortex and the     constructed by repeated transformations". The confusion
basal ganglia confer reiterative capacities, expressed in           with recursion can be traced back to Chomsky (1971 [1957],
seemingly unrelated human traits such as speech, syntax,            p. 24; 1956, p. 115), who refers to loops as 'recursive
adaptive actions to changing circumstances, dancing, and            devices'. The source that the formalism is taken from refers
music", thus obviating the need for a neurally implemented          to the loops as 'circuits' ("a closed series of lines in the
recursion. Of course, the distinction between neurally              graph with all arrows on the lines pointing in the same
implemented recursive and iterative processes is rather             orientation" – Shannon & Weaver, 1964 [1949], p. 47). The
opaque for present-day methods, i.e. the possibility of a           circuits pertain to a graphic representation of finite-state
neurally implemented recursion cannot be ruled out. We              Markov chains, and to call them 'recursive' is jumping to the
argue for iteration only as a simpler and equipotent                conclusion, as Markov chains do not prescribe an
computational alternative to recursion.                             algorithmic realization for the circuits – Markov chains are
   In sum, there would be no sense in (and no obvious way           confined to Marr's level 1 just like inductive definitions. In
of) implementing level 1 (in Tab. 1) in the brain separately        Chomsky (1959, p. 143), 'recursive function' is used as a
from levels 4 and 5. As for levels 2 and 3, it would be             synonym for 'Turing computable function'. Again, this is
outlandish to assume that the brain somehow (and                    confusing, as computational equivalence does not imply
apparently redundantly) implements equations of the                 algorithmic equivalence (which is absent in this case). In
processes it carries out. Thus, implementations of these            sum, the Chomskian notion of "recursion" is a case of
levels can be ruled out as well. We have also argued that           confusing Marr's levels of information processing (1 and 2).
implementations of levels 4 and 5 would be impossible to               Fitch (2010) claims that iterative functions are inadequate
identify in the brain with present-day knowledge and                for generating center- and/or self-embedding. As an
methods.                                                            example of the superiority of recursion over iteration, he
                                                                    presents a recursive center-embedding program generating
Recursion, induction and self-embedding: a confusion In             AnBn. Below is an iterative pseudocode that does the same:
computer science, on the procedural level, recursion denotes
the syntactic property that a procedure definition refers to           C = ""           //evaluate C to the empty string ""
the procedure itself (Abelson et al., 1996). In Chomsky's              for i = 0 to n do:        //loop n times
(1956, 1971 [1957]) phrase structure grammar, recursion is             C = concatenate("A",C,"B") //concatenate "A", C and
a property of rewrite rules (all that is on the left side of the                                 //"B", and assign the result to C
rewrite arrow repeats on the right side of the arrow, e.g. A
→ AB) (Chomsky, 1956, 1971 [1957]). Essentially, this               The program embeds C between "A" and "B" n times, with i
notion of recursion reduces to inductive definition. For            indicating the depth of embedding in each cycle of the loop.
some other theorists, recursion is a structural property: a         It is true that "recursive functions take their own past output
situation where an instance of an item is embedded in               as their next input" (Fitch 2010, p. 75) but this feature is not
another instance of the same item (e.g. Heine & Kuteva,             unique to recursion – in our above examples, concatenate()
2007; Jackendoff & Pinker, 2005). For clarity, let us call the      coupled with iteration does the same.
three recursion, induction and self-embedding, respectively.           As for confusing recursion with self-embedding
Recursion and self-embedding are logically independent for          (characteristic to most linguists but not to Chomsky), the
the following reasons. First, a self-embedded structure (an         two are already in principle very different. Recursion
NP within an NP, a box within a box etc.) does not have to          pertains to a process or procedure, self-embedding pertains
be recursively generated. Jackendoff and Pinker (2005)              to a structure. A recursive process or procedure is something
submit a picture of a rectangular form within another               that, more often than not, cannot be directly observed. Self-
rectangular form as an example of 'recursion in visual              embedding, on the other hand, is usually salient and a
grouping'. Obviously, this has no bearing whatever on               subcase of a cognitive phenomenon we term 'hierarchical
recursion. It would be outlandish to assume that recursion is       interpretation'. A defining difference between hierarchical
necessary to put a box in a box, or for understanding that a        and non-hierarchical interpretation is that only the former
box is in a box. Yet, for conspicuous (but nonetheless              allows the same unit to be interpreted simultaneously as a
insufficient) reasons, this assumption is held with syntactic       type (i.e. category) and as a token (i.e. instance), hence
categories like sentence and NP. The reasons are, of course,        implying additional interpretative correlates not present in
the inductive rewrite rules of generative grammar (e.g. NP          the input. The type/token distinction is a precondition for
→ A NP), and they are insufficient as the type of induction         self-embedding, where tokens are embedded under the same
can be generated iteratively as well (cf. (1)). Furthermore,        type (e.g. NP or clause). An example of hierarchical
                                                                1944

interpretation is natural language. Linguistic interpretation    performing infinitely in any of these tasks (hence the
is compounding, merging smaller units that are per se            famous competence/performance distinction – Chomsky,
meaningful in the code (Chomsky, 1995; Hauser et al.,            1995).
2002). As far as we know, linguistic code is unique among           Chomsky's derivation of neurally implemented recursion
natural communication systems in stipulating semantic            for operating on N is as follows. A) Any formal definition
compositionality, whereby meaningful units are combined          of the set of natural numbers N incorporates recursion by
into diversely meaningful higher-order units (e.g., words        means of the successor function, where 1 = S(0); 2 = S(S(0))
into phrases, sentences and compound words, phrases into         etc. B) We have knowledge of the properties of N (i.e.,
sentences and higher-order phrases, etc.).                       given enough time and space, we can compute the sum of
   As an illustration that self-embedding is possible in         two numbers, and distinguish the right from the wrong
hierarchical interpretation only, consider the following         answer). From premises A and B he conjectures that
example: the inductive center-embedding rule AB→AABB             neurally implemented recursion is required for operating on
generates the strings AABB, AAABBB etc. It is impossible         N (e.g. for adding 4555 to 7884). Thus, we have the
to tell by looking at these strings whether their generation     following: (a) infinity in natural language and arithmetic
procedure (or process) was recursion, iteration or neither       competence (to motivate neurally implemented recursive
(cf. Fitch, 2010, and the example above). Furthermore, it is     process in the first place), (b) neurally implemented
impossible to tell whether the strings exhibit self-             recursion is required to operate on N, and (c) N is an
embedding. Without any a priori assumptions about the            offshoot of the language faculty. From these premises, it
generative mechanism (e.g. stipulation of a certain phrase       follows that (d) neurally implemented recursion underlies
structure grammar), it is undecidable whether a string           both N and natural language.
…AABB... is embedded, concatenated, or elementary                   On the face of it, the above argument for neurally
(assuming that different generative mechanisms may allow         implemented recursion is consistent and logically sound.
for different elementary strings).                               However, premises (a)-(b) are false, and in section
                                                                 "Arithmetic performance" we argue in more detail that
Embedding                                                        neurally implemented recursion is not necessary to operate
Embedding is a situation where an item is embedded in any        on N. As explained below, infinity in natural language and
item (with infinity not implied). Embedding is logically         arithmetic competence reduces to imagining infinite
independent from recursion (i.e. there can be one without        embedding or concatenation, and thus does not qualify as an
the other). First, embedding does not have to be generated       output of a recursive process or procedure (as there is no
by a recursive rule. It can be created iteratively or by any     reason to assume that conceptualizing infinity requires
other function with relevant output. Second, a recursive         recursion). The concept of neurally implemented recursion
process or procedure does not have to yield (relevant)           is largely motivated by the 'discrete infinity' property of
output. Assuming that we cannot witness a recursive              natural language (Chomsky, 1995; Hauser et al., 2002). In
process or procedure in situ (e.g. in the brain), two            fact, the whole distinction between the broad and the narrow
conditions must be met for attesting it: (1) it must generate    language faculties, as originally proposed by Hauser et al.
output, and (2) there must be a one-to-one correspondence        (2002), can be derived from this property. Importantly, the
between the values of the recursive procedure and its output.    infinity of natural language has been always taken as
Logically, self-embedding is a situation where an instance       axiomatic and never proven. The last instance that Chomsky
of an item is embedded in another instance of the same item      appeals to in this question is Wilhelm von Humboldt (1999
(with infinity not implied); thus, self-embedding is a proper    [1836]) who simply states the infinity of natural language as
subset of embedding. The fact that embedding is                  a fact.
hierarchical has frequently raised speculations about a             One might start from the observation that the maximum
putative underlying recursive process or procedure (or more      possible natural language "corpus" – everything that has
unfortunately, resulted in confusing embedding with              ever been and will be processed – is not infinite but a finite,
recursion). As explained above, a hierarchical or embedded       just physically uncountable set. We propose that this is
structure is insufficient to decide on its generative            precisely the nature of language as it should be accounted
mechanism.                                                       for. In fact, the very spacetime that can support physical
                                                                 computational systems is finite (Krauss & Starkman, 2000).
   Infinity in natural language and arithmetic                   This substantial correction (physically uncountable finity
                                                                 instead of infinity) is suggested for the sake of unambiguity
                       competence                                and exactitude. Physically uncountable sets can be finite or
The central claim of Hauser et al. (2002) and Chomsky            infinite. Set-theoretically, potential and actual infinity
(2010) is that a neurally implemented recursive process          (Moore, 1990) are proper subsets of physical uncountability.
introduces infinity to natural language and arithmetic. An       The evidence that Hauser et al. (2002, p. 1571) submit for
example of (potential) infinity in natural language and          discrete infinity covers also physically uncountable finity:
arithmetic competence is the knowledge that one can add 1        "There is no longest sentence (any candidate sentence can
to n, append a natural language expression to text or embed      be trumped by /---/ embedding it in "Mary thinks that ...)". It
clauses indefinitely. Of course, we are incapable of
                                                             1945

would be a contradiction to assume that the size of a finite,            embedding) does not entail (1) that the principle is
physically uncountable array can be compared to the size of              necessary for producing the pattern (as N or self-embedding
all others, or that such array can be embedded (the mere fact            can be also produced iteratively), and (2) that the principle
that we can imagine embedding such an array does not                     itself must be neurally implemented for us to be able to
account for its capacity of being embedded). "There is no                conceptualize it. For example, we can conceive that all
non-arbitrary upper bound to sentence length." This is as                natural numbers are derived from the number 20098 by +/-1
true for an infinite as it is for a finite, physically                   operations, i.e. each time we conceptualize a natural number
uncountable array.                                                       x that is less than 20098, we subtract 1 from 20098 until we
   The finity of natural language can be also derived                    get x and each time we conceptualize a natural number y
logically, without invoking physically instantiated                      that is greater than 20098, we add 1 from 20098 until we get
computation:                                                             y. We can conceive this principle. Does it follow that the
                                                                         "20098 +/-1" principle must be neurally implemented for us
   1. Natural language has a limit which is either infinite or           to be able to conceive it in the first place? Surely not.
   finite.                                                               Observe that the situation with the "20098 +/-1" principle is
   2. Natural language computation takes time.                           similar to the recursive one: we can conceptualize the
   3. From 1 and 2 it follows that, for any given moment in              principles but both are at odds with human arithmetic
   time, there is an infinite number of finite limits that are           performance. To circumvent the latter problem in the
   never reached.                                                        neurally      implemented      recursion     hypothesis,    the
   4. Assuming that the cardinalities of natural language and            competence/performance distinction has been called into
   N are equal 2 , there is only one infinite limit that is never        effect. However, a competence/performance distinction
   reached.                                                              could be also invoked for explaining why our performance
   5. For any finite limit that is never reached, the                    is at odds with the "20098 +/-1" principle. Besides, the
   probability of natural language having it is > 0.                     distinction raises a non-parsimonious psychological duality
   6. From 3-5 it follows that the probability of natural                as to the conceptualization of relevant syntactic and
   language having the infinite limit is 0.                              arithmetic properties – we can conceptualize that the
                                                                         properties are given to us by a recursive principle, but we do
                 Arithmetic performance                                  not seem to follow the principle neither in linguistic nor
If recursion were involved in conceptualizing numbers, our               arithmetic processing/performance. Furthermore, it seems
brain would execute something like a successor function                  inconsistent to explain the apparent discontinuity between
…S(S(S(S(0))))… for natural numbers and maybe also                       competence and performance in arithmetic and language by
n*n*n*n… for base-n integer exponents (since we normally                 e.g. limitations in primary memory – what potential
use base-10 numeral system, n would normally equal 10).                  advantage could a neurally implemented recursive principle
While n*n*n*n… can be coded and implemented                              bestow if its effects are subject to so severe constraints?
recursively as well as iteratively, it is unlikely that anything
approximating …S(S(S(S(0))))… or n*n*n*n… would be                                                Conclusion
run in our brains for conceptualizing numbers and                        We conclude with the following points. First, both recursion
performing arithmetic on them. If it were, our arithmetic                and iteration allow for finite definitions of infinite sets.
performance should be significantly better than it tends to              Moreover, iterative solutions are frequently less resource
be. If, on the other hand, our inferior arithmetic skills are            demanding than recursive ones (cf. section "Defining
down to general performance limitations and/or penalties                 recursion"). Second, three logically independent notions of
for (other) arithmetic operations, there would be no apparent            "recursion" are being conflated and confused in linguistics
use for running these procedures for our mathematical                    (e.g. Chomsky, 1956, 1971 [1957]; Heine & Kuteva, 2007;
capacity. The only remaining justification for                           Jackendoff & Pinker, 2005): (A) recursive algorithm (Marr's
…S(S(S(S(0))))… and n*n*n*n… would be recursion in the                   level 2), (B) recursive (or better, inductive) definition
language faculty. However, for this concession to make                   (Marr's level 1), and (C) an instance of an item embedded in
sense, there would first have to be some evidence for                    another instance of the same item. We suggest a
recursion in the language faculty. As we have argued at                  terminological way out of the confusion, by reserving
length above, at present we have merely conjectures built on             'recursion' for (A) for which there are no alternative terms,
invalid premises (see section "Infinity…").                              and designating (B) and (C) 'induction' and 'self-
   It is easy to demonstrate that conceptualizing a principle            embedding', respectively. Third, the technical preciseness of
(recursion) for producing a pattern of output (N or self-                the notion of recursion makes it next to impossible to find
                                                                         evidence for it in the brain with the present-day methods,
   2
       Since we are interested in an upper bound of                      and there is no reason to assume neurally implemented
computation/processing time, ℵ0 is sufficient. It is difficult to        recursion by default (see below). Fourth, contrary to
develop the argument here but the very fact that time intervals          Chomsky (Chomsky, 1995; Hauser et al., 2002) and many
seem to exist suggests that time is not infinitely divisible (ℵ1 and     others, we argue that a property of natural language is not
beyond). Other indications of this are e.g. Achilles and the tortoise    discrete infinity but physically uncountable finity. Fifth, we
paradox and Planck time.
                                                                     1946

reject the received opinion, articulated by Chomsky et al.          Deprez, & H. Yamakido (Eds.), The Evolution of Human
(Chomsky, 2010; Fitch et al., 2005; Hauser et al., 2002),           Language: Biolinguistic Perspectives. Cambridge:
that neurally implemented recursion is necessary to explain         Cambridge University Press.
natural language and arithmetic competence and                   Fitch, W. T., Hauser, M. D., & Chomsky, N. (2005). The
performance. The only motivation for neurally implemented           evolution of the language faculty: clarifications and
recursion is infinity in natural language and arithmetic            implications. Cognition, 97(2), 179-210; Discussion 211-
competence (e.g. the knowledge that one can add 1 to n,             125.
append a natural language expression to text or embed            Hauser, M. D., Chomsky, N., & Fitch, W. T. (2002). The
clauses indefinitely). We claim that infinity in natural            faculty of language: what is it, who has it, and how did it
language and arithmetic competence reduces to imagining             evolve? Science, 298(5598), 1569-1579.
infinite embedding or concatenation, which is completely         Heine, B., & Kuteva, T. (2007). The genesis of grammar: a
independent from an algorithmic capacity for infinite               reconstruction. New York: Oxford University Press.
computation, and hence, completely independent from              Jackendoff, R., & Pinker, S. (2005). The nature of the
neurally implemented recursion or iteration. In sum, there is       language faculty and its implications for evolution of
no infinity in natural language and arithmetic processing,          language (Reply to Fitch, Hauser, and Chomsky).
but even if there were, iteration would be sufficient for           Cognition, 97(2), 211-225.
generating it.                                                   Krauss, L. M., & Starkman, G. D. (2000). Life, the universe,
                                                                    and nothing: Life and death in an ever-expanding
                    Acknowledgments                                 universe. The Astrophysical Journal, 531, 22-30.
We thank Noam Chomsky and Margus Niitsoo for                     Lieberman, P. (2008). Cortico-striatal-cortical neural
extremely helpful, thorough and critical discussions, and           circuits, reiteration, and the "narrow language faculty".
Märt Muts, Lameen Souag, Lutz Marten, Tania Kuteva,                 Behavioral and Brain Sciences, 31, 527-528.
Michael Corballis, Panu Raatikainen, Tim Gentner,                Marr, D. (1982). Vision: A Computational Investigation into
Geoffrey Pullum and the anonymous reviewers for their               the Human Representation and Processing of Visual
comments and suggestions. All remaining mistakes are our            Information. San Fransisco: W. H. Freeman and
own. Erkki Luuk was supported by the target-financed                Company.
theme No. 0180078s08, the National Programme for                 Minsky, M. (1972). Computation: Finite and Infinite
Estonian Language Technology project "Semantic analysis             Machines. London: Prentice-Hall International.
of simple sentences 2", the Alexander von Humboldt               Moore, A. W. (1990). The Infinite. London: Routledge.
Foundation, and the European Regional Development Fund           Odifreddi, P. (1992). Classical Recursion Theory: The
through the Estonian Center of Excellence in Computer               Theory of Functions and Sets of Natural Numbers (Vol.
Science, EXCS.                                                      125). Amsterdam: Elsevier.
                                                                 Pinker, S., & Jackendoff, R. (2005). The faculty of
                                                                    language: what's special about it? Cognition, 95(2), 201-
                        References                                  236.
Abelson, H., Sussman, G. J., & Sussman, J. (1996).               Premack, D. (2007). Human and animal cognition:
   Structure and Interpretation of Computer Programs (2nd           Continuity and discontinuity. Proceedings of the
   ed.). Cambridge, MA: MIT Press.                                  National Academy of Sciences of the United States of
Bickerton, D. (2009). Recursion: core of complexity or              America, 104(35), 13861–13867.
   artifact of analysis? In T. Givón, & M. Shibatani (Eds.),     Rogers Jr., H. (1987). The Theory of Recursive Functions
   Syntactic Complexity: Diachrony, Acquisition, Neuro-             and Effective Computability. Cambridge, MA: MIT
   cognition, Evolution. Amsterdam: John Benjamins.                 Press.
Chomsky, N. (1956). Three models for the description of          Shannon, C. E., & Weaver, W. (1964 [1949]). The
   language. IRE Transactions on Information Theory, 2,             Mathematical Theory of Communication. Urbana: The
   113-124.                                                         University of Illinois Press.
Chomsky, N. (1959). On certain formal properties of              Sipser, M. (1997). Introduction to the Theory of
   grammars. Information and Control, 2, 137-167.                   Computation. Boston, MA: PWS Publishing Company.
Chomsky, N. (1971 [1957]). Syntactic Structures. The             Tomalin, M. (2011). Syntactic structures and recursive
   Hague: Mouton.                                                   devices: a legacy of imprecision. Journal of Logic,
Chomsky, N. (1995). The Minimalist Program. Cambridge,              Language and Information, 20(3), 297-315.
   MA: MIT Press.                                                Weisstein, E. W. (2003). CRC Concise Encyclopedia of
Chomsky, N. (2010). Some simple evo-devo theses: how                Mathematics (2nd ed.). Boca Raton: Chapman &
   true might they be for language? In R. K. Larson, H.             Hall/CRC.
   Yamakido, & V. Deprez (Eds.), Evolution of Human              von Humboldt, W. (1999 [1836]). The diversity of human
   Language: Biolinguistic Perspectives. Cambridge:                 language-structure and its influence on the mental
   Cambridge University Press.                                      development of mankind, Wilhelm von Humboldt: On
Fitch, W. T. (2010). Three meanings of "recursion": key             Language. Cambridge: Cambridge University Press.
   distinctions for biolinguistics. In R. K. Larson, V.
                                                             1947

