UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Eliciting a Sensemaking Process from Verbal Protocols of Reverse Engineers
Permalink
https://escholarship.org/uc/item/4zw966v4
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 34(34)
Authors
Bryant, Adam
Mills, Robert
Peterson, Gilbert
et al.
Publication Date
2012-01-01
Peer reviewed
 eScholarship.org                                 Powered by the California Digital Library
                                                                    University of California

      Eliciting a Sensemaking Process from Verbal Protocols of Reverse Engineers
             Adam R. Bryant1,2 (adam.bryant@wpafb.af.mil), Robert F. Mills2 (robert.mills@afit.edu),
    Gilbert L. Peterson2 (gilbert.peterson@afit.edu), and Michael R. Grimaila2 (michael.grimaila@afit.edu)
                               1 Cognitive  Models and Agents Branch, 711th Human Performance Wing
                       2 Department   of Electrical and Computer Engineering, Air Force Institute of Technology
                                                 Wright-Patterson AFB, OH 45433 USA
                              Abstract                                    As part of a larger study to understand and model how peo-
   A process of sensemaking in reverse engineering was elicited        ple make sense of programs from executable representations,
   from verbal protocols of reverse engineers as they investigated     we wanted to understand the general interaction process that
   the assembly code of executable programs. Four participants         is involved as a person works with a debugger to make sense
   were observed during task performance and verbal protocols
   were collected and analyzed from two of the participants to         of a program. While sensemaking might be a general pro-
   determine their problem-solving states and characterize likely      cess of interacting with an environment to develop a mental
   transitions between those states. From this analysis, a high-       model, we investigated sensemaking in a particular applied
   level process of sensemaking is described which represents hy-
   pothesis generation and information-seeking behaviors in re-        domain (reverse engineering assembly language) because it
   verse engineering within a framework of goal-directed plan-         provides a restricted set of semantics to ground the investiga-
   ning. Future work in validation and application of the process      tion without being a “toy” problem. This was also essential
   is discussed.
                                                                       because understanding sensemaking in that domain was the
   Keywords: Sensemaking; Information seeking; Human com-
   puter interaction; verbal protocol studies.                         major focus of the larger study. So while the term ’sensemak-
                                                                       ing’ has been used to mean many different things, we were
                          Introduction                                 interested in studying how people connect information from
Sensemaking is a term used to describe a broad family of cog-          the task environment with background knowledge in order
nitive activities in which a person comes to develop a mental          to develop and modify a mental model, all with a focus on
model to represent the elements of some situation of inter-            applying this process to improve the information processing
est (Klein, Phillips, Rall, & Peluso, 2007; M. R. Endsley,             automation in software reverse engineering tools.
2000). Whereas situation awareness refers to the ability to at-           To understand this element of understanding executable
tend to relevant information elements in a task as a situation         programs, we undertook a study to collect verbal protocols
unfolds (M. Endsley & Rodgers, 1994), sensemaking refers               from reverse engineers while they analyzed programs from
to the process that enables one to come to an understanding            assembly language representations. Four participants were
of the meaning and relevance of the elements that make up              observed performing a challenging reverse engineering task,
the situation (Klein, Moon, & Hoffman, 2006; M. R. Ends-               and verbalizations from two of the participants were tran-
ley, 2000). The sensemaking process has been described as              scribed and coded. From the coded data, two participants’
an ongoing integration of knowledge from a mental model of             state transitions were extracted to determine a process involv-
a situation, available information about the context of a situ-        ing the state transitions.
ation, and perceptual data from the environment (D. M. Rus-               First, the methods used in the study are briefly described.
sell, Stefik, Pirolli, & Card, 1993; M. R. Endsley, 2000).             Next, the methods used in the analysis of verbal protocols is
   Sensemaking is described as connecting inferences and               presented. Following that, the process of sensemaking used
observations, integrating knowledge and conjecture, find-              in the reverse engineering tasks is described in the context of
ing explanations for ambiguous data, diagnosing ambiguous              complex problem-solving.
symptoms, and identifying problems (Klein et al., 2007).
Sensemaking also refers to comprehension of the signif-                                             Method
icance of ambiguous events and data in the environment                 The participants were instructed to complete a problem called
(Weick, 1995). The many functions of sensemaking de-                   Angler that was downloaded from the crackme.de website
scribe a class of distinct cognitive processes involving inter-        (Schneider, T., 2011) in February 20111 . Angler is a type of
actions between knowledge, information, and actions in an              crackme called a keygen (which stands for key generation),
environment which may encompass a number of different in-              a type of program that typically presents text fields for the
ference and learning behaviors (Menzies, 1996; Josephson,              user to enter a name and a serial number and asks the partic-
Chandrasekaran, Smith, & Tanner, 1987). Sensemaking has                ipant to reverse engineer the algorithm which processes the
been studied in naturalistic settings (Klein et al., 2007), in         user’s data. In keygen tasks, people disassemble and reverse
computer-human interaction (Pirolli & Card, 2005), in intel-           engineer the program to discover a valid key for a given user
ligence analysis (Zhang, Soergel, Klavans, & Oard, 2009),
                                                                           1 Shortly after obtaining the crackme, the crackme.de website
and in organizations (Weick, 1995), but no process-level de-
                                                                       was taken down from the Internet. The Angler program can
scription exists to characterize how people make sense of ex-          also be obtained from the website of the program’s author at
ecutable programs.                                                     http://cyclops.ueuo.com.
                                                                   1386

name or to write an algorithm that, when given a user name,         as “please remember to verbalize during the task” and “re-
produces a valid license key that unlocks the functionality of      member to talk aloud” as discussed in Trickett and Trafton
the program.                                                        (2007). Other than those reminders, the experimenter was
   The Angler crackme program presents the participant with         silent throughout the task, and took notes about each partici-
a semi-transparent visual window with two entries for text.         pants’ goals, strategies, concepts, and problems in the task.
It has three buttons, labeled “Check”, “About”, and “Exit.”            Audio data of each participant’s concurrent verbaliza-
When a user submits a name and serial number combination,           tions and video data of the experimenter’s computer moni-
the application tests whether it is a valid combination and in-     tor (showing all actions on the participant’s computer moni-
forms the user.                                                     tor) were recorded using the CamStudio software. After the
                                                                    task, participants were asked to recall what they thought their
Selection of Participants                                           strategies were, what parts of the task they thought were the
The researcher solicited reverse engineers to participate in a      most difficult, what would have made the task easier, and
verbal protocol study through an e-mail invitation to the Air       what they felt they needed to pay attention to.
Force Institute of Technology and to a cross-organizational
reverse engineering working group at Wright-Patterson Air               Overview of the Reverse Engineering Task
Force Base. The solicitation requested that participants have       Participants were to investigate, modify, and re-implement an
knowledge of reverse engineering and experience using tools         algorithm that an executable Windows program called “An-
such as OllyDbg, WinDbg, Immunity Debugger, and the IDA             gler.exe” (Cyclops, 2011) uses to process a user-provided se-
Interactive Disassembler. The solicitation produced four re-        rial number. Participants worked from assembly language
verse engineers from Wright-Patterson Air Force Base who            representations of the program provided through the IDA in-
participated without remuneration.                                  teractive disassembler and the OllyDbg debugger without ac-
                                                                    cess to source code or debugging symbols.
Data Collection                                                        The code in Angler consists of 15 major subroutines, in-
Video data of the participants’ computer screen was captured        cluding the subroutine called WinMain which starts the win-
and combined with audio recordings of the participants’ ver-        dowing process and other subroutines to present dialog boxes.
balizations during the task. The participant computer ran           The program runs within a single thread of execution in mem-
a Windows XP operating system that was hosted within a              ory and does not have hidden sections, encrypted code, or
VirtualBox virtual machine, and which was preloaded with            code obfuscations. Angler’s file header contains pointers to
the software tools and documentation identified from a pre-         four program sections that are mapped into memory at run
vious subject matter expert study of the reverse engineering        time: the .text, .rdata, .data, and .rsrc sections, which
task. The experimenter viewed the participant’s task envi-          are typical for portable executable programs compiled to run
ronment remotely over a virtual network computing (VNC)             on Win32-based operating systems (Eilam, 2005).
connection using the TightVNC server and client software               Though there are many strategies to approaching the chal-
(TightVNC Software, 2011). The experimenter’s computer              lenge, successful completion required that participants do the
was outfitted with a microphone which was wired into the            following:
participant’s cubicle to enable the combined collection of au-
dio and video data.                                                   1. Read and understand the goal of the task
   Each participant was seated at a small cubicle in an unoc-         2. Determine that a system function handles input
cupied, quiet room in front of the participant computer which         3. Isolate the input handling function
contained a mouse, keyboard, monitor, and the microphone.             4. Determine the format for the serial number input
The participants were instructed as to the different reverse          5. “Catch” the input as the program executes
engineering tools and documentation available, and were per-          6. Craft data so the program executes the success message
mitted as much time as was needed to become familiar with             7. Translate the function into pseudocode
the task environment. Paper was also available so participants        8. Write pseudocode for a key generator
could make notes, as recommended by Wood (1997).
   Each participant was given instructions on how to ver-              An algorithm in the program composed of 27 basic blocks
balize thoughts during task performance and was instructed          of assembly instructions processes the user’s serial number.
not to try to explain the task or thought processes. The ex-        The algorithm takes the first four characters of the person’s
perimenter stressed this point and demonstrated examples            name and performs a cyclic redundancy check (CRC) to pro-
of poor, acceptable, and high-quality concurrent verbaliza-         duce an even-numbered value from that character, finds four
tions with a simulated coffee-making task to help the partic-       pairs of prime factors that sum to the even-numbered values,
ipants understand how they should verbalize during task per-        and assembles an eight-value number separated by dashes
formance. During the performance of each task, the experi-          (Cyclops, 2011). Through a series of programmatic checks,
menter was seated out of the participant’s view in the opposite     the algorithm determines if the user’s serial number matches
cubicle and reminded participants to verbalize when they fell       the computed serial value. In these checks, the last instruc-
silent for more than a few seconds using simple prompts such        tions in each basic block of code check for a data value from
                                                                1387

  Verbalization Describes           Coded As                         the coding rules in Table 1. To ensure that the coding scheme
  Desired future state              Make goal representation         was appropriate for the data, interrater reliability was com-
  Activities to accomplish goal     Plan approach                    puted between two independent coders. One researcher coded
  Status of an ongoing activity     Carry out plan                   all of the data (592 segments) and afterwards a second coder
  Noticing something                Sense information                independently coded 29.2 percent of the segments (173 se-
  Recognizing relevance             Interpret information            quential segments) without having seen the original coder’s
  More abstract statement           Update knowledge                 data, and from a starting point randomly selected by the sec-
  An assumption                     Create hypothesis                ond coder. Cohen’s Kappa statistic (Cohen et al., 1960) was
  Question about something          Create hypothesis                computed to measure interrater reliability for the 29.2 percent
                                                                     of segments coded by both coders. Cohen’s Kappa measures
            Table 1: Rules Used to Code Segments                     the agreement between coders on positive and negative in-
                                                                     stances while taking into account the likelihood of agreement
                                                                     based on chance. Cohen’s Kappa is computed as:
the input and then transfer the program’s execution based on
the result of that check. If the reverse engineer does not un-                             κ = (Po − Pc )/(1 − Pc )
derstand the meanings of these behaviors, the program ap-
pears to be making a large number of arbitrary numerical             Po is the proportion of agreements between the coders and
checks in a long sequence of assembly language instructions.         Pc is the proportion of agreement which would be predicted
                                                                     by chance. Generally, a Cohen’s Kappa value of 0.0 to 0.4
                 Verbal Protocol Analysis                            indicates zero to very little agreement, 0.6 to 0.8 indicates
Participant B’s video and audio data recordings were acciden-        significant agreement, and 0.8 and above represents near per-
tally destroyed during a problem with saving the video file to       fect agreement, though there is disagreement in the literature
disk and were not able to be recovered or transcribed. Ad-           about specific ranges of values (Bakeman & Gottman, 1997;
ditionally, Participant A lacked familiarity with the tools and      Trickett & Trafton, 2007). After both coders independently
the task and was not able to make sense of the program. Al-          coded the data, the interrater reliability was calculated and
though observations of all of the participants provided valu-        the coders met to discuss disagreements. If codes had weak
able context and examples, only verbal data from Participants        interrater reliability (0.4 or below), the categories were re-
C and D were coded and analyzed to elicit the sensemaking            moved or changed and the data was recoded. The final in-
process.                                                             terrater reliability for the dual-coded verbalizations was 0.82,
   Concurrent verbal protocols were collected from Partici-          which demonstrates significant to “near perfect” agreement
pants C and D following the method outlined in (Ericsson             in all categories (Table 2). Following standard practice, the
& Simon, 1980). We reviewed the video and verbal data                remainder of the verbalizations were coded by the researcher
from Participants C and D and transcribed it into a spread-          (Trickett & Trafton, 2007).
sheet, broken into one verbal segment per row as discussed
in Trickett and Trafton (2007). The participants’ verbaliza-         Computing State Transitions
tions were segmented during transcription in order to take ad-       The state transitions from the two participants’ data were
vantage of other contextual clues from the audio and video.          computed to determine how the reverse engineers made sense
Verbalizations were segmented based on whether they repre-           of the programs. Transitions between the states indicated
sented a single idea, and when a segment contained a shift           movement through the problem-solving process
from one idea to another, the second idea was recorded in its
own row as its own new segment. Where significant verbal                  State    Category                      Cohen’s Kappa
breaks occurred, the subsequent verbalizations were recorded                a      Make goal representation      0.93
on a new row as a separate segment.                                         b      Plan approach                 0.82
   After all of the available data was transcribed, it was coded            c      Carry out plan                0.78
according to the following taxonomy of sensemaking in re-                   d      Sense information             0.72
verse engineering, established from a previous literature re-               e      Interpret information         0.75
view of sensemaking in reverse engineering in Bryant et al.                 f      Update knowledge              0.81
Bryant, Mills, Peterson, and Grimaila (2012): Make the goal                 g      Create hypothesis             0.92
representation, Plan an approach, Carry out a plan, Sense                          Average agreement             0.82
information, Interpret information, Update knowledge, and
Create a hypothesis. This taxonomy of sensemaking steps              Table 2: Interrater Reliability of Coding Scheme (173 seg-
is similar to the information-processing loop used in pro-           ments)
gramming artificial agents to interface with an environment
(S. Russell & Norvig, 2003), with the addition of a state to            As described in Bakeman and Gottman (1997), matrices of
generate goals and state to generate hypotheses.                     state transition probabilities were computed to determine the
   The data from the two participants were coded according to        process used in the task. For m states S j and Sk , and n seg-
                                                                 1388

ments i, the total transitions between each state S j and state             engineers or the broader sensemaking process. Nevertheless,
Sk are computed as:                                                         previous studies have used observations and verbal data from
                                                                            small samples during exploratory research as way to generate
                             n
           Tr(S j , Sk ) = ∑ (Si, j × Si+1,k ) : S ∈ (0, 1)          (1)    hypotheses which are to be verified with further investiga-
                            i=1                                             tion and more participants (Newell & Simon, 1972; Trickett
                                                                            & Trafton, 2007). The verbal protocols from the two partic-
   The total transitions departing a state S j are computed as:
                                                                            ipants and the observed problem-solving processes from all
                                      m                                     four participants are useful to provide a framework for un-
                    Tr(S j , out) =  ∑ Tr(S j , Sk )                 (2)    derstanding how reverse engineers make sense of executable
                                     k=1
                                                                            programs.
   The total transitions entering a state Sk are computed as:
                                     m                                                                Discussion
                    Tr(in, Sk ) =   ∑ Tr(S j , Sk )                  (3)
                                    j=1                                     Figure 1 shows a process of how the sensemaking behaviors
                                                                            were used by reverse engineers attempting to solve the An-
   The overall transition probabilities for state S j to Sk are             gler task. When the participants were working on problems in
computed as:                                                                the task, they continually moved through a loop of activities,
                                                                            which included the establishment of a goal representation, a
                              1 Tr(S j , Sk )    Tr(S j , Sk )              plan to achieve the goal, carrying out the actions of the plan,
        P(Tr(S j , Sk )) = (                  +                )     (4)
                              2 Tr(S j , out) Tr(in, Sk )                   sensing information from the task environment, interpreting
                                                                            the information, potentially updating knowledge if the infor-
   Using these equations to compute the state transitions,
                                                                            mation was relevant, and developing hypotheses based on the
the state transition probabilities for the two participants are
                                                                            new knowledge. The sensemaking loop in Figure 1 shows
shown in Table 3 and Table 4.
                                                                            this cycle as a Markov model populated with the probabilities
           a        b         c       d        e       f          g         that each state transition would occur.
    a    0.17    0.24       0.10    0.10     0.15    0.00       0.04
    b    0.14    0.20       0.21    0.21     0.03    0.00       0.12
    c    0.10    0.13       0.05    0.33     0.09    0.10       0.00
    d    0.10    0.08       0.12    0.37     0.37    0.10       0.14
    e    0.00    0.11       0.25    0.22     0.25    0.28       0.18
    f    0.05    0.00       0.00    0.10     0.10    0.21       0.29
    g    0.23    0.15       0.07    0.10     0.17    0.07       0.38
    Table 3: Transition Probability Matrix (Participant C)
           a        b         c       d        e       f          g
    a    0.21    0.26       0.22    0.15     0.14    0.00       0.04
    b    0.18    0.19       0.26    0.18     0.09    0.00       0.11
    c    0.08    0.12       0.07    0.22     0.11    0.10       0.13
    d    0.08    0.21       0.09    0.45     0.28    0.18       0.18
    e    0.18    0.06       0.08    0.22     0.24    0.20       0.03
    f    0.13    0.03       0.07    0.12     0.10    0.31       0.16
    g    0.25    0.07       0.04    0.15     0.03    0.08       0.10
    Table 4: Transition Probability Matrix (Participant D)                  Figure 1: Sensemaking Processes from the Reverse Engineer-
                                                                            ing Task
   The mean transition probabilities were computed as
1/N ∑Ni P(Tr(S j , Sk )) for N participants. The mean transition               While progressing through this process, the participants
probability was µ = 0.14 and the standard deviation was σ =                 gathered information to help them construct and refine their
0.09. The threshold for significance was set at µ + σ = 0.23.               mental models of the Angler program. As the participants
The significant transitions at the threshold P(Tr) ≥ 0.23 are               worked on the problem, they gained information about com-
shown in Figure 1.                                                          ponents such as functions, the program’s execution paths,
   Because only two participants’ verbalizations were coded,                data in the program, and sequences of instructions. They
inferences cannot be made about the how the processes from                  were then able to relate these elements to items in the task
these two samples apply to the broader population of reverse                environment.
                                                                        1389

Plans, Goals, and Actions                                               mine whether the information was relevant to one of their
Once the participants had verbalized a goal, this often was             goals, and consequently ignored or attended to the informa-
immediately followed with the development of a partially-               tion. If participants deemed the information as relevant, they
constructed plan of actions which would enable the attain-              interpreted it to connect it to concepts they already under-
ment of the goal. If the goal was to gather information from            stood. If the information element and its connected concept
the task environment, the plan involved actions which the per-          provided the person with a new perspective or more insight
son could use to help gather the required information. Like-            that was relevant to one of their goals, the person verbal-
wise if the goal was to configure the program or the reverse            ized a phrase indicating they had updated their knowledge.
engineering tools in a particular way, then the plan involved           These phrases were typically summarized or distilled state-
sequences of actions which led the person to be able to change          ments that captured the essense of how the different concepts
elements in the situation.                                              were related.
                                                                           During coding discussions, the second coder characterized
   In some cases, a participant’s goal did not directly lend it-
                                                                        this process as when the person “compiled” their information
self to a plan, so the person deliberated over different ideas
                                                                        in an analogous manner to how a compiler converts a pro-
to construct and evaluate an approach that would generate a
                                                                        gram’s source code into executable code.
usable plan. Sometimes the deliberation was verbalized, and
others it was inferred by the presence of long pauses.                  Mental Models and Hypotheses
   Participants appeared to determine the best actions for their        Once participants had added new summarized knowledge to
situation by thinking through hypothesized behaviors and in-            their mental model of a program, they often came up with a
ferred future states of the program. When participants verbal-          hypothesis directly afterward. Participants appeared to gen-
ized plans, their plans involved sets of actions in which some          erate hypotheses in the task after deducing the logical conclu-
of the actions were sequenced. Sometimes the participants               sions of new knowledge they had acquired.
did not order their actions into a sequence until they were                Hypotheses and assumptions were generated mainly af-
already taking some initial actions and detecting conflicts in          ter participants sensed and interpreted information and up-
how those actions would affect the state of the situation.              dated their knowledge with the implications of this informa-
   Other plans the participants expressed included search-              tion. The participants’ hypotheses took the form of verifiable
ing information from the reverse engineering tool about text            statements such as: “it looks like GetDialogItem creates a
strings, debugging the program to see how the program’s                 handle to some part of the dialog that’s open.” In this case,
memory stack changes, labeling a function so it can be identi-          the participant started a subsequent loop through the sense-
fied later, inserting a breakpoint after the initialization routine     making process with the goal of verifying whether or not the
to “catch” the program, and tracing data as it flows through a          GetDialogItem function creates such a Window handle.
function during simulated program execution.                               The hypotheses that resulted from this process were typ-
                                                                        ically used to generate a new goal, such as to seek out in-
Information Processing and Interpretation
                                                                        formation from the environment to confirm or refute a fact
Participants processed information by actively seeking it out           or to investigate another line of investigation about how the
and by passively noticing information during the performance            program works. However, when participants did not progress
of some other action. When participants passively sensed the            through the process to the development of a hypothesis, they
information, they executed the Angler program to gather in-             were not able to generate information-seeking goals and got
formation about its behaviors or looked through the disassem-           “stuck” in the task. In these cases, participants reverted to ex-
bled code to gather clues that might be useful.                         ploring instructions or behaviors of the code, since they did
   When participants actively sought out information, they set          not have specific hypotheses about the Angler program to in-
a goal for the information they were interested in obtaining,           vestigate.
made a plan to acquire that information, and followed the plan
by carrying out actions in the task environment. In one exam-                                    Conclusions
ple, a participant wrote down the addresses of system calls             A process of sensemaking in reverse engineering was de-
and used the search features of the debugger to find each of            scribed and characterized through obervations and analysis
the calls.                                                              of verbal protocols from participants reverse engineering pro-
   Participants actively sought out information about the pro-          grams from assembly language representations. Verbal pro-
gram’s behavior by isolating phenomena. To do this, partici-            tocols were analyzed to extract state transition patterns from
pants used the debugger to move the program’s execution past            two reverse engineers’ performance, and from that data a pro-
a system call (which performs some action for the program),             cess of sensemaking was elicited and the steps of that pro-
and then looked through the current register values and disas-          cess were described in a theory of how people make sense
sembled code in the debugger to determine what had changed              of executable programs. Participants were observed forming
in the state of the program.                                            goals, creating plans to achieve their goals, and carrying out
   In either active or passive information processing, the par-         plans. Participants also sensed information from the task en-
ticipants seemed to perform some initial processing to deter-           vironment, interpreted the information, updated their mental
                                                                    1390

model with the information, and generated hypotheses from            Immunity, Inc. (2011). Immunity Debugger. Avail-
that integration which led to new goals.                               able from http://www.immunityinc.com/products-
   This research represents a necessary step toward increasing         immdbg.shtml
the autonomy of reverse engineering tools, and can be used to        Josephson, J. R., Chandrasekaran, B., Smith, J. W., & Tan-
determine a general theory of sensemaking that can improve             ner, M. C. (1987). A mechanism for forming composite
the ways in which people interact with other complex sys-              explanatory hypotheses. IEEE Transactions on Systems,
tems. The work is limited in that it only involved observations        Man, and Cybernetics, 17(3), 445–454.
of four participants and collection of verbal protocols from         Klein, G., Moon, B., & Hoffman, R. (2006). Making sense of
two participants, and its generality is potentially limited by         sensemaking 1: Alternative perspectives. IEEE Intelligent
the nature of the task; nevertheless the results provide insight       Systems, 21(4), 70–73.
which can be used to develop a more general computational            Klein, G., Phillips, J., Rall, E., & Peluso, D. (2007). A data-
theory of sensemaking through future empirical study.                  frame theory of sensemaking. In Expertise Out of Context:
   Future work is needed to determine the generality of how            Proceedings of the Sixth International Conference on Nat-
people work through this process in similar information-               uralistic Decision Making (pp. 113–155).
processing tasks. Future research is also needed in deter-           Menzies, T. (1996, September). Applications of abduc-
mining how these processes can be realized as models within            tion: Knowledge-level modelling. International Journal
established computational cognitive architectures. Finally,            of Human-Computer Studies, 45(3), 305–335.
work is needed in employing these findings to improve hu-            Microsoft, Inc.       (2011).      WinDbg.      Available from
mans’ interactions with complex systems such as reverse en-            http://msdn.microsoft.com/en-us/library/
gineering tools.                                                       ff561300(v=vs.85).aspx
                                                                     Newell, A., & Simon, H. (1972). Human Problem Solving.
                    Acknowledgments                                    Prentice-Hall Englewood Cliffs, NJ.
The Sensors Directorate at Wright-Patterson Air Force Base           OllyDbg.         (2011).        OllyDbg.        Available from
supported this research. The views expressed in this article           http://www.ollydbg.de/
are those of the authors and do not reflect the official policy      Pirolli, P., & Card, S. (2005). The sensemaking process and
or position of the United States Air Force, Department of De-          leverage points for analyst technology as identified through
fense, or the United States Government.                                cognitive task analysis. In Proceedings of the International
                                                                       Conference on Intelligence Analysis (pp. 2–4).
                         References                                  Russell, D. M., Stefik, M. J., Pirolli, P., & Card, S. K. (1993).
Bakeman, R., & Gottman, J. M. (1997). Observing inter-                 The cost structure of sensemaking. In Proceedings of the
  action: An introduction to sequential analysis (2nd ed.).            SIGCHI conference on Human factors in computing sys-
  Cambridge: Cambridge University Press.                               tems (CHI93) (pp. 269–276). New York, New York, USA:
Bryant, A., Mills, R., Peterson, G., & Grimaila, M. (2012).            ACM Press.
  (in press) software reverse engineering as a sensemaking           Russell, S., & Norvig, P. (2003). Artificial Intelligence: A
  task. Journal of Information Assurance and Security.                 Modern Approach. Pearson Education.
CamStudio Developers. (2011). Camstudio. Available from              Schneider, T. (2011, jan). crackme.de. Available from
  http://camstudio.org                                                 http://crackme.de
Cohen, J., et al. (1960). A coefficient of agreement for nom-        TightVNC Software. (2011). TightVNC. Available from
  inal scales. Educational and Psychological Measurement,              http://www.tightvnc.com
  20(1), 37–46.                                                      Trickett, S., & Trafton, J. (2007). A primer on verbal protocol
Cyclops. (2011). Crackmes by cyclops. Available from                   analysis. In D. Schmorrow, J. Cohn, & D. Nicholson (Eds.),
  http://cyclops.ueuo.com/crackme.html                                 The PSI Handbook of Virtual Environments for Training
Eilam, E. (2005). Reversing: Secrets of Reverse Engineering.           and Education: Developments for the Military and Beyond.
  Wiley.                                                               Westport, CT Praeger Security International.
Endsley, M., & Rodgers, M. (1994). Situation awareness               Weick, K. (1995). Sensemaking in Organizations. Sage Pub-
  information requirements analysis for en route air traffic           lications, Inc.
  control [Conference proceedings (article)]. In Proceedings         Wood, L. E. (1997, March). Semi-structured interviewing for
  of the Human Factors and Ergonomics Society 38th Annual              user-centered design. Interactions, 4(2), 48–61.
  Meeting (Vol. 38, pp. 71–75).                                      Zhang, P., Soergel, D., Klavans, J. L., & Oard, D. W. (2009,
Endsley, M. R. (2000). Situation models: An avenue to the              June). Extending sense-making models with ideas from
  modeling of mental models. In Proceedings of the Human               cognition and learning theories. Proceedings of the Ameri-
  Factors and Ergonomics Society 44th Annual Meeting.                  can Society for Information Science and Technology, 45(1),
Ericsson, K., & Simon, H. (1980). Verbal reports as data.              23–23.
  Psychological Review, 87(3), 215.
Hex-Rays. (2011). The IDA Pro Disassembler and Debugger.
  Available from http://www.hex-rays.com/idapro/
                                                                 1391

