UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Metacat: A Self-Watching Cognitive Architecture for Analogy-Making
Permalink
https://escholarship.org/uc/item/3vc7r0b6
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 24(24)
Author
Marshall, James B
Publication Date
2002-01-01
Peer reviewed
 eScholarship.org                                  Powered by the California Digital Library
                                                                    University of California

                Metacat: A Self-Watching Cognitive Architecture
                                          for Analogy-Making
                            James B. Marshall (marshall@cs.pomona.edu)
                                             Computer Science Program
                                                   Pomona College
                                                 610 N. College Ave.
                                             Claremont, CA 91711 USA
                        Abstract                                What seems to make brains conscious is the
                                                                special way they are organized —in particular,
   This paper describes Metacat, an extension of the            the higher-level structures and mechanisms that
   Copycat analogy-making program. Metacat is able
   to monitor its own processing, allowing it to recog-         come into being. I see two dimensions as being
   nize, remember, and recall patterns that occur in            critical: (1) the fact that brains possess con-
   its “train of thought” as it makes analogies. This           cepts, allowing complex representational struc-
   gives the program a high degree of flexibility and           tures to be built that automatically come with
   self-control. The architecture of the program is de-         associative links to all sorts of prior experiences,
   scribed, along with a sample run illustrating the
   program’s behavior.                                          and (2) the fact that brains can self-monitor,
                                                                allowing a complex internal self-model to arise,
                                                                allowing the system an enormous degree of self-
                    Introduction                                control and open-endedness.
This paper describes Metacat, an extension of the
Copycat analogy-making program originally devel-                Work on Copycat explored the first idea through
oped by Hofstadter and Mitchell (Hofstadter, 1984;           the development of a computer model of analogy-
Mitchell, 1993). Copycat was developed as a model            making in which the program’s representation of
of the complex interplay between bottom-up and               concepts is intimately intertwined with its mecha-
top-down perceptual processes in the mind, which             nisms for perceiving similarity between diﬀerent ide-
together enable humans to perceive analogies be-             alized situations. Recent work has focused on the
tween diﬀerent situations in remarkably flexible             second idea by incorporating self-watching into the
ways. The program operates in an idealized mi-               model—namely, the ability of a system to perceive
croworld of analogy problems involving short strings         and to explicitly characterize its own perceptual pro-
of letters. Although the program understands only a          cesses. The objective of this work has been to de-
limited set of concepts pertaining to its letter-string      velop mechanisms that allow the program to monitor
world, its “fluid” processing mechanisms give it con-        its own actions and to make explicit the ideas that
siderable flexibility in recognizing and applying these      come into play during the course of solving analogy
concepts in many diverse situations.                         problems. This can be thought of as adding a higher
   The long-term goal of the Copycat line of research        “cognitive” layer on top of the program’s “subcog-
is to computationally model how high-level cognitive         nitive” layer, enabling the program to watch and
phenomena such as creativity, analogical perception,         remember what happens at its subcognitive level as
understanding, and self-awareness can arise out of a         perceptual structures are built, reconfigured, and de-
subcognitive substrate composed of a huge number             stroyed. Humans are capable of paying attention to
of tiny, nondeterministic processes, each of which is        patterns in their own thinking in a similar fashion
far too small by itself to support such phenomena.           (see, for example, Chi et al., 1994).
Few people would suggest that individual neurons in
the brain (or individual molecules) are “conscious”          Self-watching in Copycat and Metacat
in anything like the normal sense in which humans            The Copycat architecture has been discussed at
experience consciousness. One is forced to accept            length elsewhere (Mitchell, 1993; Hofstadter and
the fact that self-awareness arises, somehow, out of         FARG, 1995), so details will be omitted here.
nothing but billions of molecular chemical reactions         Briefly, the program consists of a long-term mem-
and neuronal firings. How can individually meaning-          ory of concepts about the letter-string world, called
less physical events in a brain—even a huge number           the Slipnet, together with a short-term memory for
of them—ultimately give rise to meaningful aware-            perceptual structures, called the Workspace. In
ness? Hofstadter has argued that two key ideas are           the Workspace, small nondeterministic agents called
of paramount importance (Hofstadter and FARG,                codelets examine the letters of an analogy problem
1995):                                                       (“abc ⇒ abd; mrrjjj ⇒ ?”, for example), and build

up structures around the letters representing a par-     processing of that input. For example, when solving
ticular interpretation of the problem. The program’s     the problem “abc ⇒ abd; xyz ⇒ ?”, Copycat usu-
high-level behavior emerges in a bottom-up manner        ally attempts to take the successor of z, which is
from the collective actions of many codelets work-       impossible in the program’s microworld. It “hits a
ing in parallel, in much the same way that an ant        snag”, and is forced to try something else. However,
colony’s high-level behavior emerges from the indi-      it often just tries the same thing again, over and
vidual behaviors of the underlying ants, without any     over, sometimes as many as thirty or forty times be-
central executive directing the course of events.        fore stumbling by chance on an alternative approach
   Guiding the search for a mutually-consistent set      (such as the answer xyd). Unlike humans, the pro-
of structures are concepts in the Slipnet, which be-     gram is unable to recognize when it has fallen into
come activated to diﬀerent degrees depending on          a repetitive pattern of behavior. It has no memory
the activity in the Workspace. This activation may       of its actions over time, and thus cannot recognize
spread to neighboring concepts, and strongly influ-      when it has encountered the same situation in the
ences codelet decisions, resulting in top-down pres-     past. As a result, Copycat lacks insight into how it
sure that guides the program in its search for a good    arrives at its answers, and consequently cannot ex-
interpretation of a problem.                             plain what makes one answer better or worse than
   The overall degree of Workspace organization is       another.
measured by a number called the temperature. Tem-           In contrast, Metacat is able to create much
perature not only reflects the state of the Workspace,   richer representations of the analogies it makes, en-
it also continuously regulates the amount of random-     abling it to compare and contrast answers in an in-
ness used by codelets in making decisions. At high       sightful way. This has involved incorporating an
temperatures, few Workspace structures exist, so de-     episodic memory into the original Copycat architec-
cisions are made in a highly random manner, since        ture, along with new mechanisms that allow the pro-
not much is yet known about the problem. How-            gram to monitor itself, so that it can recognize, re-
ever, as relationships among the letters are noticed     member, and recall patterns that occur in its “train
and structures are built, the temperature falls, and     of thought” as it makes analogies.
Copycat begins to gain “confidence” in its under-           To do this, Metacat creates an explicit sequen-
standing of the situation. At lower temperatures, de-    tial record of the most important processing events
cisions are still probabilistic, but are much less ran-  that occur during a run. This temporal record is ex-
dom, being strongly biased by the estimated promise      amined by codelets for patterns—in the same way
of newly emerging structures, all of which compete       that Copycat’s codelets examine letter-strings for
for attention by codelets. At very low temperatures,     patterns—and serves as the basis for constructing
codelets pay attention to only the most promising        an abstract description of an answer in terms of the
structures, and decisions become largely determinis-     key concepts and events that led to its discovery.
tic. Thus the type of strategy used by the program       Furthermore, by monitoring its own processing in
to explore its search space ranges along a broad con-    this way, Metacat can recognize when it has become
tinuum, from being very diﬀuse and highly parallel       “stuck in a rut”, enabling the program to break out
at high temperatures to being very serial and focused    of the rut by focusing on ideas other than the ones
at low temperatures.                                     that seem to be leading it nowhere.
   To summarize, Copycat’s search proceeds via a
large number of fine-grained stochastic decisions,              The Architecture of Metacat
which depend on the temperature. These decisions         Metacat’s architecture includes all of Copycat’s ar-
may cause new structures to be built or existing         chitectural components, such as the Workspace and
structures to be destroyed, which changes the tem-       the Slipnet, as well as three new components: the
perature and subsequently alters the course of struc-    Episodic Memory, the Themespace, and the Tempo-
ture building, forming a kind of feedback loop. Tem-     ral Trace. When the program discovers a new an-
perature thus serves as a very crude mechanism for       swer, it pauses to display the answer along with the
self-watching in Copycat, since it allows the program    Workspace structures that gave rise to it. These
to regulate its own behavior to a limited extent.        structures represent a way of interpreting the prob-
That is, by tying the stochastic activity of codelets    lem that yields the answer just found. All of this
to the temperature, the program becomes sensitive        information is then packaged together into an an-
to the consequences of its own actions, since the tem-   swer description and stored in the Episodic Mem-
perature reflects the result of these actions, albeit in ory, after which the program continues searching for
a very coarse way (i.e., in the form of a single num-    alternative answers to the problem, instead of sim-
ber).                                                    ply quitting. Gradually, over time, a series of answer
   This type of rudimentary self-watching, however,      descriptions accumulates in memory, each one con-
is quite primitive. Copycat can characterize patterns    taining much more information than just the answer
within its perceptual input (the letter strings), but    string itself.
is completely oblivious to patterns that arise in its       The most important structures stored in answer

descriptions are called themes, which represent the      mechanisms for perceiving patterns in its perceptual
essential ideas underlying an answer. The collec-        input and in its own processing of that input. When
tion of themes associated with an answer serves as       a new answer is found, an answer description can
the basis for comparing it to other answers stored in    be formed by examining the temporal record in the
memory. Furthermore, Metacat may be reminded             Trace to see which events contributed to the answer’s
of other answers it has encountered in the past if       discovery.
the themes associated with a newly discovered an-           This approach is similar in flavor to work on
swer, acting as a memory retrieval cue, are similar      derivational analogy, in which the trace of a
enough to those of a previously stored answer de-        problem-solving session is stored in memory for fu-
scription. Thus an answer’s themes act as an index       ture reference, together with a series of annotations
under which it is stored and retrieved from memory.      describing the conditions under which each step in
   Themes get created in Metacat’s Themespace            the solution was taken (Carbonell, 1986; Veloso,
as codelets build structures around the letter-          1993). In Metacat’s case, however, the information
strings, and are composed of Slipnet concepts. For       in the Trace is used as the basis for constructing
example, in the problem “abc ⇒ abd; xyz ⇒ ?”,            an abstract description of the answer found, rather
an Alphabetic-Position: opposite theme representing      than being permanently stored itself.
the idea of alphabetic-position symmetry between            One way to appreciate the abstract, chunked na-
the letters a and z might get built if the program       ture of the information in the Trace is to consider the
perceives these letters as playing analogous roles in    number of “steps” that occur during a typical run of
their respective strings (an interpretation that may     Metacat. At a very fine-grained level of description,
lead to the “mirror image” answer wyz ).                 where each step corresponds to an action performed
   In some ways, themes are like ordinary Workspace      by a single codelet, a run consists of many hundreds
structures. They are not initially present in the        or thousands of steps. At this level of description, no
Themespace; rather, they arise during the course of      two runs are ever exactly the same, even if they in-
a run as the result of codelet activity occurring in the volve the same letter-strings (unless, of course, both
Workspace. In other ways, however, themes behave         runs start with the same random number seed). On
like Slipnet concepts. They can take on diﬀerent lev-    the other hand, at the level of description of the
els of activation, reflecting the extent to which the    Trace, a typical run consists of a few dozen steps.
ideas they represent are supported by structures in      At this level of granularity, each step corresponds
the Workspace. A theme’s activation level decays         to a single event represented in the Trace—each of
over time, and is influenced by the activation lev-      which arises from the actions of many codelets.
els of other themes. Like Slipnet concepts, themes          For example, Figure 1 shows the contents of
can, under certain conditions, exert strong top-down     the Trace after a run on the problem “abc ⇒ abd;
pressure on perceptual activity in the Workspace. In     xyz ⇒ ?”, in which the program, after trying unsuc-
fact, themes can assume both positive and negative       cessfully a couple of times to take the successor of
levels of activation, ranging from −100 to +100. A       z, answers xyd . The events that occur during the
positively-activated theme exerts “positive thematic     run appear left to right in chronological order. Al-
pressure”, encouraging the creation of Workspace         though this run involves a total of 1,558 codelets,
structures that support the idea represented by the      the high-level picture shown in the Trace consists of
theme. A negatively-activated theme, on the other        just twelve events, which represent the “major mile-
hand, exerts “negative thematic pressure”, which         stones” encountered along the way in the program’s
discourages the creation of structures related to the    search for an answer. Such events include the acti-
theme, promoting instead the creation of alternative     vation of concepts in the Slipnet, perceiving entire
structures.                                              strings as single, chunked wholes, creating new rules
   The Temporal Trace serves as the focal point for      for describing string changes, hitting a snag, and
self-watching in Metacat. Like the Themespace, the       discovering a new answer.
Trace accumulates information over the course of a          For instance, as can be seen in the figure, the Slip-
single run, and can be viewed as an extension of the     net concept identity gets activated early on in this
Workspace. The Trace stores an explicit temporal         particular run (due to the program perceiving the
record of the most important processing events that      a’s and b’s in abc and abd as corresponding). This
occur while the program works on an analogy prob-        is followed by the perception of abc and xyz as pre-
lem. Examples of such events include recognizing         decessor groups going in the same direction (to the
some key idea pertaining to the problem (by notic-       left). The next event records the creation of the rule
ing the strong activation of a theme or concept, for     Change letter-category of rightmost letter to succes-
instance), hitting a snag, or discovering a new an-      sor for describing abc ⇒ abd , which leads inevitably
swer. Once processing events have been explicitly        to a snag. In the aftermath of the snag, another rule
represented in the Trace as “reified” structures in      is created (Change letter-category of rightmost letter
their own right, they are subject to examination by      to ‘d’ ), and abc and xyz are reperceived as succes-
codelets as well. Metacat thus uses a single set of      sor groups (again going in the same direction—only

                Figure 1: The temporal record of a run on the problem “abc ⇒ abd; xyz ⇒ ?”.
this time to the right). However, the program again     codelets (the probability becoming higher as more
attempts to use the first rule, resulting in another    snags accumulate), causing them to take action by
snag. Finally, after creating yet another rule and      clamping the “oﬀending” themes (such as String-
again perceiving xyz as a successor group, the pro-     Position: identity) with strong negative activation.
gram finds the answer xyd .                             This encourages the program to explore alternative
                                                        interpretations of the problem by steering it away
    Pattern-clamping and Self-control                   from the ideas causing the snag, which may subse-
The Trace allows Metacat to monitor the subcogni-       quently lead it to the discovery of other answers,
tive processing activity in the Workspace at a very     such as wyz . In this way, Metacat can recognize its
abstract and highly-chunked level of description, en-   own repetitive behavior and respond accordingly.
abling the program to “see” what it is doing dur-          Two types of codelets are responsible for exam-
ing a run. Equally important, however, is the pro-      ining and responding to events unfolding in the
gram’s ability to respond to what it sees by clamping   Trace. The first type, called a Progress-watcher, is
particular themes and concepts at high activation,      responsible for deciding whether or not to unclamp a
resulting in strong top-down pressure on process-       clamped pattern. If a Progress-watcher codelet runs
ing. Various types of patterns consisting of sets of    while a pattern is clamped, it examines the most
themes, concepts, or codelet types can be clamped       recent event in the Trace to determine how much
by the program in response to diﬀerent situations       time has elapsed since the event occurred. Gener-
that arise. Clamping a pattern alters the probabil-     ally speaking, the purpose of clamping a pattern is
ities that certain types of codelets will run, or that  to precipitate a series of events that reorganize the
certain types of Workspace structures will get built,   perceptual configuration of the Workspace in some
eﬀectively steering the behavior of the program in      way. It is therefore better to wait until the structure-
particular directions. This may lead the program to     building activity occurring in the wake of a clamp
revise its interpretation of a problem, by catalyzing   has settled down before concluding that the clamp
the reorganization of structures in the Workspace in    has “run its course”. Accordingly, if the amount
accordance with the ideas represented by the pat-       of time since the most recent event in the Trace
tern.                                                   is less than some minimal settling period, then the
   Metacat’s ability to revise its perception of a sit- codelet simply fizzles, leaving the clamped pattern
uation in response to events in the Trace aﬀords        still in eﬀect. On the other hand, if enough time
the program a very powerful degree of self-control.     has passed without any new important events hav-
Patterns—especially patterns of themes—act as a         ing transpired, the codelet unclamps the pattern and
“medium” through which the program is able to           then determines the amount of progress that was
wield control over its own behavior. For example,       made since the clamp occurred. Depending on the
in the problem “abc ⇒ abd; xyz ⇒ ?”, the program        amount of progress achieved, the codelet may decide
usually perceives abc and xyz as going in the same      to post a follow-up codelet in order to see whether a
direction at first, which leads to a snag (as in the    new answer can be made based on the newly-created
run shown in Figure 1). This interpretation of the      structures.
problem, based on the idea that letters having iden-       The criteria for judging the success of a clamp
tical positions in their respective strings correspond  can vary. Sometimes, the purpose of clamping a
to one another (a to x, b to y, c to z ), is charac-    pattern is to promote the creation of specific types
terized by a String-Position: identity theme. When      of Workspace structures. Other times, the purpose is
an event is recorded in the Trace, the themes most      to encourage the creation of structures of any type,
active at the time of the event are also noted along    so long as they are compatible with the clamped
with it. These themes serve as the event’s thematic     pattern. The progress achieved by a clamp can be
characterization. In the case of a snag event, the      measured by observing the number of structures that
thematic characterization represents an interpreta-     get built in the immediate aftermath of the clamp,
tion of the problem that has just led to failure. If    and the extent to which they are compatible with
Metacat continues to hit the same snag several times    the pattern.
in succession, a series of snag events will accumulate     If no patterns are clamped when a Progress-
in the Trace, all with very similar thematic char-      watcher codelet runs, then instead of checking on
acterizations. This similarity may be noticed by        the progression of events in the Trace, the codelet

checks on the current rate of structure-building ac-      cessful attempts to break out of a cycle of snags.
tivity in the Workspace. This activity is measured        That is, clamping a pattern in response to a recur-
by a single number that serves as a quick estimate of     ring snag may prove to be ineﬀective, leading only
the “freshness” of the current Workspace structure        to further snags and more pattern-clamping, rather
configuration. More precisely, it is an inverse func-     than to a new interpretation of the problem. Faced
tion of the average age of the most recently created      with several similar clamp events in the Trace, a
structures. Thus the activity level tends to remain       Jootser codelet decides probabilistically whether to
high as long as new structures are being built, but       “joots” based on the number of clamps and the aver-
eventually drops to zero in the absence of new struc-     age amount of progress achieved by each. The more
tures.                                                    clamp events there are, the more likely jootsing is to
   If the activity level is zero, indicating that nothing occur, especially if the amount of progress is low, un-
much is happening in the Workspace, then Metacat          less recent clamps appear to be making more head-
may have arrived at an impasse in its search for an-      way than earlier ones. Unlike jootsing from snags,
swers to the current problem. This is not quite as        however, jootsing from a series of recurring clamp
bad as hitting a snag, but it still ought to prod the     events does not involve the clamping of any new pat-
program into trying something diﬀerent. However,          terns in response. Instead, Metacat simply “gives
in the case of an impasse, there is usually no clear      up” in a graceful manner and stops.
set of “oﬀending” structures or themes on which to           In a sense, Metacat’s ability to respond to a re-
pin the blame, unlike in the case of a snag. Indeed,      curring snag by focusing on alternative ideas can
the impasse may well arise from a lack of appropri-       be thought of as “first-order” jootsing. In contrast,
ate structures, rather than from the existence of the     the program’s ability to eventually give up when it
“wrong” structures.                                       recognizes that its repeated attempts to circumvent
   Therefore, in the absence of Workspace activity,       a snag are leading nowhere can be thought of as
Progress-watcher codelets check to see whether par-       “higher-order” or “meta-level” jootsing (i.e., joots-
ticular types of new structures are needed. For ex-       ing from repeated unsuccessful jootsing). The im-
ample, a codelet may examine the quality of the           portant point is that the same general mechanisms
rules that have been built so far. If no good rules       are responsible for first-order and meta-level joots-
yet exist, the codelet may try to encourage the cre-      ing in Metacat—namely, Jootser codelets and the
ation of better rules by clamping a pattern that          explicit representation of processing events in the
strongly increases the probability that rule-seeking      Trace.
codelets will run, while simultaneously inhibiting
other types of codelets. Eventually, other Progress-                An Example of Jootsing
watcher codelets will turn oﬀ the clamp once enough       The following example illustrates the idea of joots-
time has passed without any more events being             ing. In this run, Metacat is given the problem
added to the Trace. Since this type of clamp is           “eqe ⇒ qeq; abbbc ⇒ ?”. The program builds up
only concerned with the creation of new rules, the        an interpretation of the string abbbc as a successor
amount of progress achieved is judged solely on the       group composed of the letter a, the group bbb, and
basis of the quality of the rules that get created in     the letter c. The two rules shown below are also
the clamp’s wake.                                         created to describe the eqe ⇒ qeq change:
   The second type of codelet that “watches the ac-
tion” from the high-level vantage point of the Trace      • Swap letter-categories of all objects in string
is called a Jootser (short for “j umping out of t he
system”). These codelets are responsible for notic-       • Change letter-category of leftmost letter to ‘q’
ing repetitive behavior that the program has fallen          Change letter-category of middle letter to ‘e’
into. An example of such behavior arising from a             Change letter-category of rightmost letter to ‘q’
snag was sketched above. However, Jootser codelets
are sensitive to other kinds of situations as well. For      Around time step 1100, the program attempts to
example, it is possible for Metacat to become “fix-       apply the first rule to abbbc, which results in a snag,
ated” on some idea, such that it ends up clamping         since the idea of a three-way swap involving the let-
the same pattern over and over again, without mak-        ters a, b, and c makes no sense (see Figure 2). Of
ing any significant progress. In this case, too, Jootser  course, if it had chosen to use the second rule in-
codelets may notice the series of recurring events in     stead of the first, then it would have found the an-
the Trace and take action.                                swer qeeeq , but it prefers the first rule, since this
   For instance, if an analogy problem happens to         rule is more abstract.
involve a string that changes in some diﬃcult-to-            Over the next 3000 time steps, the program tries
describe way, the program may end up repeatedly           again and again to swap the letters of abbbc, of-
clamping patterns in an attempt to spur the creation      ten breaking various structures in the process, but
of better rules for describing the change. Repeti-        always rebuilding them in the same way as be-
tive clamping behavior can even arise from unsuc-         fore. Eventually, at time step 4280, a Jootser

 Figure 2: Attempting to swap the letters of abbbc
codelet notices the pattern of recurring snag events      Figure 3: Clamping patterns in response to snags
in the Trace, all of which involve the themes
String-Position: identity, Object-Type: identity, and    ends the run.
Object-Type: diﬀerent. These themes arise from the          As this example shows, Metacat is able to realize
program’s interpretation of the letters e, q, and e      when it is “stumped”, instead of just cycling end-
in eqe as corresponding, respectively, to the let-       lessly. The program’s ability to monitor its own pro-
ter a, the group bbb, and the letter c in abbbc.         cessing at an abstract level of description aﬀords it
The Object-Type: identity theme is based on the          a great deal of flexibility and self-control, and, it is
e–a and e–c correspondences, while the Object-           to be hoped, represents a step toward the goal of
Type: diﬀerent theme results from the correspon-         understanding the cognitive mechanisms underlying
dence between q and bbb, since one is a letter and       human self-awareness.
the other a group.
   In hopes of finding a way around the recurring                              References
snag, the codelet decides to negatively clamp the        Carbonell, J. (1986). Derivational analogy: a the-
Object-Type: identity theme. In the wake of the             ory of reconstructive problem solving and exper-
clamp, abbbc is reinterpreted as a predecessor group        tise acquisition. In R. Michalski, J. Carbonell, &
going to the left, and a new rule is created to describe    T. Mitchell (Eds.), Machine learning, volume 2.
eqe ⇒ qeq , but these new structures do not really          San Francisco: Morgan Kaufmann.
change the basic situation. Soon afterwards, another     Chi, M., de Leeuw, N., Chiu, M.-H., & LaVancher,
Jootser codelet tries again, this time clamping both        C. (1994). Eliciting self-explanations improves un-
Object-Type themes, which essentially “paralyzes”           derstanding. Cognitive Science, 18:439–477.
the program for the duration of the clamp, since
no structures can be built that are compatible with      Hofstadter, D. R. (1984). The Copycat project: an
both of these themes simultaneously. Figure 3 shows         experiment in nondeterminism and creative analo-
the state of the Workspace and Trace at the time of         gies. AI Memo 755, MIT Artificial Intelligence
the second clamp.                                           Laboratory.
   A few hundred codelets later, the program hits        Hofstadter, D. R. & the Fluid Analogies Research
the snag again. This is followed shortly thereafter         Group (1995). Fluid concepts and creative analo-
by another clamp. This clamp, like the one before it,       gies. New York: Basic Books.
achieves no new progress. After hitting the snag yet     Marshall, J. (1999). Metacat: a self-watching cogni-
again, the program finally decides to give up. More         tive architecture for analogy-making and high-level
precisely, at time step 5933, a Jootser codelet notices     perception. Doctoral dissertation, Department of
the three clamp events in the Trace, all of which in-       Computer Science, Indiana University, Blooming-
volve overlapping thematic characterizations. More-         ton. http://www.cs.pomona.edu/marshall/metacat.pdf
over, neither of the two most recent clamps have
resulted in any discernible progress, which further      Mitchell, M. (1993). Analogy-making as perception.
increases the probability of jootsing. Consequently,        Cambridge, MA: MIT Press/Bradford Books.
the program prints the message “this is getting bor-     Veloso, M. (1994). Planning and learning by analog-
ing, I can’t think of anything else to try” and then        ical reasoning. Berlin: Springer-Verlag.

