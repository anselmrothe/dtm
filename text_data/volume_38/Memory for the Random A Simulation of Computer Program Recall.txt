             Memory for the Random: A Simulation of Computer Program Recall
                                                Fernand Gobet (fgobet@liv.ac.uk)
                                   Department of Psychological Sciences, University of Liverpool,
                                            Bedford Street South, Liverpool, L69 3BX, UK
                                                 Iain Oliver (iso@psyc.nott.ac.uk)
                                                          School of Psychology
                                               University Park, University of Nottingham
                                                      Nottingham NG7 2RD, UK
                            Abstract                                  chunking (De Groot & Gobet, 1996; Gobet, 1993). The rea-
                                                                      son is simple: an expert, who has acquired more chunks than
   Contrary to a widely held belief, experts recall random            a weak player, is more likely to recognise a few chunks in a
   material better than non-experts. This phenomenon, predicted       given position fortuitously, and thus obtains a better recall.
   by the CHREST computational model, was first established           Crucially, Sala and Gobet (2016) have recently demon-
   with chess players. Recently, it has been shown through a
   meta-analysis that it generalises to nearly all domains where
                                                                      strated in a meta-analysis that this effect is present in nearly
   the effect has been tested. In this paper, we carry out            every domain of expertise reviewed. The overall correlation
   computer simulations to test whether the mechanism                 between expertise and recall of random material was moder-
   postulated with chess experts – the acquisition and use of a       ate but statistically significant (r = .42, p < .001).
   large number of chunks – also applies to computer                     Chase and Simon’s (1973) chunking theory spawned a
   programming experts. The results show that a simplified            large number of experimental studies. Several of these
   version of CHREST (without the learning and use of high-           studies have been carried out in the domain of computer
   level schemata known as templates) broadly captures the skill      programming, and the importance of chunking in
   effect with scrambled programs. However, it fails to account       programming is generally accepted (e.g., Adelson, 1981;
   for the differences found in humans between different types of
                                                                      Barfield, 1986; McKeithen et al., 1981). In addition,
   randomisation. To account for these differences, additional
   mechanisms are necessary that use semantic processing.             Schmidt (1986) found that recall of computer programs
                                                                      correlates with their comprehension. Since high
   Keywords: chunk; computer           programming;    expertise;     comprehension is a distinguishing feature of expertise in
   memory recall; random material                                     programming, this correlation suggests that chunks, as
                                                                      measured by the recall task, may play a causal role.
                                                                         To our knowledge, no computational model has been
                       Introduction                                   developed so far to simulate the empirical data about
Computer programming involves a variety of skills: the                memory for computer programs. The goal of the present
ability to understand programs written by others, to design,          paper is to fill in this gap, using the CHREST architecture as
write and debug one’s own programs, and to use problem-               a modelling environment. Given Sala and Gobet’s (2016)
solving strategies to turn a set of constraints and desiderata        recent finding that the skill effect with random material
into a correct and running program. Several general theories          generalises to many domains of expertise, the focus will be
have been proposed to account for these abilities. Some               on the recall of randomised programs and the role played by
authors (e.g., Adelson, 1981; McKeithen, Reitman, Rueter              perceptual chunks.
& Hirtle, 1981; Ye & Salvendy, 1994) have proposed that                  The paper is organised as follows. First, we briefly review
semantic knowledge plays an essential role. Others have               research on memory for computer programs. Second, we
proposed that expertise in programming, like in other                 describe a computer simulation using CHREST. Third, we
domains, stems from the acquisition of a large number of              compare the results of the simulations with those obtained
perceptual chunks, which are the building blocks on which             with humans. Finally, we reflect on the impact of our results
later semantic and procedural knowledge is constructed                upon research into expertise.
(e.g., Chase & Simon, 1973; Simon & Gobet, 2000).
   Using a variety of chess-related tasks including a recall
task, Chase and Simon (1973) gathered good evidence for                            Memory for Programs
the psychological reality of perceptual chunks. In addition,          Several studies have been carried out to investigate memory
they found that there was a massive skill effect for the recall       for computer code by individuals of different levels of
of positions taken from Masters’ games, but that this effect          expertise. While some of the studies were also interested in
disappeared with random positions. It was later shown that            cognitive processing differences, this review will focus upon
chess Masters keep a small, but reliable, superiority with            the studies where the recall task has been used—that is, a
random positions (Gobet & Simon, 1996). This result was               brief presentation of material taken from the domain of
actually predicted by CHREST (Chunk Hierarchy and RE-                 expertise, and a subsequent test of memory. In selecting the
trieval STructures), a computer model based on the idea of            studies, we have also used the criterion that the experiment

should compare memory recall ability between expert and        had 8 minutes to recall the code. This procedure was re-
novice programmers, and that some measure of performance       peated for nine trials.
(e.g., percentage of lines correctly recalled) was provided.      Experts recalled more than the novices (see Figure 1).
These criteria resulted in the selection of four studies:      Adelson suggests that the discrepancy between Chase and
Adelson (1981), Barfield (1986), Bateson, Alexander and        Simon’s (1973) chess data and her data comes from the fact
Murphy (1987), and Guerin and Matthews (1990). Important       that the code consists of lines taken from three complete
features in these experiments include the participants’ skill  programs and not of lines randomly selected from 16 dif-
level and the type of stimulus given to them.                  ferent programs.
                                                                  Adelson also looked at the size of chunks used in recall,
Assessing Programming Ability                                  defining a chunk as a sequence of items recalled in succes-
                                                               sion with less than a 10-second pause between them. Ex-
Unlike similar endeavours into chess, there is no standard
                                                               perts’ chunk size was greater than novices’ (on average 3.5
rating scale measuring a computer programmer’s level of
                                                               and 2.4 items, respectively). Based on these and additional
expertise. For the four experiments to be reviewed, each
                                                               results, Adelson concluded that experts organise information
participant’s level of expertise with a particular language
                                                               using functional principles, while novices categorise on a
was determined by their experience with it.1 In general, the   more syntactic (surface) basis.
participants in the novice group had some experience with
the programming language used in the experiment. The ex-
                                                               Barfield (1986). Barfield was interested in being able to
pert group usually consisted of programmers that had com-
                                                               distinguish novice from expert problem solving behaviour
pleted, or lectured on, courses in the language. Some pro-
                                                               and knowledge acquisition, and concentrated on chunking as
grammers were rated as experts because they had experience
                                                               the main process that discriminates individuals of different
in more languages than the target one in the experiment.
                                                               skill levels. He suggested that programmers take in the com-
                                                               plex stimuli as meaningful chunks before they are processed.
Experimental Material                                             Four levels of expertise were used. Naïve participants (n =
For all experiments, the materials were examples of real       42) had not completed any programming courses. Novices
computer code. Each experiment only used one program-          (n = 80) had completed just one course in BASIC. Interme-
ming language to draw its examples from, even if some of       diates (n = 73) had completed a minimum of one BASIC
the participants knew more than one language. But unfortu-     course plus two or three courses in other languages. Experts
nately, there are no two experiments using the same lan-       (n = 26) were graduates in computer science as well as
guage so as to allow direct comparison of results. Indeed,     having at least one course in BASIC.
differences in the languages, experimental designs, and           The material consisted of one 25-line program written in
scoring methods make detailed comparisons awkward. Some        BASIC. The experimenters identified likely modules within
authors (e.g., Guerin & Matthews, 1990) even criticised        the program, but no visible boundaries were marked (i.e. no
other experimenters for their choice of target programming     spaces between lines). The experiment had three conditions:
language.                                                      the stimulus could be presented either (a) in executable
                                                               order, (b) with the order of lines randomised, or (c) with the
Summaries of Experiments                                       order of modules randomised (in that case, the lines within a
                                                               module preserved their order). The participants were
Adelson (1981). This experiment addressed the question of
                                                               allowed three minutes to study the stimulus and four minutes
how experts represent and use programming concepts. It
                                                               to recall it.
tried to show that experts use a hierarchy to organise their
                                                                  The results are summarised in Figure 1. Naïve and novice
information and base its structure upon functional aspects of
                                                               participants obtained the same level of performance
programming. This is opposed to novices who organise in-
                                                               regardless of stimulus type, indicating that little, if any, of
formation based on the program syntax.
                                                               the chunk knowledge possessed by experts is present with
   The experiment used the Polymorphic Programming Lan-
                                                               novices. According to the results, intermediates can chunk
guage (PPL). PPL is a variant of PL/I, which is a combina-
                                                               together lines of code as long as they are in executable
tion of FORTRAN, ALGOL and COBOL (see Schmidt,
                                                               order. As expected, randomising the lines did negatively af-
1986). The novices were five undergraduates who had com-
                                                               fect the performance of the experts, although they still did
pleted a course in PPL, and the experts were five lecturers in
                                                               better than Novices and Naïve participants. The randomising
that language. Sixteen lines of PPL code taken from three
                                                               of modules did not affect the performance of experts and
separate, complete programs were used as stimuli. Each line
                                                               this was taken as support for Barfield’s chunking ex-
of code was presented separately on a screen. Lines were
                                                               planation. However, Guerin and Matthews (1990) argue that
presented in a random order and each line was visible for 20
                                                               Barfield is measuring recall and not comprehension, so even
seconds. After all lines had been presented, the participants
                                                               though the semantic structure of the program is tampered
                                                               with, it will not affect the results because BASIC
1This
                                                               programmers are not as sensitive to the semantic complexity
       is far from being a foolproof method. From research     as programmers using other languages. They also criticise
into other expertise domains, it is known that experience
correlates only imperfectly with expertise (Gobet, 2016).

Barfield for not randomising lines within modules to
complete his experimental design.                                                                               Adelson (1981)
                                                                                                1
                                                                                                                                        Expert
                                                                       Prop. Correct
Bateson, Alexander and Murphy (1987). This paper                                        0.8
aimed to expose expert-novice differences in syntactic and                              0.6                                             Novice
semantic memory, along with tactical and strategic skill. The                           0.4
gist of Bateson’s experiment is to demonstrate the                                      0.2
importance of semantics in gauging programmers’ differ-
                                                                                                0
ences over tasks that use measures of memory and chunk
                                                                                                        *            *        Line         *
size in syntactic recall. We discuss only the first of Bateson
et al.’s battery of tasks, the syntactic memory task.                                                              Stimulus Type
   Two groups were used for this task: novices (n = 20), who
had completed no more than three programming courses,                                                            Barfield (1986)
                                                                                            1
and experts (n = 30), who had completed more than three                                                                                 Expert
                                                                      Prop. Correct
courses. All participants had completed 12 weeks in an                                 0.8
                                                                                                                                        Interm.
introductory FORTRAN class. The material used for the                                  0.6
                                                                                                                                        Novice
experiment was four short programs of equal length written                             0.4
in FORTRAN. Two of the four programs had lines                                                                                          Na•ve
                                                                                       0.2
randomised.
                                                                                            0
   Participants were given only one normal and one random
                                                                                                    Normal       Module       Line          *
program, and were given three minutes to study a program
                                                                                                                   Stimulus Type
and then allowed four minutes of free recall to write down
what they remembered. The means for the proportion of
                                                                                                              Bateson et al. (1987)
total program recall are shown in Figure 1. As with Adelson                                 1
(1981), there is a skill effect even when the order of the lines                                                                        Expert
                                                                    Prop. Correct
                                                                                       0.8
is randomised.                                                                                                                          Novice
                                                                                       0.6
   Guerin and Matthews (1990). This study aims to                                      0.4
demonstrate the role of semantic knowledge in expert                                   0.2
programmer ability. Only the first of their three experiments                               0
is described here. Guerin and Matthews used COBOL as                                                Normal          *          Line         *
their target language, and a genuine 116-line COBOL                                                                Stimulus Type
program was used as material. Two groups were used; the
novices (n = 52) had an average of 0.5 years of                                                             Guerin & Matthews (1990)
programming experience and the experts (n = 52) had an                              100
average of 4.7 years. The participants were given 10 minutes                                                                            Expert
                                                                    Recall scores
                                                                                       80
to study the stimulus and then 8 minutes of free recall. There                                                                          Novice
                                                                                       60
were four conditions: (a) Normal program; (b) Random lines
within program modules; (c) Random modules; and (d)                                    40
Random lines within program modules and random                                         20
modules. A module is described by Guerin and Matthews as                                0
being a chunk of a program; however, they do not go into                                            Normal       Module       Line     Module+Line
detail as to whether they are describing a functional section                                                      Stimulus Type
of a program or an amount of information thought capable
of being memorised in one go. Nor do they specify how
large these modules are.                                           Figure 1. Memory for computer code as a function of level
   Guerin and Matthews used a unique method to score               of expertise and type of randomisation. Adelson (1981) and
recall trials. Instead of counting correctly recalled items, a        Barfield (1986) used the number of lines correct, and
system of points based on positional and lexical accuracy           Bateson et al. (1987) used the number of items correct (to
was devised in order to better describe recall performance.          facilitate comparison, we have converted these absolute
For each line, one point was earned if more than half of the         numbers into proportion correct). Guerin and Matthews
components of the line were recalled correctly; an additional                (1990) devised their own scoring method.
point was added if it was recalled in the correct sequence in
the program, and a final point was added if it was recalled
exactly as the original. Thus, a maximum of three points             In all four conditions, experts were better than novices.
could be earned for each line.                                     The ordering of the conditions was as follows: Normal >
                                                                   Random modules > Random lines within program modules
                                                                   > Random Lines and Modules (see Figure 1). Finally,
                                                                   Guerin and Matthews found that recall correlated highly

with comprehension, which was measured by having partici-         Table 1 shows the key time parameters used with
pants write a summary of the purpose of the program and        CHREST. These parameters are taken from previous work
how this purpose was achieved. The authors conclude that       (Feigenbaum & Simon, 1984; De Groot & Gobet, 1996;
the superior semantic knowledge and comprehension skills       Gobet & Simon, 2000) and are important in that they impose
of experts that allowed them to obtain better performance      stringent constraints on how much information processing
than novices could not be used when the lines of the           can be performed both during the training phase and during
program were randomised.                                       the presentation of the stimulus in the test phase. Note that
                                                               creating an LTM chunk, adding a new link to a chunk, or
Summary. Several phenomena clearly stand out from these        familiarising a chunk occurs in parallel with the other
experiments. First, as expected, experts always do better      operations.
than non-experts with executable code. Second, there is a         CHREST incorporates mechanisms for incrementally
robust correlation between recall and comprehension. Third,    creating schemas (known as templates in the theory), al-
some evidence has been uncovered that experts have larger      lowing information to be rapidly encoded in slots (Gobet &
chunks than novices. Finally, the expertise effect is also     Simon, 2000). In this paper, we are primarily interested in
present when the code has been scrambled in various ways.      how far perceptual chunks can account for skill effect in the
In the remainder of this article, we describe simulations with recall of scrambled programs. Therefore, we did not use
CHREST showing that this cognitive architecture captures       templates in the simulations.
the skill effect with randomised computer programs.
                                                               Table 1: Main time parameters used in CHREST
         The CHREST Architecture
                                                               Cognitive operation                            Duration
As mentioned above, the chunking theory has often been
proposed, in its informal form, as an explanation of the skill
effect found in memory tasks for computer programs. In the     creating an LTM chunk                          8s
remainder of the paper, we wish to explore to what extent a
computational implementation of the theory, which              familiarising an LTM chunk                     2s
emphasises perceptual chunking, can account for the em-
pirical data we have just reviewed.                            placing a chunk into STM                       50 ms
   CHREST (Chunk Hierarchy and REtrieval STructures; De
Groot & Gobet, 1996; Gobet, 1993; Gobet & Lane, 2005;          comparing two chunks                           50 ms
Gobet & Simon, 2000) is an expansion of the EPAM
(Elementary Perceiver And Memorizer) cognitive                 carrying out a test in the discrimination net 10 ms
architecture (Feigenbaum & Simon, 1984; Richman,
Staszewski & Simon 1995). At the core of EPAM and
CHREST lie mechanisms for encoding chunks into long-                                  Simulations
term memory (LTM) through the construction of a
                                                               For training and testing the model, a large collection of data
discrimination net and mechanisms for handling information
                                                               was gathered from a variety of sources. Using the internet
in short-term memory (STM). Together, EPAM and
                                                               and some reference books, a corpus of about one hundred
CHREST have been used to account for domains such as
                                                               different FORTRAN programs was built.
verbal behaviour, chess memory, expert digit-span memory,
use of multiple representations in physics, letter perception,
spelling and acquisition of language (see Gobet et al., 2001,  Training Phase
Gobet & Lane, 2005, for reviews).                              During training, CHREST is given programs in
   CHREST consists of the following components:                FORTRAN—a naturalistic material—as input so that the
discrimination network, semantic LTM, and STM. STM,            vocabulary of the language as well as some sequences of
which consists of at most four chunks, is mostly a queue       items can be learnt. The lines of code had a mean length of 7
(first-in, first out). However, the largest chunk met at any   words. Elements (e.g. numbers, punctuation and other
point in time (the hypothesis), is kept in STM until a larger  special characters) are recognised as distinct, individual
chunk is met or constructed (see Gobet & Simon, 2000).         items by the model. This type of input allows the model to
   The net is grown by two EPAM-like learning mechanisms,      build a discrimination net that encodes both the primitive
familiarisation and discrimination. When a new object is       items and legal strings from the computer language.
presented to the model, it is sorted through the                  The same basic model is used to simulate different levels
discrimination net. When a node is reached, the object is      of ability; that is, only the amount of input is varied, and no
compared with the image of the node, which is its internal     other mechanisms or parameters are altered. This study will
representation. If the image under-represents the object, new  focus on the difference between novices and experts, who
features are added to the image (familiarisation). If the      are simulated by passing CHREST either one program or a
information in the image and the object differ on some         corpus of eighty-eight programs during training (these
feature or some sub-element, a new node is created             numbers were chosen arbitrarily).
(discrimination).

   As each item is passed to CHREST, the model constructs       crimination operation. Typically, a new test is added to the
its discrimination net. The net initially starts with an empty  hypothesis. Second, for chunks that have been in STM for at
root node. Primitive items are usually the first to be added to least 8 seconds, a new branch is added to access them by a
the net. Then, after a period of learning, the images at the    novel path; this essentially means that episodic cues that
nodes will come to represent sequences of items.                permit access to this node are added to the discrimination
                                                                net (Gobet & Simon, 2000). Such nodes can be recalled
Test phase                                                      during the reconstruction phase even if they are no longer in
                                                                STM.
Once the appropriate training had been undertaken (study of
                                                                   During the recall phase, CHREST could output the
one program for novices and eighty-eight for experts), the
                                                                information held in STM and in the nodes that had been
novice and expert level models were tested using twelve new
                                                                created or for which new access links had been created.
FORTRAN programs that were not included in the training
                                                                Recall was scored in the following way. A list of items that
set. Test programs were selected that did not include too
                                                                CHREST had recalled, in the order they were retrieved, was
many “print” statements and so that they were all of roughly
                                                                collected from the model. This recall list was matched
the same number of lines and words. The simulations were
                                                                alongside the original stimulus that was presented to
run like an experiment with human participants, with a
                                                                CHREST. The first line in the stimulus was compared to the
presentation time of five seconds per line. Various levels of
                                                                recall list and if the first items matched, then the lines were
randomisation were applied to the test programs before they
                                                                compared to find out how many of the items were recalled
were passed to the models. In addition to the conditions used
                                                                correctly before a mismatch occurred; both lines were then
in the studies reviewed above, we also thought it interesting
                                                                discarded and the next stimulus line compared to the recall.
to use a condition in which all elements of a program were
                                                                If the stimulus line did not match the recall line, then the line
randomised. There were therefore five conditions in total:
                                                                was discarded and the next one matched against the recall
                                                                list, until all the stimulus lines were used. Not only does this
1. Normal. The sequence of the program is unaltered.
                                                                method show how many items were recalled correctly, but it
2. Random Modules. Segments of the program are
                                                                shows how many errors of commission the model made.
randomised, but the line order within a segment is retained.
3. Random Lines. The lines of the program are ran-
domised. Information within a line is unaltered.                Results
4. Modules and Lines. Both modules and lines within             Figure 2 illustrates the results of the simulations. We can see
modules are randomised.                                         that for all cases, CHREST predicts a skill effect. These
5. All Random. All elements within a program are                predictions are borne out by the data, with the exception of
randomised, yielding a total randomisation.                     Guerin and Matthews’ (1990) Module+Line condition,
                                                                where no effect was found with the human participants.
                                                                None of the studies reviewed incorporated the All condition,
To create the Random Modules, lines of code that acted as a     where the order of all elements of the code is randomised.
meaningful unit of instruction were grouped. For example,       Although the difference between the Novice and Expert
lines belonging to declaration statements would be retained     models is small for the All condition, it is statistically
together as a module. For the All Random condition, the         reliable (t(78) = 3.71, p < .001). To test this counter-
maximum and minimum line lengths of the original program        intuitive prediction of the model, we collected data with C
were first noted; then, all the elements in the program were    programmers (n = 9) and novices (n = 9); the results have
randomised and lines of random length were constructed,         supported the prediction. Given that we found a skill effect
with the condition that the values fell between the original    with full randomisation, it is unclear why no such effect was
lengths.                                                        found with Guerin and Matthews’ Module+Line condition,
   Each model received two “practice” problems which were       which destroys less structure than our method.
always the same. The first practice program was a Normal           While the simulations show a differential effect for the
type and the second was an All Random type. The test pro-       type of randomisation, this effect is limited to the All
grams were then presented. In addition to the practice prob-    conditions vs. the other conditions. The model fails to
lems, each model received two examples of each condition,       capture the differential recall shown by humans from the
thus making a total of 12 test programs. To control for ran-    Normal condition to the Module+Line conditions. It is likely
dom variation due to the order of programs in the learning      that humans pick up semantic information from the modules,
set, CHREST was run with 40 simulations per skill level.        as proposed for example by Adelson (1981), which are
The random order in which the programs appeared, the ran-       beyond the essentially perceptual knowledge that this
dom order of the conditions and the randomisation of pro-       simplified version of CHREST can store.
grams were all reset for each simulation.
   For each program, CHREST read the program line by
line, storing recognised chunks into STM, and, when                                     Conclusion
applicable, using the following learning mechanisms. First,        The experimental studies reviewed in this paper clearly
as described before, CHREST can add a chunk as a test to        show that randomisation of aspects of computer code affects
another chunk. It takes 8 seconds to carry out this dis-        recall, while still preserving a skill effect in most cases. In

                                                                          expert computer programmers. International Journal of
                                         CHREST                           Man-Machine Studies, 26, 649-660.
                      1
                                                              Expert    Chase, W. G., & Simon, H. A. (1973). Perception in chess.
     Prop. Correct
                     0.8
                                                              Novice      Cognitive Psychology, 4, 55-81.
                     0.6                                                de Groot, A. D., & Gobet, F. (1996). Perception and
                     0.4
                                                                          memory in chess. Assen: Van Gorcum.
                                                                        Feigenbaum, E. A., & Simon, H. A. (1984). EPAM-like
                     0.2
                                                                          models of recognition and learning. Cognitive Science, 8,
                      0
                                                                          305-336.
                           Normal   Module   Line   Module+Line   All
                                                                        Gobet, F. (1993). A computer model of chess memory.
                                        Stimulus Type                     Proceedings of 15th Annual Meeting of the Cognitive
                                                                          Science Society, (pp. 463-468). Hillsdale, NJ: Erlbaum.
   Figure 2. CHREST’s memory for computer code as a                     Gobet, F. (2016). Understanding expertise: A multi-
         function of level of expertise and type of                       disciplinary approach. London: Palgrave.
                       randomisation.                                   Gobet, F., & Lane, P. C. R. (2005). The CHREST
                                                                          architecture of cognition: Listening to empirical data. In
order to account for these data, we have described a                      D. Davis (Ed.), Visions of mind (pp. 204-224). Hershey,
simplified version of the CHREST simulation model, where                  PA: IPS.
emphasis was given to perceptual chunking. We have shown                Gobet, F., Lane, P.C.R., Croker, S., Cheng, P.C-H., Jones,
that the model accounts for the skill differences with                    G., Oliver, I., & Pine, J. (2001). Chunking mechanisms in
scrambled programs, which supports Simon and Gobet’s                      human learning. TRENDS in Cognitive Sciences, 5, 236-
(2000) contention that theories based on chunking                         243
mechanisms can account for skill effects in memory for                  Gobet, F., & Simon, H. A. (1996). Templates in chess
computer programs. However, the model did not show                        memory: A mechanism for recalling several boards.
differences between the randomisation conditions, as                      Cognitive Psychology, 31, 1-40.
humans did. In this respect, the results differ to those                Gobet, F. & Simon, H. A. (2000). Five seconds or sixty?
obtained with chess, where it has been shown that CHREST                  Presentation time in expert memory. Cognitive Science,
is able to successfully capture recall differences with chess             24, 651-682.
positions that were randomised in different ways (Gobet &               Gobet, F., & Waters, A. J. (2003). The role of constraints in
Waters, 2003). A difference between the simulations in the                expert memory. Journal of Experimental Psychology:
two domains is that CHREST used templates with chess, but                 Learning, Memory & Cognition, 29, 1082-1094.
not with computer programs.                                             Guerin, B., & Matthews, A. (1990). The effects of semantic
  The presence of a skill effect even with randomised                     complexity on expert and novice computer program recall
material has been demonstrated not only in chess and                      and comprehension. The Journal of General Psychology,
computer programming, but also in nearly all domains of                   117, 379-389.
expertise where this has been studied (Sala & Gobet, 2016).             McKeithen, K. B., Reitman, J. S., Rueter, H. H., & Hirtle, S.
This finding strongly suggests that theories of expertise                 C. (1981). Knowledge organisation and skill differences
cannot only propose high-level and holistic mechanisms, but               in computer programs. Cognitive Psychology, 13, 307-
must also include some low-level mechanisms such as                       325.
chunking to account for the empirical data. In this respect,            Richman, H. B., Staszewski, J., & Simon, H. A. (1995).
CHREST is obviously on the right track. Further work will                 Simulation of expert memory with EPAM IV.
establish whether the presence of templates (Gobet &                      Psychological Review, 102, 305-330.
Simon, 2000) can help the model capture the differential                Sala, G., & Gobet, F. (2016). Experts’ memory superiority
recall of different types of scrambled programs, which is                 for domain-specific random material generalises across
often claimed to tap into differences in high-level, semantic             fields of expertise: A meta-analysis. Manuscript submitted
knowledge (e.g., Adelson, 1981).                                          for publication.
                                                                        Schmidt, A. L. (1986). Effects of experience and compre-
                                    References                            hension on reading time and memory for computer pro-
                                                                          grams. International Journal of Man-Machine Studies,
Adelson, B. (1981). Problem solving and the development
                                                                          25, 399-409.
  of abstract categories in programming languages. Memory
                                                                        Simon, H. A. & Gobet, F. (2000). Expertise effects in
  and Cognition, 9, 422-433.
                                                                          memory recall: A reply to Vicente and Wang.
Barfield, W. (1986). Expert-novice differences for software:
                                                                          Psychological Review, 107, 593-600.
  Implications for problem-solving and knowledge
                                                                        Ye, N., & Salvendy, G. (1994). Quantitative and qualitative
  acquisition. Behaviour and Information Technology, 5,
                                                                          differences between experts and novices in chunking
  15-29.
                                                                          computer software knowledge. International Journal of
Bateson, A. G., Alexander, R. A., & Murphy, M. D. (1987).
                                                                          Human-Computer Interaction, 6, 105-118.
  Cognitive processing differences between novice and

