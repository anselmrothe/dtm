UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
A General Purpose Architecture for Building Spiking Neuron Models of Biological Cognition

Permalink
https://escholarship.org/uc/item/7d9319vk

Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 35(35)

Authors
Eliasmith, Chris
Stewart, Terrence

Publication Date
2013-01-01
Peer reviewed

eScholarship.org

Powered by the California Digital Library
University of California

A General Purpose Architecture for Building
Spiking Neuron Models of Biological Cognition
Chris Eliasmith (celiasmith@uwaterloo.ca)
Terrence C. Stewart (tcstewar@uwaterloo.ca)
Center for Theoretical Neuroscience, University of Waterloo
200 University Ave West, Waterloo, ON, N2L 3G1, Canada
Keywords: SPAUN, cognitive modeling; neural engineering;
representation; decision making; working memory; cognitive
architecture; cognitive control; semantic pointers

class Rules:
def read_action(category='ACTION'):
set(action=vision*2)
def read_object(category='OBJECT'):
set(object=vision*2)
def do_write(vision='DONE',
phrase='ACTION*WRITE', scale=0.5):
set(motor=phrase*'~OBJECT')
def do_write_remembered(vision='DONE',
phrase='ACTION*WRITE+OBJECT*NUMBER'):
set(motor=memory)
def do_remember(vision='DONE',
phrase='ACTION*REMEMBER', scale=0.5):
set(memory=phrase*'~OBJECT')

Tutorial Objectives
We have recently created the world's largest biologically
realistic brain model that is capable of performing tasks
(Eliasmith et al., 2012). This model uses 2.5 million spiking
neurons, takes visual input from a 28x28 pixel visual field,
and controls a physically modelled arm. By presenting
different visual inputs, the model can perform eight
different tasks, including memorizing and writing a list of
numbers, single-digit addition via counting, and flexible
pattern completion in the Raven's Matrices task. This
tutorial is meant to introduce the software toolkit and
theoretical background that would allow other researchers to
build their own models using the same architecture,
allowing them to explore other tasks and brain functions.
This tool supports a novel cognitive architecture (SPA; the
Semantic Pointer Architecture) that directly connects
neuroscience with cognitive science.
Our previous tutorials have focused on the underlying
theory of the Neural Engineering Framework (NEF;
Eliasmith and Anderson, 2003), a general method for
implementing high-level cognitive theories using
biologically realistic spiking neurons. In this tutorial, our
emphasis will be on building large-scale models with our
open-source toolkit Nengo (<http://nengo.ca>). The tutorial
will be the first presentation of our Semantic Pointer
Architecture, a Python module for Nengo which takes a
high-level description of the desired cognitive system,
including (basic) visual processing, motor control, working
memory, associative memory, and cognitive control. The
software takes this specification and creates a biologically
realistic neural model, including various cortical areas, the
basal ganglia, and the thalamus.
An example model using the SPA is shown in Figure 1. It
is able to follow basic commands such as “WRITE TWO”
and “REMEMBER THREE <long pause> WRITE
NUMBER”. When run in Nengo, this creates a model with
48,000 spiking neurons and produces predictions of spike
patterns, firing rates, fMRI time-courses, accuracy, and
reaction times. Complete details can be found in the book
How to Build a Brain (Eliasmith, 2013).
Participants will leave the tutorial having interactively
used a method for constructing cognitive models with
spiking neurons, and experience using that method in an
intuitive software environment.

class Parser(SPA):
vision = Vision()
category = Buffer(feedback=0)
action = Buffer(feedback=0)
object = Buffer(feedback=0)
actionC = Cleanup(mutual_inhibit=0.5)
objectC = Cleanup(mutual_inhibit=0.5)
phrase = Buffer(feedback=0)
motor = Motor()
memory = Buffer(pstc_feedback=0.1)
flow = Flow("""
action->actionC
object->objectC
actionC*1.1->action
objectC*1.1->object
action*ACTION->phrase
object*OBJECT->phrase
vision.WRITE->category.ACTION
vision.REMEMBER->category.ACTION
vision.ONE->category.OBJECT
vision.TWO->category.OBJECT
vision.THREE->category.OBJECT
vision.NUMBER->category.OBJECT
""")
BG=BasalGanglia(Rules())
thal=Thalamus(BG)

Figure 1: A script (top) to generate a model with 48,000
spiking neurons (bottom left) capable of simple cognitive
behaviour (bottom right)

39

Given that understanding the SPA cognitive architecture
requires a basic understanding of the Neural Engineering
Framework, we feel that a full-day tutorial is required. The
NEF provides an exciting new tool for cognitive science, as
it provides a technique for producing direct neural
predictions from cognitive theory. It is also general enough
that the same framework can be used for category learning,
memory research, linguistic processing, vision, and motor
control research. Furthermore, components from existing
cognitive architectures (such as ACT-R) can be directly
interfaced to these neural models.

Tutorial Structure
This full-day tutorial starts with a quick overview of the
theory behind the Neural Engineering Framework, showing
how we can specify models by solving for the synaptic
connection weights between groups of neurons that cause
particular computations to be approximated. By specifying
what each neural group represents and what computations
should be computed between neural groups, large-scale
neural models can be created. This is paired with many
hands-on example of applying these concepts using the
Nengo software. Neural groups and connections can be
created using a drag-and-drop interface, or using the Python
scripting interface. Participants are expected to bring a
laptop to follow along with these tutorials (Windows, OS X,
and Linux are all supported, and software is provided).
The first half of the tutorial covers the basic principles of
the NEF and using Nengo. The second half introduces the
concept of semantic pointers (vectors that combine the
benefits of semantic similarity measures with the
compositionality of symbol structures). We show how this
method provides a unified approach to many types of
cognitive models, including perceptual processing, symbolic
reasoning, and motor control models. In particular, we
show how these representations can be used to bind and
manipulate symbol-like structures.
In this second half of the tutorial, we introduce our
semantic pointer architecture and its implementation within
Nengo. This provides a scripting language for building
cognitive models, allowing researchers to create models of
different brain areas and connect them together via the
cognitive control of a cortex-basal ganglia-thalamus loop.
This system is a general-purpose, biologically constrained,
and neurally plausible cognitive architecture implemented
using spiking neurons, and is the core foundation of our
large-scale brain simulation.
Variants of this tutorial without the SPA cognitive
architecture were presented at ICCM 2009, CogSci 2010,
Telluride 2011, CogSci 2011, and CogSci 2012.

Audience
Participants are not expected to have any previous
experience with neural modeling. All participants are
encouraged to bring a laptop for installing Nengo (Linux,
OS X, and Windows versions are provided), allowing for
hands-on interactions with the models discussed.

Presenters
Chris Eliasmith holds a Canada Research Chair in
Theoretical Neuroscience, and is director of the Centre for
Theoretical Neuroscience at the University of Waterloo.
His recent book, How to Build a Brain, and his earlier book,
Neural Engineering, form the basis for this tutorial.
Terry Stewart is a research associate in the Centre for
Theoretical Neuroscience. He developed the SPA module
and has used it to create a variety of cognitive models.

References
Choo, F., & Eliasmith, C. (2010). A Spiking Neuron Model
of Serial-Order Recall. 32nd Annual Conference of the
Cognitive Science Society.
Eliasmith, C. (2005). Cognition with neurons: A large-scale,
biologically realistic model of the Wason task. 27th
Annual Meeting of the Cognitive Science Society.
Eliasmith, C. (2013). How to build a brain: A neural
architecture for biological cognition. New York, NY:
Oxford University Press.
Eliasmith, C., & Anderson, C. (2003). Neural Engineering:
Computation, Representation, and Dynamics in
Neurobiological Systems. Cambridge: MIT Press.
Eliasmith, C., Stewart T.C., Choo X., Bekolay T., DeWolf
T., Tang Y., & Rasmussen, D. (2012). A large-scale model
of the functioning brain. Science. 338(6111), 1202-1205.
Rasmussen, D., & Eliasmith, C. (2010). A neural model of
rule generation in inductive reasoning. 32nd Annual
Conference of the Cognitive Science Society.
Stewart, T.C., & Eliasmith, C. (2011). Neural Cognitive
Modelling: A Biologically Constrained Spiking Neuron
Model of the Tower of Hanoi Task. 33rd Annual
Conference of the Cognitive Science Society.
Stewart, T.C., Choo, X., & Eliasmith, C. (2010). Dynamic
Behaviour of a Spiking Model of Action Selection in the
Basal Ganglia. 10th Int. Conf. on Cognitive Modeling.

Tutorial Justification
The Neural Engineering Framework provides a method to
bridge the gap between cognitive and neural theories. It has
been used to build special-case models of serial-order recall
(Choo & Eliasmith, 2010), action selection in the basal
ganglia (Stewart, Choo, & Eliasmith, 2010), the Wason card
task (Eliasmith, 2005), the Tower of Hanoi task (Stewart &
Eliasmith, 2011), and inductive rule generation (Rasmussen
& Eliasmith, 2010).
By combining these models with a general method for
cognitive control (the cortex-basal ganglia-thalamus loop),
we have created the beginnings of a novel biologically
realistic cognitive architecture. Our tools allow researchers
to quickly create large-scale brain models that combine
novel models of particular brain areas with existing models
of many other areas. We believe this is a powerful new tool
for understanding cognition.

40

