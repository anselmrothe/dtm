UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Analogy and Arithmetics: An HDTP-Based Model of the Calculation Circular Staircase

Permalink
https://escholarship.org/uc/item/8368v5qv

Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 35(35)

Authors
Besold, Tarek Richard
Pease, Alison
Schmidt, Martin

Publication Date
2013-01-01
Peer reviewed

eScholarship.org

Powered by the California Digital Library
University of California

Analogy and Arithmetic:
An HDTP-Based Model of the Calculation Circular Staircase
Tarek R. Besold (tbesold@uos.de) and Martin Schmidt (martisch@uos.de)
Institute of Cognitive Science, University of Osnabrück, 49069 Osnabrück, Germany

Alison Pease (a.pease@ed.ac.uk)
School of Informatics, University of Edinburgh, Edinburgh, EH8 9AB, UK
Abstract
Analogical reasoning and its applications are gaining attention
not only in cognitive science but also in the context of education and teaching. In this paper we provide a short analysis and
a detailed formal model (based on the Heuristic-Driven Theory Projection framework for computational analogy-making)
of the Calculation Circular Staircase, a tool for teaching basic
arithmetic and insights based on the ordinal number conception of the natural numbers to children in their first years of
primary school. We argue that such formal methods and computational accounts of analogy-making can be used to gain additional insights in the inner workings of analogy-based educational methods and tools.
Keywords: Analogy, Education, Teaching, Arithmetic, Formal Model, Computational Analogy-Making, HDTP.

primary school (Schwank, 2003; Schwank, Aring, & Blocksdorf, 2005), before showing how a computational analogymaking framework as Heuristic-Driven Theory Projection
(HDTP) (Schwering, Krumnack, Kühnberger, & Gust, 2009)
can be used to provide a formal computational reconstruction of the staircase as a prototypical example of analogy-use
taken from a real-life teaching situation. We thereby also continue the work started in (Besold, 2013) with a far more complex and deep-rooted case study. By doing so, we aim to show
one way (amongst several) of how analogy-engines and their
corresponding background theories can fruitfully be applied
to modeling and analysis tasks from the field of psychology
of learning, education, and didactics.

Introduction

Heuristic-Driven Theory Projection (HDTP)

Analogical reasoning is the ability to perceive, and operate
on, dissimilar domains as similar with respect to certain aspects based on shared commonalities in relational structure or
appearance. This has been proposed as an essential aspect of
the ability to learn abstract concepts or procedures (Gentner,
Holyoak, & Kokinov, 2001), and is recognised as ubiquitous
in human reasoning and problem solving (Gentner, 1983),
representational transfer (Novick, 1988), and adaptation to
novel contexts (Holyoak & Thagard, 1995).
Inherent in the structure of analogical reasoning is its role
in education and learning: new ideas can be constructed and
explored in relation to familiar concepts. While substantial
research has been carried out into the role of analogical reasoning and science education (see, for instance, (Duit, 1991;
Arnold & Millar, 1996; Guerra-Ramos, 2011)), its role in
mathematics education has been somewhat less explored –
although notable exceptions include (Pimm, 1981; English,
1997). These studies support our assumption that analogies
can be used for facilitating the understanding of concepts and
procedures in abstract and formal domains, such as mathematics, physics or science. The pedagogical use of analogies
as a means of triggering, framing and guiding creative insight
processes still needs to be widely recognised as part of teaching expertise and incorporated into innovative teacher education schemes (Akgul, 2006).
In this paper, we want to contribute to a deeper understanding of the role and the mode of operation of analogy
in an educational context by first providing a description
and short analysis of the analogy-based Calculation Circular Staircase used for teaching basic arithmetic to children
attending their initial mathematics classes at the beginning of

There is much work on both theoretical and computational
models of analogy-making. Heuristic-Driven Theory Projection (HDTP) (Schwering et al., 2009) is one such perspective:
this is a formal theory and corresponding software implementation, conceived as a mathematically sound framework for
analogy-making. HDTP has been created for computing analogical relations and inferences for domains which are given
in the form of a many-sorted first-order logic representation.
Source and target of the analogy-making process are defined
in terms of axiomatizations, i.e., given by a finite set of formulae. HDTP tries to produce a generalization of both domains by aligning pairs of formulae from the two domains by
means of anti-unification: Anti-unification tries to solve the
problem of generalizing terms in a meaningful way, yielding for each term an anti-instance, in which distinct subterms
have been replaced by variables (which in turn would allow
for a retrieval of the original terms by a substitution of the
variables by appropriate subterms).
HDTP in its present version uses a restricted form of
higher-order anti-unification. In higher-order anti-unification,
classical first-order terms are extended by the introduction of
variables which may take arguments (where classical firstorder variables correspond to variables with arity 0), making
a term either a first-order or a higher-order term. Then, antiunification can be applied analogously to the original firstorder case, yielding a generalization subsuming the specific
terms. The class of substitutions which are applicable in
HDTP is restricted to (compositions of) the following four
cases: renamings (replacing a variable by another variable of
the same argument structure), fixations (replacing a variable
by a function symbol of the same argument structure), ar-

1893

better-known base domain into a less familiar target domain.
This mapping is typically established by a pairwise matching
of individual elements from the respective domains, resulting in a set of systematic correspondences. In the context of
mathematics education and mathematical reasoning, children
are required to understand abstract relations and operations
(such as equality, addition, and subtraction) which can best
be taught by drawing parallels between similar examples in
less abstract domains (Clement, 1993). Still, the availability
of supportive cues for the analogy is crucial for the success of
the learning process (Glynn, Duit, & Thiele, 1995).

Figure 1: The “big” Calculation Circular Staircase (as depicted in (Schwank et al., 2005)): Numbers from 1 to 9 are
represented by orange balls in the inner circle, numbers from
10 to 19 by green and orange balls in the outer one, the white
door on the right marks the transition point between circles.
gument insertions, and permutations (an operation rearranging the arguments of a term). This formalism has proven
capable of detecting structural commonalities not accessible
to first-order anti-unification, as for instance also structural
commonalities between functions and predicates within the
logical language can be found and exploited (whilst the firstorder formalism would in these be limited to the respective
argument positions only), allowing for a better recognition of
relational mappings (as opposed to mere attribute mappings).
Once the generalization has been computed, the alignments
of formulae together with the respective generalizations can
be read as proposals of analogical relations between source
and target domain, and can be used for guiding an analogybased process of transferring knowledge between both domains. Analogical transfer results in structure enrichment on
the target side, which corresponds to the addition of new axioms to the target theory, but may also involve the addition of
new first-order symbols.

The Calculation Circular Staircase
Dedekind (Dedekind, 1887/1969) argued that ordinal numbers and insights into the basic structure of the natural numbers play a crucial role in understanding (and thus also teaching) the foundations of arithmetic. About a century later,
studies by Brainerd (Brainerd, 1979) also showed that a
deeper understanding of the ordinals supports and facilitates
the learning of basic arithmetic operations in children. Based
on this line of thought, the Calculation Circular Staircase
(Schwank, 2003; Schwank et al., 2005) has been developed.

A Teaching Tool for Basic Arithmetic
Learning by analogy requires conceiving of and performing a
transfer mapping of concepts and relational structures from a

The Calculation Circular Staircase (cf. Fig. 1) offers children a means of developing an understanding of the interpretation of numbers as results of transformation operations.
This goal shall be achieved by enabling a mental functional
motor skill-based way of accessing the foundational construction principles of the number space and the corresponding
basic arithmetic operations: The numbers from 0 to 9 are
represented in the inner circle by a corresponding number of
orange balls, numbers from 10 to 19 are represented in the
outer circle at the respective places (corresponding to the inner circle’s ordering) by 10 green balls and a corresponding
number of orange ones. A little door indicates the point of
transition between circles. Arithmetic operations are introduced via “magical” signs (showing “+” or “-”) carried by
toy figures. When equipped with the respective sign, a toy
figure can perform jumps on the staircase – before moving,
a decision for a sign has to be taken (involving the child in
a responsible and motor active way instead of assigning the
role of a passive spectator). Addition corresponds to an ascending movement, subtraction to a movement in descending
direction. This enables children to experience subtraction as
a proper inverse operation to addition, arising naturally from
the “wish” of a toy figure to also descend the staircase.
Decimal structure-based analogies between different computations (e.g. between “5 − 4 = 1” and “15 − 4 = 11”) are
made accessible to children’s understanding via synchronous
movements of two toy figures in the inner and outer circle,
respectively: The 10 green balls in the outer circle stay constant, with respect to the orange balls identical movements
yield identical results. The door between the circles provides
children with a natural “resting point” for simplifying difficult
computations involving a decimal transition: If e.g. 13 − 5
shall be computed, the toy figure (carrying the “-” sign) first
moves to the column representing the number 10 (being the
only column in the outer circle not containing an orange ball
and being directly next to the door, naturally corresponding
to the 0-column in the inner circle), losing as many orange
balls in height as were initially situated below the figure. The
remaining height difference of 2 is now accounted for in a
second step, thus transforming the original task into the easy
to handle 10 − 2 and making the decimal transition attractive for the children. Also, the number 0 obtains a natural
position in the number system of the Calculation Circular
Staircase, simply corresponding to the result of performing

1894

another step down from the first stair. Having the caesura between the two circles after the representation of the number
9 becomes meaningful to the children once they write down
the corresponding numbers, there also encountering a significant difference between the initial one-digit numbers and the
two-digit numbers starting with 10.
At the level of cognitive analysis, the idea underlying
the Calculation Circular Staircase is an active recruitment
of the “functional thinking” approach to mathematics (cf.,
e.g., (Schwank, Gelfman, & Nardi, 1999)). As opposed to
a “predicative thinking”-style understanding of relationships
within mathematics, which uses equality as ordering principle when conceptualizing mathematical structures (i.e., mathematics being conceptualized on the basis of the repeated applicability of certain predicates), the “functional thinking”
perspective bases its conceptualizations on differences between mathematical concepts which can then be used to conceive of a construction process for the respective class of
structures (i.e., mathematics being conceptualized on the basis of repeated constructive steps). In their interaction with
the Calculation Circular Staircase, the children are naturally
led into taking the “functional thinking” approach across repeated stages of play, each time actively becoming aware of
the individual steps a toy figure has to take when changing
from one position on the staircase to another one. Instead
of post hoc merely checking whether a certain distance has
been covered between the initial step and the final one (i.e.,
whether a predicate indicating a certain value for the difference between both steps holds), they experience an active
construction process explicating the guided transition from
the initial step to the final one.

Sorts:
steps, sign, circle, caesura, direction, time, natural.
Entities:
one, two, three, . . . , nineteen, zero, Sa , Sb , Sc , Sd : steps.
+, − : sign.
up, down, D1 : direction.
door, C1 : caesura.
T1 , T2 : time.
inner, outer, Ci1 : circle.
Functions:
height : steps → natural.
interpretation : sign → direction.
dist : direction × steps × steps → direction × natural.
magn : direction × natural → natural.
diff : direction × steps × steps → natural.
Predicates:
succ : steps × steps.
higher : steps × steps.
lower : steps × steps.
inCircle : circle × steps.
base : steps.
inFocus : steps × time.
currentSign : sign × time.
between : caesura × steps × steps.
move : steps × natural × direction × time.
analogs : steps × steps.
Facts:
(s1 ) succ(zero, one).
(s2 ) succ(one, two).
...
(s19 ) succ(eighteen, nineteen).
(s20 ) inCircle(inner, zero).
(s21 ) inCircle(inner, one).
...
(s29 ) inCircle(inner, nine).
(s30 ) inCircle(outer, ten).
...
(s39 ) inCircle(outer, nineteen).
(s40 ) between(door, nine, ten).
Laws:
(s41 ) interpretation(+) = up.
(s42 ) interpretation(−) = down.
(s43 ) interpretation(+) 6= interpretation(−).
(s44 ) higher(Sa , Sb ) ↔ succ(Sb , Sa ) ∨ ∃Sc : (succ(Sb , Sc ) ∧ higher(Sa , Sc )).
(s45 ) higher(Sa , Sb ) ↔ lower(Sb , Sa ).
(s46 ) T1 < T2 : inFocus(Sa , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sa , 1, interpretation(+), T1 ) ∧ succ(Sa , Sb ) → inFocus(Sb , T2 ) ∧
dist(interpretation(+), Sa , Sb ) = (interpretation(+), 1).
(s47 ) T1 < T2 , ∀n ∈ N, n > 1 : inFocus(Sa , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sa , n, interpretation(+), T1 ) ∧ succ(Sa , Sb ) → inFocus(Sb , T2 ) ∧
currentSign(+, T2 ) ∧ move(Sb , n − 1, interpretation(+), T2 ) ∧
dist(interpretation(+), Sa , Sb ) = (interpretation(+), 1).
(s48 ) T1 < T2 : inFocus(Sa , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sa , 1, interpretation(−), T1 ) ∧ succ(Sb , Sa ) → inFocus(Sb , T2 ) ∧
dist(interpretation(−), Sa , Sb ) = (interpretation(−), 1).
(s49 ) T1 < T2 , ∀n ∈ N, n > 1 : inFocus(Sa , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sa , n, interpretation(−), T1 ) ∧ succ(Sb , Sa ) → inFocus(Sb , T2 ) ∧
currentSign(−, T2 ) ∧ move(Sb , n − 1, interpretation(−), T2 ).
(s50 ) lower(Sa , Sb ), T1 < T2 , ∀n ∈ N : dist(interpretation(+), Sa , Sb ) =
(interpretation(+), n) ∧ inFocus(Sb , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sb , 1, interpretation(+), T1 ) ∧ succ(Sb , Sc ) → inFocus(Sc , T2 ) ∧
dist(interpretation(+), Sa , Sc ) = (interpretation(+), n + 1).
(s51 ) higher(Sa , Sb ), T1 < T2 , ∀n ∈ N : dist(interpretation(−), Sa , Sb ) =
(interpretation(−), n) ∧ inFocus(Sb , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sb , 1, interpretation(−), T1 ) ∧ succ(Sc , Sb ) → inFocus(Sc , T2 ) ∧
dist(interpretation(−), Sa , Sc ) = (interpretation(−), n + 1).
(s52 ) ∀n ∈ N : magn(D1 , n) → n.
(s53 ) lower(Sa , Sb ) : diff(interpretation(+), Sa , Sb ) =
diff(interpretation(−), Sb , Sa ) = magn(dist(interpretation(+), Sa , Sb )).
(s54 ) @Sa : lower(Sa , Sb ) → height(Sc ) = diff(interpretation(−), Sc , Sb ).
(s55 ) between(C1 , Sa , Sb ) ∨ (inCircle(Ci1 , Sb ) ∧ @Sc : (inCircle(Ci1 , Sc ) ∧
lower(Sc , Sb ))) → base(Sb ).
(s56 ) Sa 6= Sb ∧ ∃Sc , Sd : (base(Sc ) ∧ base(Sd ) ∧ dist(interpretation(−), Sa , Sc ) =
dist(interpretation(−), Sb , Sd )) → analogs(Sa , Sb ).

An HDTP-Based Model of the Staircase
We now reconstruct the “big” Calculation Circular Staircase
(i.e., the version equipped with two circles or 19 steps) as an
analogy-based model for understanding and learning among
others important aspects of the ordinal number conception of
the natural numbers in the range from 0 to 19.
The analogy uses the Calculation Circular Staircase as a
base domain, transferring the structure and relational conception children acquire by playing with the staircase into their
previously acquired knowledge about natural numbers as target domain. The latter domain is most likely initially still
very poor as compared to the Calculation Circular Staircase
domain as only very little (if any at all) internal structure or
relations have been acquired besides the mere ordering of the
number terms from one to nineteen that had been committed
to memory in previous lessons. And even for this ordering
it can be assumed that the ordering has mostly only been developed on basis of isolated neighboring tuples of the form
(n, n + 1), for each number term only remembering its immediate successor. The arithmetic operations “+” (addition)
and “−” (subtraction) are known as abstract concepts (as are
their corresponding addition and subtraction tables), but have
not yet been developed into a grounded, constructively applicable conceptualization. Table 1 gives a formal HDTP-style

Table 1: Formalization of the Calculation Circular Staircase.
model of the Calculation Circular Staircase, whilst an idealized version (i.e., a version featuring complete addition and
subtraction tables, which in reality should be assumed to be
rather incomplete or sparse) of the students’ initial conceptualization of the natural number domain can formally be represented as shown in Table 2.
We quickly want to focus on some aspects of the respective formalizations. The base domain of the later analogy,
i.e., the formalization of the Calculation Circular Staircase,

1895

Sorts:
number, sign, operation.
Entities:
one, two, . . . , nineteen, zero : number.
+, − : sign.
plus, minus : operation.
Functions:
apply : operation × number × number → number.
interpretation : sign → operation.
Predicates:
succ : number × number.
Facts:
(n1 ) succ(zero, one).
(n2 ) succ(one, two).
(n3 ) succ(two, three).
(n4 ) succ(three, four).
...
(n19 ) succ(eighteen, nineteen).
(n20 ) apply(interpretation(+), one, one) = two.
(n21 ) apply(interpretation(+), one, two) = three.
(n22 ) apply(interpretation(+), one, three) = four.
...
(n37 ) apply(interpretation(+), one, eighteen) = nineteen.
(n38 ) apply(interpretation(+), two, one) = three.
(n39 ) apply(interpretation(+), two, two) = four.
...
(n54 ) apply(interpretation(+), two, seventeen) = nineteen.
(n55 ) apply(interpretation(+), three, one) = four.
...
(n190 ) apply(interpretation(+), eighteen, one) = nineteen.
(n191 ) apply(interpretation(−), two, one) = one.
(n192 ) apply(interpretation(−), three, one) = two.
(n193 ) apply(interpretation(−), three, two) = one.
...
(n360 ) apply(interpretation(−), nineteen, seventeen) = two.
(n361 ) apply(interpretation(−), nineteen, eighteen) = one.
Laws:
(n362 ) interpretation(+) = plus.
(n363 ) interpretation(−) = minus.
(n364 ) interpretation(+) 6= interpretation(−).

Sorts:
circle, caesura, time, sign, direction/operation, steps/number, natural/number.
Entities:
one, two, . . . , nineteen, zero, Sa , Sb , Sc , Sd : steps/number.
O : direction/operation.
+, − : sign.
(∗) door, C1 : caesura.
(∗) T1 , T2 : time.
(∗) inner, outer, Ci1 : circle.
Functions:
DiffApply : direction/operation × steps/number × steps/number → natural/number.
interpretation : sign → direction/operation.
(∗) height : steps/number → natural/number.
(∗) dist : direction/operation × steps/number × steps/number → direction/operation ×
natural/number.
(∗) magn : direction/operation × natural/number → natural/number.
Predicates:
succ : steps/number × steps/number.
(∗) higher : steps/number × steps/number.
(∗) lower : steps/number × steps/number.
(∗) inCircle : circle × steps/number.
(∗) base : steps/number.
(∗) inFocus : steps/number × time.
(∗) currentSign : sign × time.
(∗) between : caesura × steps/number × steps/number.
(∗) move : steps/number × natural/number × direction/operation × time.
(∗) analogs : steps/number × steps/number.
Facts:
(g1 ) succ(zero, one).
(g2 ) succ(one, two).
...
(g19 ) succ(eighteen, nineteen).
(g20 ∗) inCircle(inner, zero).
(g21 ∗) inCircle(inner, one).
...
(g29 ∗) inCircle(inner, nine).
(g30 ∗) inCircle(outer, ten).
...
(g39 ∗) inCircle(outer, nineteen).
(g40 ∗) between(door, nine, ten).
Laws:
(g41 ) interpretation(+) = O.
(g42 ) interpretation(−) = O.
(g43 ) interpretation(+) 6= interpretation(−).
(g44 ∗) higher(Sa , Sb ) ↔ succ(Sb , Sa ) ∨ ∃Sc : (succ(Sb , Sc ) ∧ higher(Sa , Sc )).
(g45 ∗) higher(Sa , Sb ) ↔ lower(Sb , Sa ).
(g46 ∗) T1 < T2 : inFocus(Sa , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sa , 1, interpretation(+), T1 ) ∧ succ(Sa , Sb ) → inFocus(Sb , T2 ) ∧
dist(interpretation(+), Sa , Sb ) = (interpretation(+), 1).
(g47 ∗) T1 < T2 , ∀n ∈ N, n > 1 : inFocus(Sa , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sa , n, interpretation(+), T1 ) ∧ succ(Sa , Sb ) → inFocus(Sb , T2 ) ∧
currentSign(+, T2 ) ∧ move(Sb , n − 1, interpretation(+), T2 ) ∧
dist(interpretation(+), Sa , Sb ) = (interpretation(+), 1).
(g48 ∗) T1 < T2 : inFocus(Sa , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sa , 1, interpretation(−), T1 ) ∧ succ(Sb , Sa ) → inFocus(Sb , T2 ) ∧
dist(interpretation(−), Sa , Sb ) = (interpretation(−), 1).
(g49 ∗) T1 < T2 , ∀n ∈ N, n > 1 : inFocus(Sa , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sa , n, interpretation(−), T1 ) ∧ succ(Sb , Sa ) → inFocus(Sb , T2 ) ∧
currentSign(−, T2 ) ∧ move(Sb , n − 1, interpretation(−), T2 ).
(g50 ∗) lower(Sa , Sb ), T1 < T2 , ∀n ∈ N : dist(interpretation(+), Sa , Sb ) =
(interpretation(+), n) ∧ inFocus(Sb , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sb , 1, interpretation(+), T1 ) ∧ succ(Sb , Sc ) → inFocus(Sc , T2 ) ∧
dist(interpretation(+), Sa , Sc ) = (interpretation(+), n + 1).
(g51 ∗) higher(Sa , Sb ), T1 < T2 , ∀n ∈ N : dist(interpretation(−), Sa , Sb ) =
(interpretation(−), n) ∧ inFocus(Sb , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sb , 1, interpretation(−), T1 ) ∧ succ(Sc , Sb ) → inFocus(Sc , T2 ) ∧
dist(interpretation(−), Sa , Sc ) = (interpretation(−), n + 1).
(g52 ∗) ∀n ∈ N : magn(D1 , n) → n.
(g53 ∗) lower(Sa , Sb ) : DiffApply(interpretation(+), Sa , Sb ) =
DiffApply(interpretation(−), Sb , Sa ) = magn(dist(interpretation(+), Sa , Sb )).
(g54 ∗) @Sa : lower(Sa , Sb ) → height(Sc ) = DiffApply(interpretation(−), Sc , Sb ).
(g55 ∗) between(C1 , Sa , Sb ) ∨ (inCircle(Ci1 , Sb ) ∧ @Sc : (inCircle(Ci1 , Sc ) ∧
lower(Sc , Sb ))) → base(Sb ).
(g56 ∗) Sa 6= Sb ∧ ∃Sc , Sd : (base(Sc ) ∧ base(Sd ) ∧ dist(interpretation(−), Sa , Sc ) =
dist(interpretation(−), Sb , Sd )) → analogs(Sa , Sb ).

Table 2: Formalization of an idealized form of the children’s
initial conception of the number domain.
exhibits a rich structure, both concerning facts and laws alike.
The facts represent the easily accessible structure of the staircase, namely the order of succession of the steps, the distinction between the inner and the outer circle, and the placement
of the door between steps nine and ten. The laws cover the
transformational and constructive insights accessible to the
children via interaction with the staircase: For instance (s46 )
to (s49 ) encompass the previously described process of having the toy figure move up or down the staircase, and (s50 )
and (s51 ) then add a counting principle keeping track of the
number of steps passed by the figure (which in reality allows
children to determine the distance the toy figure may move
on the staircase). (s52 ) and (s53 ) serve for converting the distance measured in steps into a natural number, i.e., represent
the children’s mental process when realizing that distances on
the staircase correspond to a more abstract number concept,
i.e., are not bound to the individual stairs but can be generalized. Concerning the final two laws, (s55 ) introduces the
previously mentioned concept of singular steps in the Calculation Circular Staircase which are similar in that they form
the base of one closed part of the staircase (namely of the inner or outer circle) or are marked by being preceded by the
door as caesura, and (s56 ) concludingly introduces the concept of structure-based analogs amongst the steps.
The formalization of the target domain of the later analogy,
i.e., of an idealized version of the children’s initial conception of the number domain, contains mostly facts the children
have learned by heart, namely the order of the number terms

Table 3: Generalized theory of the Calculation Circular Staircase and the children’s number domain, already expanded by
the generalized forms of the candidate elements for analogical transfer from base to target domain (marked with ∗).
between zero and nineteen, and addition and subtraction tables within this range. In reality it has to be assumed that the
addition and subtraction tables are significantly more sparsely
populated than in our formalization, corresponding to incomplete recall of the memorized full tables.
The HDTP mechanism can now be used for computing a

1896

common generalization of both domains, yielding a generalized theory like given in Table 3. The main domain elements
defining the alignment of formulae are the matching between
the entities of sort steps and number, between the functions
diff and apply, the alignment of the respective sign entities, as
well as the matching between the direction and operation entities (induced by the alignment of the respective interpretation
functions). Here it has to be noted that in order to analogically
match the two domains it is not only necessary to generalize
facts and laws but in this case also sorts have to be generalized, for two sorts yielding the least general supersort. This
is needed, for instance, when pairing up the representation of
the staircase’s steps (conceived as mere pillars) and the number terms known to the children.
In conclusion, the generalized theory forms the basis for
transferring knowledge in an analogy-based way from the
(originally richer) Calculation Circular Staircase domain to
the children’s number domain, resulting in an expanded theory for the numbers as given in Table 4. The important aspect
in this expanded version of the domain is the availability of
the constructive relations and insights obtained in the interaction with the Calculation Circular Staircase, e.g., providing a
means to give meaning to the number terms via the assignment of the corresponding natural number values (using the
diff function in (e381 ∗)) or via laws (e373 ∗) to (e378 ∗) allowing for the independent computation of parts of the addition
and subtraction table that might not be obtainable from memory (i.e., that would not explicitly be present as a fact in a
more realistic formalization of the number domain).

Sorts:
circle, caesura, time, sign, operation, number, natural.
Entities:
one, two, . . . , nineteen, zero, Sa , Sb , Sc , Sd : number.
+, − : sign.
plus, minus : operation.
(∗) door, C1 : caesura.
(∗) T1 , T2 : time.
(∗) inner, outer, Ci1 : circle.
Functions:
apply : operation × number × number → number.
interpretation : sign → operation.
(∗) diff : operation × number × number → natural.
(∗) height : number → natural.
(∗) dist : operation × number × number → operation × natural.
(∗) magn : operation × natural → natural.
(∗) interpretation : sign → operation.
Predicates:
succ : number × number.
(∗) higher : number × number.
(∗) lower : number × number.
(∗) inCircle : circle × number.
(∗) base : number.
(∗) inFocus : number × time.
(∗) currentSign : sign × time.
(∗) between : caesura × number × number.
(∗) move : number × natural × operation × time.
(∗) analogs : number × number.
Facts:
(e1 ) succ(zero, one).
(e2 ) succ(one, two).
...
(e19 ) succ(eighteen, nineteen).
(e20 ) apply(interpretation(+), one, one) = two.
(e21 ) apply(interpretation(+), one, two) = three.
...
(e190 ) apply(interpretation(+), eighteen, one) = nineteen.
(e191 ) apply(interpretation(−), two, one) = one.
(e192 ) apply(interpretation(−), three, one) = two.
(e193 ) apply(interpretation(−), three, two) = one.
...
(e360 ) apply(interpretation(−), nineteen, seventeen) = two.
(e361 ) apply(interpretation(−), nineteen, eighteen) = one.
(e362 ∗) inCircle(inner, zero).
(e363 ∗) inCircle(inner, one).
...
(e364 ∗) inCircle(inner, nine).
(e365 ∗) inCircle(outer, ten).
...
(e366 ∗) inCircle(outer, nineteen).
(e367 ∗) between(door, nine, ten).
Laws:
(e368 ) interpretation(+) = plus.
(e369 ) interpretation(−) = minus.
(e370 ) interpretation(+) 6= interpretation(−).
(e371 ∗) higher(Sa , Sb ) ↔ succ(Sb , Sa ) ∨ ∃Sc : (succ(Sb , Sc ) ∧ higher(Sa , Sc )).
(e372 ∗) higher(Sa , Sb ) ↔ lower(Sb , Sa ).
(e373 ∗) T1 < T2 : inFocus(Sa , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sa , 1, interpretation(+), T1 ) ∧ succ(Sa , Sb ) → inFocus(Sb , T2 ) ∧
dist(interpretation(+), Sa , Sb ) = (interpretation(+), 1).
(e374 ∗) T1 < T2 , ∀n ∈ N, n > 1 : inFocus(Sa , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sa , n, interpretation(+), T1 ) ∧ succ(Sa , Sb ) → inFocus(Sb , T2 ) ∧
currentSign(+, T2 ) ∧ move(Sb , n − 1, interpretation(+), T2 ) ∧
dist(interpretation(+), Sa , Sb ) = (interpretation(+), 1).
(e375 ∗) T1 < T2 : inFocus(Sa , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sa , 1, interpretation(−), T1 ) ∧ succ(Sb , Sa ) → inFocus(Sb , T2 ) ∧
dist(interpretation(−), Sa , Sb ) = (interpretation(−), 1).
(e376 ∗) T1 < T2 , ∀n ∈ N, n > 1 : inFocus(Sa , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sa , n, interpretation(−), T1 ) ∧ succ(Sb , Sa ) → inFocus(Sb , T2 ) ∧
currentSign(−, T2 ) ∧ move(Sb , n − 1, interpretation(−), T2 ).
(e377 ∗) lower(Sa , Sb ), T1 < T2 , ∀n ∈ N : dist(interpretation(+), Sa , Sb ) =
(interpretation(+), n) ∧ inFocus(Sb , T1 ) ∧ currentSign(+, T1 ) ∧
move(Sb , 1, interpretation(+), T1 ) ∧ succ(Sb , Sc ) → inFocus(Sc , T2 ) ∧
dist(interpretation(+), Sa , Sc ) = (interpretation(+), n + 1).
(e378 ∗) higher(Sa , Sb ), T1 < T2 , ∀n ∈ N : dist(interpretation(−), Sa , Sb ) =
(interpretation(−), n) ∧ inFocus(Sb , T1 ) ∧ currentSign(−, T1 ) ∧
move(Sb , 1, interpretation(−), T1 ) ∧ succ(Sc , Sb ) → inFocus(Sc , T2 ) ∧
dist(interpretation(−), Sa , Sc ) = (interpretation(−), n + 1).
(e379 ∗) ∀n ∈ N : magn(D1 , n) → n.
(e380 ∗) lower(Sa , Sb ) : diff(interpretation(+), Sa , Sb ) =
diff(interpretation(−), Sb , Sa ) = magn(dist(interpretation(+), Sa , Sb )).
(e381 ∗) @Sa : lower(Sa , Sb ) → height(Sc ) = diff(interpretation(−), Sc , Sb ).
(e382 ∗) between(C1 , Sa , Sb ) ∨ (inCircle(Ci1 , Sb ) ∧ @Sc : (inCircle(Ci1 , Sc ) ∧
lower(Sc , Sb ))) → base(Sb ).
(e383 ∗) Sa 6= Sb ∧ ∃Sc , Sd : (base(Sc ) ∧ base(Sd ) ∧ dist(interpretation(−), Sa , Sc ) =
dist(interpretation(−), Sb , Sd )) → analogs(Sa , Sb ).

Related Work and Conclusion
We are not the first to consider the use of formal models
and computational analogy-making systems in the context of
education and teaching-related topics. Among many others,
for example in (Thagard, Cohen, & Holyoak, 1989), the authors present a theory and implementation of analogical mapping that applies to explanations of unfamiliar phenomena,
and (Siegler, 1989) briefly conjectures how the StructureMapping Engine (SME) (Falkenhainer, Forbus, & Gentner,
1989) as a prototypical analogy-engine could be used to gain
insights about developmental aspects of analogy use. General cognitive theories of analogical reasoning and associated computation models are also highly relevant to analogies
as learning mechanisms. These include Gentner’s structure
mapping theory and engine, in which relations between objects are preserved (and relations which contribute to higher
order predicates are mapped preferentially), and attributes of
objects are not mapped (Gentner, 1983); Holyoak and Thagard’s multi-constraint theory, in which mappings are evaluated according to constraints of structural consistency, pragmatic centrality and semantic similarity (Holyoak & Thagard,
1997); and Hummel and Holyoak’s theory of analogy formation, which integrates memory access and structural mapping, implemented in LISA (Hummel & Holyoak, 2003) (see
(Gentner et al., 2001) for a review of computational models of

Table 4: Analogically enriched formalization of the idealized
version of the children’s conception of the number domain.

1897

analogy). Our HDTP model of the Calculation Circular Staircase is intended to complement such approaches, showing
how formal methods and computational accounts of analogymaking can be used to gain additional insights in the inner
workings of analogy-based educational methods and tools.
By providing a detailed formal description of the involved
domains, also sketching how the domains relate to each other
in terms of their joint generalization and how this relation
can be used to transfer knowledge from the staircase domain
into the number domain, we managed to explicate the structural relations and governing laws underlying the Calculation
Circular Staircase as teaching model of the natural number
domain, and to point out how the identified constructive and
transformation-based conceptualizations then also can provide additional support and a deeper-rooted model for the
childrens’ initially very flat and sparse conception of the number domain.
We see this work as a first step towards the design of
analogy-based teaching material, both specifically in arithmetic and, more generally, in mathematics and other disciplines. Modelling educational analogies provides another
perspective on a particular analogy, in terms of which information is transferred, what the limitations of the analogy are,
or whether it makes unhelpful mappings; and what potential
extensions to the analogy it suggests. We envisage that our
model of the Calculation Circular Staircase can be used in order to design a lesson plan on the natural number domain. Its
usefulness would then be evaluated via empirical studies on
the students, testing the depth of their understanding of cardinal and ordinal numbers and basic operations, and whether
the students’ understanding (and misunderstanding) mirrors
the inferences made by the model.

References
Akgul, E. (2006). Teaching Science In An Inquity-Based
Learning Environment: What It Means For Pre-Service Elementary Science Teachers. Eurasia Journal of Mathematics, Science and Technology Education, 2(1), 71–81.
Arnold, M., & Millar, R. (1996). Exploring the use of analogy in the teaching of heat, temperature and thermal equilibrium. In G. Welford, J. Osborne, & P. Scott (Eds.), Research in Science Education in Europe: Current Issues and
Themes. London: Farmer Press.
Besold, T. R. (2013). Analogy Engines in Classroom Teaching: Modeling the String Circuit Analogy. In AAAI Spring
2013 Symposium on Creativity and (Early) Cognitive Development.
Brainerd, C. (1979). The origins of the number concept. New
York: Praeger.
Clement, J. (1993). Using bridging analogies and anchoring
intuitions to deal with students’ preconceptions in physics.
Journal of Research in Science Teaching, 30, 1241–1257.
Dedekind, R. (1887/1969). Was sind und was sollen die
Zahlen? 2. Ndr.. der 10. Aufl. Braunschweig: Vieweg.

Duit, R. (1991). The role of analogies and metaphors in
learning science. Science Education, 75(6), 649–672.
English, L. D. (Ed.). (1997). Mathematical reasoning:
Analogies, metaphors and images (studies in mathematical
thinking and learning series). Lawrence Erlbaum Assoc.
Falkenhainer, B., Forbus, K., & Gentner, D. (1989). The
Structure-Mapping Engine: Algorithm and Examples. Artificial Intelligence, 41, 1–63.
Gentner, D. (1983). Structure-mapping: a theoretical framework for analogy. Cognitive Science(7), 155-170.
Gentner, D., Holyoak, K., & Kokinov, B. (Eds.). (2001).
The analogical mind: Perspectives from cognitive science.
Cambridge, MA: MIT Press.
Glynn, S., Duit, R., & Thiele, R. (1995). Teaching science
with analogies: A strategy for constructing knowledge. In
S. Glynn & R. Duit (Eds.), Learning science in the schools:
Research reforming practice. Mahwah, NJ: Lawrence Erlbaum Assoc.
Guerra-Ramos, M. (2011). Analogies as Tools for Meaning
Making in Elementary Science Education: How Do They
Work in Classroom Settings? Eurasia Journal of Mathematics, Science and Technology Education, 7(1), 29–39.
Holyoak, K., & Thagard, P. (1995). Mental leaps: Analogy
in creative thought. Cambridge, MA: MIT Press.
Holyoak, K., & Thagard, P. (1997). The analogical mind.
American Psychologist.
Hummel, J. E., & Holyoak, K. J. (2003). A symbolicconnectionist theory of relational inference and generalization. Psychological Review, 110, 220–264.
Novick, L. R. (1988). Analogical transfer, problem similarity, and expertise. Journal of Experimental psychology:
Learning, Memory, and Cognition, 14, 510–520.
Pimm, D. (1981). Metaphor and analogy in mathematics. For
the Learning of Mathematics, 1(3), 47-50.
Schwank, I. (2003). Einführung in prädikatives und funktionales Denken. Zentralblatt Didaktik der Mathematik,
35(3), 70–78.
Schwank, I., Aring, A., & Blocksdorf, K. (2005). Betreten
erwünscht - die Rechenwendeltreppe. In Beiträge zum
Mathematikunterricht. Hildesheim: Franzbecker.
Schwank, I., Gelfman, E., & Nardi, E. (1999). Mathematical Thinking and Learning as Cognitive Processes. In
I. Schwank (Ed.), Proc. of the First Conference of the European Society for Research in Mathematics Education (pp.
16–24).
Schwering, A., Krumnack, U., Kühnberger, K.-U., & Gust,
H. (2009). Syntactic principles of Heuristic-Driven Theory
Projection. Journal of Cognitive Systems Research, 10(3),
251–269.
Siegler, R. (1989). Mechanisms of Cognitive Development.
Annual Review of Psychology, 40, 353–379.
Thagard, P., Cohen, D., & Holyoak, K. (1989). Chemical Analogies: Two Kinds of Explanation. In Proc. of
the 11th International Joint Conference on Artificial Intelligence (pp. 819–824).

1898

