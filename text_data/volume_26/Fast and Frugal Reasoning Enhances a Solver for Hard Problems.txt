UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Fast and Frugal Reasoning Enhances a Solver for Hard Problems
Permalink
https://escholarship.org/uc/item/7rg2g8hw
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 26(26)
Authors
Epstein, Susan L.
Ligori, Tiziana
Publication Date
2004-01-01
Peer reviewed
 eScholarship.org                                 Powered by the California Digital Library
                                                                    University of California

                  Fast and Frugal Reasoning Enhances a Solver for Hard Problems
                                       Susan L. Epstein (susan.epstein@hunter.cuny.edu)
                                               Tiziana Ligorio (t.ligorio@verizon.net)
                                                     Department of Computer Science,
                             Hunter College and The Graduate Center of The City University of New York
                                              695 Park Avenue, New York, NY 10021 USA
                            Abstract                                                          Background
   This paper describes how a program that learns to solve            As often happens in interdisciplinary work, terminology
   hard problems has been enhanced with fast and frugal, rec-         overlaps here, but meaning does not. Thus we alert the
   ognition-based reasoning methods. The program uses these           reader to the fact that, although “domain” means “prob-
   methods to help manage its own heuristics for solving con-         lem area” in some fields, it has a different connotation
   straint satisfaction problems. The result is a constraint          (described below) in constraint solving, for which we re-
   solver that reasons quickly, much the way people appear to         serve it. Similarly, fast and frugal researchers generally
   induce reasonable decisions in real-world situations. Em-          refer to their general problem-solving methods (e.g.,
   pirical evidence on a variety of problems indicates that fast      Minimalist, Take the Last, Take the Best) as heuristics,
   and frugal reasoning can accelerate the solution of very dif-      but so too do CSP researchers, and again we take the CSP
   ficult problems, often without introducing additional error.       definition. As a result, we describe fast and frugal meth-
                                                                      ods as “strategies that consult heuristics” rather than “heu-
The thesis of this work is that the same fast and frugal              ristics that consult cues.” Finally, the notion of recogni-
reasoning which people use to formulate decisions in real-            tion, which underlies the fast and frugal strategies, is itself
world situations (Gigerenzer, Todd, & The ABC Research                a heuristic, albeit a more general one, defined below.
Group, 1999) can accelerate autonomous decision makers
without endangering their reliability. We investigate this            Fast and frugal reasoning
premise with a program that learns how to combine heu-                Under limited time, there exists a trade-off between deci-
ristics to solve constraint satisfaction problems (CSPs).             sion making speed and correctness. When pressed for
The principal result reported here is that, on difficult              time, people may limit their search for information to
CSPs, when recognition alone is not sufficient, fast and              guide them in the decision process with non-
frugal, recognition-based reasoning enhances the solver.              compensatory strategies, strategies that use a single heu-
This is particularly noteworthy because the program first             ristic to prefer a single option (Gigerenzer & Goldstein,
learns how to apply its CSP heuristics within its problem             1996). People appear to work from an adaptive toolbox, a
environment, and then hones its performance using fast                collection of cognitive mechanisms for inference in spe-
and frugal reasoning. We believe this to be the first explo-          cific problem areas (Gigerenzer, Todd, & The ABC Re-
ration of fast and frugal reasoning on a large body of                search Group, 1999). This adaptive toolbox includes low-
challenging problems whose difficulty can be explicitly               order perceptual and memory processes, including fast
characterized and whose solution can be incisively as-                and frugal strategies that may be combined to account for
sessed.                                                               higher-level mental processes. Such a model of cognitive
   Many large-scale, real-world problems in areas such as             heuristics is ecologically rational, grounded in environ-
design and configuration, planning and scheduling, and                ment-specific structure and characteristics (Goldstein &
diagnosis and testing are readily understood, represented,            Gigerenzer, 2002; Gigerenzer & Selten, 2001;
and solved as CSPs. CSP solution is, in general, not                  Gigerenzer, Todd, & The ABC Research Group, 1999).
                                                                         In one-reason decision making, a set of heuristics is
known to be solvable by algorithms of any but exponen-
                                                                      consulted one at a time, until some heuristic is able to dis-
tial complexity. Thus the effectiveness of fast and frugal
                                                                      criminate, that is, able to select a single option. Recogni-
reasoning on these problems is counterintuitive.                      tion is the foundation heuristic for fast and frugal reason-
   Fast and frugal reasoning assumes pre-acquired, accu-              ing: it favors recognized options over unrecognized ones.
rate, problem-area knowledge (Gigerenzer, Todd, & The                 Recognition discriminates if and only if exactly one op-
ABC Research Group, 1999). In real-world decisions, fast              tion is recognized (Gigerenzer & Goldstein, 1996). In that
and frugal reasoning adaptively exploits the environ-                 case, it is sufficient for one-reason decision making, and
ment’s structure. A program provided with heuristics                  no further computation is required.
must learn their accuracy before turning to fast and frugal              When recognition alone does not discriminate, each
decision making. The first sections of this paper provide             strategy considered here may be thought of as a meta-
background information on fast and frugal reasoning, and              heuristic that speeds the selection of the next heuristic. All
on CSP. Subsequent sections describe how we addressed                 three strategies initially try recognition on all the available
these ideas in a program that learns, describe the experi-            options. If more than one option is recognized, other heu-
mental design, discuss the results, and sketch future work.           ristics are consulted, one at a time, on a randomly-
                                                                 351

selected pair of recognized options, until some heuristic         of variables and k its maximum domain size. The density
does discriminate. The preferred option is then selected.         d is the fraction of possible edges in the underlying con-
The way these “other” heuristics are chosen defines the           straint graph. The tightness t is the percentage of possible
decision-making strategy. The following are drawn from            value pairs the constraints exclude. Thus in
Gigerenzer, Todd and the ABC Research Group (1999):               <30,8,.26,.66> every problem has 20 variables, each with
• Minimalist: Select a heuristic at random, until one dis-        domain size at most 8, and 308 possible value assign-
   criminates among the options and a decision is made.           ments. In a given class, every CSP has the same values
• Take the Last: Use the last heuristic, the one that dis-        for n, k, d, and t, and the same minimal number of deci-
   criminated the last time a decision was made, when             sions for solution.
   recognition did not. This captures the human tendency             To solve a CSP, one can repeatedly select a variable
   to re-use the most recent successful strategy.                 and assigns it a value consistent with its constraints. For
• Take the Best: Use the heuristic known to work best in
                                                                  example, Figure 2 represents a possible search for a solu-
   a specific environment. The insightfulness of a heuristic
                                                                  tion to the problem in Figure 1. Reading from top to bot-
   on a set of problems is called its ecological validity.
                                                                  tom and from left to right, each circle (node) represents a
Constraint satisfaction problems (CSPs)                           decision. There, Variable A was selected first, and as-
                                                                  signed the value 2, then D was selected, and both its val-
CSPs are a good vehicle with which to explore fast and            ues (1 and 3) were tried without success. Therefore,
frugal reasoning. They arise in classes whose difficulty          search backed up, the value 2 was withdrawn (retracted)
has a mathematical characterization, and many examples            from A, and the value 1 was assigned to A instead.
can be readily generated within each class. Furthermore,             The black nodes in Figure 2 represent the correct deci-
well-established criteria exist with which to gauge the           sions, and the solid path on the right represents the solu-
performance of a program that solves them.                        tion. When a value assignment is inconsistent with the
   A CSP consists of a set of variables, each associated          constraints, it is retracted and another assignment is tried.
with a domain of possible values for assignment, and a set        In Figure 2, white nodes are errors, assignments that
of constraints that specify which combinations of values          cause subsequent decisions (the gray nodes) to be re-
are allowed. To represent a real-world problem as a CSP,          tracted, so that an error can be corrected. For example, the
one casts the entities involved as variables, and expresses       assignment D = 1 is inconsistent because it leaves no val-
the relationships required among these variables as con-          ues for C. When that happens, values are retracted until
straints. A simple example appears in Figure 1. Real-             all current assignments are once again consistent, and new
world CSPs, however, involve many more variables, sub-            values tried. Finding a single solution to a solvable prob-
stantial domains, and a broad variety of interacting, more        lem this way requires at least n assignments.
sophisticated restrictions as constraints. A solution for a          Although CSP solution is NP-hard, some problem
CSP is one value for each variable such that all con-             classes surrender readily to heuristics. For a solvable CSP,
straints are satisfied. Every CSP has an underlying con-          the order in which one selects variables (variable order-
straint graph that represents each variable by a vertex. An       ing, e.g., A, D, C, B in Figure 2) can speed solution, as
edge in the graph represents a constraint between the cor-        can the order in which one assigns a value to a just-
responding variables, and is labeled by their permissible         selected variable (value ordering, e.g., 2, 1 for A in Fig-
pairs of values. The degree of a variable is the number of        ure 2). There are dozens of variable-ordering and value-
edges to it in the graph. (For simplicity we restrict discus-     ordering heuristics in the CSP literature, but their interac-
sion here to binary CSPs.)                                        tions are ill-understood. The best approximation for CSP
   How hard a CSP is to solve is determined by how diffi-         problem difficulty is currently kappa, which is defined as
cult it is to find values that satisfy all its constraints at     a function of n, k, d, and t (Gent, MacIntyre, Prosser, &
once. A class of CSPs groups together problems with four          Walsh, 1996). Nonetheless, two problems from the same
parameters thought to estimate their difficulty. A CSP            class may still require different amounts of effort to solve.
class may be described by <n,k,d,t>, where n is its number           During search, a CSP solver can apply a variety of in-
                                                                  ference and retraction methods. When a partial solution
   Variables: A, B, C, D                                          (a set of values assigned to a proper subset of the vari-
                                                                  ables) is incompatible with the constraints, all the nodes
   Domains: A is 1 or 2                     (1 1) (2 2)
                                         A              B         that include it (e.g., gray in Figure 2) may be eliminated.
               B is 1, 2, or 3
               C is 1, 2, or 4                                    An inference method can propagate the implications of a
               D is 1 or 3                        (1 1) (1 3)     newly-assigned value on to the remainder of the as-yet-
   Constraints:      A=B                                D
                                                                  unassigned variables. Different amounts of inference are
                                        C
                     C<D                   (1 3) (2 3)            possible, and there are tradeoffs between inference effort
                     D – A is even                                and search savings. A specific inference method (the cen-
Figure 1: A simple constraint satisfaction problem and its        tral one is arc consistency) can be carried out to varying
underlying constraint graph. Edges in the graph are la-           degrees (Sabin & Freuder, 1994) and with different algo-
beled with acceptable value pairs, computed from the              rithms (Bessière & Régin, 2001). A retraction method re-
domains and the constraints.
                                                              352

sponds to an inconsistent partial solution (a subtree of                  chess) will be reached without devoting resources to
discarded nodes rooted at an error node in Figure 2). The                 other, less reliable heuristics. A perfect heuristic that op-
standard retraction method is chronological backtracking,                 poses an action (e.g., “don’t move into checkmate”) re-
withdrawal of the most recent assignment(s).                              moves that action from consideration by all subsequent
                                                                          heuristics, thereby preventing obvious errors. Thus plac-
                             ACE                                          ing perfect heuristics in tier 1 permits easy problems to be
ACE (the Adaptive Constraint Engine) is an autonomous                     solved easily, a feature all too rare in complex systems.
system that learns to solve classes of CSPs (Epstein,                     (The second tier is not applicable to the work reported
Freuder, Wallace, Morozov, & Samuels, 2002). ACE is                       here; the interested reader is referred to (Epstein, 1998)).
based on FORR (FOr the Right Reasons), a cognitively-                        Tier-3 heuristics are the ordinary ones; they produce
oriented architecture for learning and problem solving                    single-action comments that are not guaranteed to be cor-
that supports the development of expertise (Epstein,                      rect. All but two of the ACE heuristics in this version lie
1994). Here, “cognitively-oriented” means that FORR’s                     in tier 3. Because they are fallible, their comments are
reasoning structure emulates approaches readily observ-                   combined to select the next action in a process called
able in human problem solving, highly-effective ap-                       voting. Each heuristic may vote on different actions with
proaches not always found in traditional AI artifacts                     different strengths, or it may remain silent. ACE’s tier 3
(Biswas, Goldman, Fisher, Bhuva, & Glewwe, 1995;                          heuristics were, for the most part, drawn from the CSP
Crowley & Siegler, 1993; Klein & Calderwood, 1991;                        expert community. In every case, however, the dual of a
Kojima & Yoshikawa, 1998; Novick & Coté, 1992;                            popular heuristic was also implemented. For example, the
Schraagen, 1993). FORR is based on the premise that de-                   CSP literature suggests that the next variable to have a
cisions are composed from more and less trustworthy ra-                   value assigned to it should have a minimum dynamic do-
tionales. One constructs a FORR-based program by speci-                   main size (set of values that would still be consistent with
fying heuristics that underlie decision making in a par-                  existing variable assignments). ACE therefore has a heu-
ticular problem area.                                                     ristic that comments in favor of such variables, but it also
  ACE is an ambitious program – armed with many heu-                      has its dual, a heuristic to maximize the dynamic domain
ristics, it can tackle difficult problems. The version we                 size of a variable.
used here begins with 40 CSP heuristics which are ini-
tially classified into a hierarchy of three tiers by the user.                  One-Reason Decision Making in ACE
ACE moves through those tiers to make a decision. The                     ACE learns to solve CSPs efficiently by winnowing
heuristics in tiers 1 and 2 are consulted sequentially; the               through its heuristics and balancing them appropriately.
heuristics in tier 3 are consulted (effectively) in parallel.             Laden with CSP knowledge, ACE’s decisions are care-
   Tier 1 consists of perfect (i.e., error-free) heuristics               fully reasoned but time-consuming. Fast and frugal, one-
consulted sequentially. If any heuristic supports an action,              reason decision making seemed a reasonable enhance-
that action is executed without reference to any subse-                   ment, but its adaptation for ACE required careful thought
quent heuristics. Consulting perfect heuristics first en-                 about recognition, ecological rationality, ecological va-
sures that obvious correct decisions (e.g., a checkmate at                lidity, and preference functions.
                                                                          Recognition in ACE
                                           Key
                       Variable A              correct decision           Recognition is familiarity with something previously ex-
                                               error
                                                                          perienced. Recall that, during CSP solution, there are only
               2           1                                              two kinds of experience: variable selection and value se-
                                               discarded node
                                                                          lection. Therefore, we define recognition to be the identi-
   Variable D               Variable D             underlying perfect     fication of a current option as one previously selected
                                                   path
                              3
                                                                          during search in the current problem. Note that recogni-
                     1                             digression
           1     3                                                        tion for ACE is a selection heuristic rather than a trigger
                                Variable C                                for situation assessment and re-evaluation, because mere
         Variable C
                                                                          recognition of a single option is sufficient for decision
                                  2                                       making without any consideration of the similarities of
                1 2 4                                                     the different search states (situations) in which it previ-
                                    Variable B
                                                                          ously occurred. For example, in Figure 2 assigning 1 to
                                      1                                   Variable D after Variable A is set to 1, eventually proves
                                                                          to be an error, since all possible assignments to Variable
Figure 2: A search tree for solution to the simple CSP in                 C are then incompatible with the constraints. In response
Figure 1, depicted here as alternating variable selections                to the detected error, the gray nodes corresponding to the
and value selections. When a value selection violates some                selection of Variable C and the values tried for it are re-
                                                                          tracted. The decisions made in this subtree, excluding the
constraint, that decision is retracted, and search backtracks.
                                                                          error node, will be recognized during subsequent search.
New values are assigned until all variables have a value
                                                                          Effectively, later in search, a decision point that includes
consistent with the constraints.
                                                                      353

options previously found attractive will find them attrac-       From preference to binary decisions
tive again.                                                      The one-reason decision-making model assumes binary
   A counterargument to the role of recognition in human
                                                                 heuristics, ones that vote either in favor of or against an
reasoning is that recognition is often associated with other
                                                                 option. Recall that, if recognition does not discriminate,
cues to obtain a given judgment, and is thus compensatory
(Oppenheimer, 2003). When an object is recognized,               the model considers other heuristics on randomly-selected
other information about that object is also recalled at the      pairs of options, until some heuristic discriminates. Rec-
moment of recognition. If this “extra” information is rele-      ognition is a binary heuristic, and we translate it as such
vant to the judgment being made, it will be taken into ac-       for ACE: a decision was either previously made or not. A
count while making the decision. The relevant informa-           tier-3 heuristic, however, expresses its preference for, or
tion may support or oppose the judgment about the recog-         opposition to, an option in a comment whose strength lies
nized object. Although the additional information may be         between 0 and 10. To adapt ACE for one-reason decision
contradictory, for our purposes, the influence it has on         making, the option with the higher strength is deemed the
recognition is considered as a whole. Recognition may            positive one. If a heuristic comments on both options with
have an attached positive or negative correlation with re-       the same strength, or it does not comment at all, the heu-
spect to the judgment being made.                                ristic does not discriminate, and another heuristic is con-
   For ACE, recognition always has a positive correlation,       sulted, depending upon the particular strategy in use.
because it treats a previous decision as one it wants to
make again. The idea here is that, if no further knowledge                        Experimental Design
about ACE’s tier 3 heuristics has been acquired during
search on the current problem, and consulting these same            The ACE project maintains a large library of problem
heuristics previously led to making certain decisions, they      classes, each with many examples. In each experiment
should remain valid, if the option is still available. (Con-     here, ACE learned by attempting to solve at most 600
sistency checking may have eliminated it.) By “recogniz-         problems (the learning phase) and then was tested on 200
ing” such previously-computed but subsequently-retracted         different problems from the same class, with learning
decisions, ACE can avoid reconsulting all its heuristics on      turned off (the testing phase). This learn-and-then-test ap-
the same (or most of the same) options. For example, in          proach was repeated 10 times, each time with different
Figure 2, ACE initially assigned 2 to A and then chose           learning problems but the same testing problems. Fast and
Variable D. Later, when 2 is retracted and 1 assigned to         frugal reasoning was applied only in the testing phase.
A, the next variable must be selected. At that point D is           ACE’s performance here is evaluated by three standard
recognized and so need not be recomputed. Note too that          CSP criteria: average number of nodes in the decision tree
recognition can lead ACE to repeat an error. It tries 1 be-      (e.g. Figure 2), average number of mistakes during solu-
fore 3 for D on both sides of the search tree in Figure 2.       tion (number of retractions), and average computation
                                                                 time (in seconds). Any differences identified in the fol-
Ecological rationality and ecological validity                   lowing discussion are statistically significant at the .95
ACE must have acquired problem-class-specific knowl-             level. Learning was terminated early if the heuristics’
edge before it attempts speed-up through one-reason deci-        weights stabilized (did not vary in their standard deviation
sion making. Tier-3 heuristics are ACE’s version of the          by more than 0.1 over the most recent 20 problems) be-
adaptive toolbox, its knowledge about how CSP works.             fore 600 problems. ACE used chronological backtracking
ACE’s heuristics, however, are not all of equal signifi-         for retraction and MAC3 (Mackworth, 1977) for consis-
cance or reliability in a particular problem class. There-       tency checking. What we varied in our experiments was
fore, ACE learns weights to combine them.                        the problem class, and which non-compensatory search
   DWL (Digression-based Weight Learning) learns                 strategy was used in the testing phase.
problem-class-specific weights for tier-3 heuristics
(Epstein et al., 2002). It is specifically designed to mini-
mize errors during solution (and therefore minimize the                                    Results
number of nodes in the tree of Figure 2). After ACE                 We tested ACE alone, and then with each of the fast
solves a problem, DWL examines the solution trace, and           and frugal strategies on each of three problem classes.
adjusts the weight of each heuristic according to whether        The results appear in Table 1. The first class of problems
or not it supported the correct decisions. All heuristics        was <30, 8, .26, .66>, an extremely difficult set of ran-
start with the same weight. DWL provides the ecological          domly-generated CSPs. (The state of the CSP art does not
validity for the heuristics in a given problem class.            yet support labeling them “the most difficult” for their
   DWL also employs non-voting, baseline heuristics that         size, but these are certainly “exceptionally difficult.”) On
discriminate with randomly-generated strength on ran-            this class, each of the three non-compensatory strategies,
domly-chosen options. DWL uses them to gauge ACE’s               combined with recognition significantly improved overall
own heuristics, so that ACE learns to value only those           execution time. Speed-up came with a price, however.
heuristics that make comments more valuable than ran-            Although ACE solved every problem, it made more (al-
dom ones. These baseline heuristics provide ACE’s eco-           beit relatively trivial) errors, and explored more nodes
logical rationality.                                             during search. The most reasoned and ecologically ra-
                                                             354

Table 1: Performance of ACE alone and with the recognition heuristic guided by three different non-compensatory, one-
reason decision making strategies, on two classes of CSPs: < 30, 8, .26, .66> and < 30, 8, .12, .5>. Time (in seconds), er-
rors and nodes are per problem. Figures in bold represent a statistically significant improvement over ACE without recog-
nition.
      Class          Criterion              ACE                 Minimalist           Take the Last          Take the Best
   30-8-.26-.66    Overall time        3.10         (3.04)     2.72      (2.57)       2.85        (2.73)    2.37        (2.19)
                   Tier 3 time         1.41         (1.51)     0.70      (0.62)       0.75        (0.68)    0.61        (0.68)
                   Errors            105.11       (107.64)  119.12     (134.69)    116.97     (129.27) 113.77         (127.33)
                   Nodes             165.11       (107.64)  179.12     (134.69)    176.97     (129.27) 173.77         (127.33)
   30-8-.12-.5     Overall time        0.76         (0.57)     0.71      (0.49)       0.71        (0.42)    0.66        (0.44)
                   Tier 3 time         0.44         (0.38)     0.37      (0.31)       0.37        (0.28)    0.36        (0.34)
                   Errors             13.80        (15.52)    13.38     (15.26)     14.12       (16.17) 12.97          (14.36)
                   Nodes              73.80        (15.52)    73.38     (15.26)     74.12       (16.17) 72.97          (14.36)
tional strategy (Take the Best) outperformed the other               the best of the options; it recycles earlier reasoning inher-
two.                                                                 ently. Nonetheless, ACE still needs to select from among
   The next class of problems on which we tested this ap-            the recognized options the one which is likely to be the
proach was <30, 8, .12, .5>, a somewhat easier set. Here             most productive, and Take the Best is one way to do that.
again, all three strategies achieved significant speedup,               On the problems of medium difficulty of <30, 8, .12,
this time without increasing the number of errors or the             .5>, fast and frugal reasoning achieves speedup because it
size of the search tree. Finally, we tested our approach on          avoids some repeated computation. It also does so without
a relatively easy class, <30, 8, .1, .5> (results not shown)         significantly introducing more error, because recognition
where no changes could be detected.                                  forces persistence by attempting to restrict ACE to previ-
                                                                     ously-chosen options. Even if these “recycled decisions”
                        Discussion                                   are wrong, there are simply not enough wrong ones to in-
                                                                     troduce many new retractions.
ACE is complete, that is, as constructed it is guaranteed to
                                                                        On the very difficult problems of <30, 8, .26, .66>,
solve any solvable CSP — eventually. Expertise, how-
                                                                     Take the Best introduces significantly less error and does
ever, requires that one solves problems efficiently. (All
                                                                     less work than the other fast and frugal strategies do. The
solutions to a CSP are defined to be equally good. When
                                                                     additional errors on these problems suggest that accurate
CSP researchers talk about optimal search, they refer one
                                                                     decision making here is more subtle and complex than a
that does the least work, as measured by propagation.)
                                                                     single heuristic can support, and certainly more than rec-
Although extensive computation can minimize, or even
                                                                     ognition alone can handle. Even without fast and frugal
eliminate, incorrect value selection, such computation
                                                                     methods, ACE makes more mistakes solving these prob-
may simply not be worth the time. Indeed, a solver that
                                                                     lems, simply because the problems are harder, Therefore
makes many inexpensive mistakes may actually arrive at
                                                                     there are more errors that may be recycled by recognition,
a solution more quickly, despite a somewhat larger search
                                                                     as well as simply more recognized options to choose
tree. In this sense, ACE is a satisficer — it makes “good
                                                                     from. Take the Best introduces significantly fewer errors
enough” decisions (Simon, 1981). Even when fast and
                                                                     because it uses ecological rationality to avoid recycling
frugal reasoning introduces additional error, the program
                                                                     some of them. Here again the speedup is achieved through
solves problems faster. Both satisficing and our imple-
                                                                     the tradeoff between inexpensive errors and savings in
mentation of recognition, it should be noted, are tolerable
                                                                     computation time.
only on problems where errors are relatively harmless.
                                                                        ACE’s version of recognition is not the situation-based
   The results of these experiments indicate that enhancing
                                                                     recognition described in (Klein & Calderwood, 1991). In
an intelligent and ecologically rational system with fast
                                                                     that work, particular features of a situation bring to mind
and frugal reasoning can save computation time, but is not
                                                                     possible solution approaches, approaches that may require
guaranteed to do so. Because recognition, as we have im-
                                                                     adaptation for the current situation. There, recognition
plemented it, is a consequence of previous errors on the
                                                                     may be paraphrased as “I was once in a similar situation
current problem, performance on these three problem
                                                                     where this sequence of decisions worked well, so I will
classes requires individual explanations. On the relatively
                                                                     see if I can adapt it to work again here, testing it first in
easy problems of <30, 8, .1, .5>, fast and frugal reasoning
                                                                     simulation.” ACE’s recognition, in contrast, may be para-
does not improve performance because there are not
                                                                     phrased as “I have seen that option before, considered it
enough retractions during search to support subsequent
                                                                     carefully (perhaps with different alternatives and in a
recognition.
                                                                     somewhat different context at the time), and have decided
   Fast and frugal reasoning that is also ecologically ra-
                                                                     to prefer it once again, without considering any potential
tional (i.e., Take the Best) provided more speed-up here
                                                                     consequences.” ACE’s recognition applies only to a sin-
than the other strategies. Recognition serves as a filter for
                                                                     gle decision, not to a sequence; it does not permit adapta-
                                                                355

tion; it makes no situation assessment; and it relates to        Crowley, K., & Siegler, R. S. (1993). Flexible Strategy
previous experience in the same problem.                          Use in Young Children's Tic-Tac-Toe. Cognitive Sci-
    To make use of fast and frugal reasoning, as we have          ence, 17(4), 531-561.
implemented it, a system needs to have a body of heuris-         Epstein, S. L. (1994). For the Right Reasons: The FORR
tics with which to make decisions and, if it is to take the       Architecture for Learning in a Skill Domain. Cognitive
best, it needs a metric on those heuristics. Furthermore,         Science, 18(3), 479-511.
since recognition, as we have interpreted it, requires deci-     Epstein, S. L. (1998). Pragmatic Navigation: Reactivity,
sions that are made under some erroneous circumstances            Heuristics, and Search. Artificial Intelligence, 100(1-2),
and then withdrawn (gray nodes in Figure 2), the system           275-322.
must not have perfected decision making, or there will be
                                                                 Epstein, S. L., Freuder, E. C., Wallace, R., Morozov, A.,
no prior, within-problem decisions to recycle. Thus, fast
                                                                  & Samuels, B. (2002). The Adaptive Constraint Engine.
and frugal reasoning can improve mediocre or even fairly
                                                                  In P. Van Hentenryck (Ed.), Proceedings of CP2002
reputable performance, but cannot improve flawless per-
formance, for without errors there can be no recognition.         (Vol. LNCS 2470, pp. 525-540). Berlin: Springer Ver-
                                                                  lag.
                                                                 Gent, I. E., MacIntyre, E., Prosser, P. and Walsh, T.
           Future Work and Conclusion
                                                                  (1996). The Constrainedness of Search. Proceedings of
Previously-made decisions are here recycled through the           the Thirteenth National Conference on Artificial Intelli-
recognition heuristic. Whether or not ACE would have              gence (pp. 246-252).
remade those decisions, and in the same sequence, with-          Gigerenzer, G., & Goldstein, D. G. (1996). Reasoning the
out recognition remains to be determined. Future work
                                                                  Fast and Frugal Way: Models of Bounded Rationality.
will examine ACE’s decisions at the same level but in dif-
                                                                  Psychological Review, 103(4), 650-669.
ferent branches of the search tree, with and without fast
                                                                 Gigerenzer, G., & Selten, R. (2001). Bounded Rationality:
and frugal reasoning.
   Although we did not use it in these experiments, ACE           The Adaptive Toolbox. MA: MIT Press.
can partition its tier-3 heuristics into any number of sub-      Gigerenzer, G., Todd, P. M. & The ABC Research Group
classes. We intend to compare ACE’s performance with              (1999). Simple Heuristics that Make Us Smart. NY: Ox-
different numbers of tier-3 subclasses to ACE’s perform-          ford University Press.
ance with Take the Best, which can be thought of as a            Goldstein, D. G. & Gigerenzer, G. (2002). Models of
“one heuristic to a subclass” partition.                          Ecological Rationality: The Recognition Heuristic. Psy-
   Fast and frugal reasoning has been shown here to have          chological Review, 109(1), 75-90.
a significant impact on an already competent CSP solver.         Klein, G. S., & Calderwood, R. (1991). Decision Models:
The premise that attractive options remain attractive as          Some Lessons from the Field. IEEE Transactions on
problem solving progresses enables at least this program          Systems, Man, and Cybernetics, 21(5), 1018-1026.
to solve problems better. Furthermore, the problems we           Kojima, T., & Yoshikawa, A. (1998). A Two-Step Model
have used here are sufficiently general to suggest that our       of Pattern Acquisition: Application to Tsume-Go. Pro-
results have a potentially broad impact. We are optimistic        ceedings of the First International Conference on Com-
that, in problem areas that tolerate errors, fast and frugal      puters and Games.
reasoning, as implemented here, can make an important            Mackworth, A. K. (1977). Consistency in Networks of
contribution to problem solving.                                  Relations. Artificial Intelligence, 8, 99-118.
                                                                 Novick, L. R., & Coté, N. (1992). The Nature of Exper-
                   Acknowledgments                                tise in Anagram Solution. Proceedings of the Fourteenth
This work was supported in part by NSF IIS-0328743 and            Annual Conference of the Cognitive Science Society,
by PSC-CUNY. Thanks for their support in this work go             Bloomington, IN.
to Gene Freuder, Anton Morozov, Rick Wallace, CUNY’s             Oppenheimer, D. M. (2003). Not so Fast! (and not so
ACE study group, and the Cork Constraint Computation              Frugal!): Rethinking the Recognition Heuristic. Cogni-
Centre, supported by Enterprise Ireland and Science               tion, 90, B1-B9.
Foundation Ireland.                                              Sabin, D., & Freuder, E. C. (1994). Contradicting Con-
                                                                  ventional Wisdom in Constraint Satisfaction. Proceed-
                        References                                ings of the Eleventh European Conference on Artificial
Bessière, C., & Régin, J.-C. (2001). Refining the basic           Intelligence, Amsterdam.
  constraint propagation algorithm. JFPLC, 1-13.                 Schraagen, J. M. (1993). How Experts Solve a Novel
Biswas, G., Goldman, S., Fisher, D., Bhuva, B., &                 Problem in Experimental Design. Cognitive Science,
  Glewwe, G. (1995). Assessing Design Activity in Com-            17(2), 285-309.
  plex CMOS Circuit Design. In P. Nichols & S. Chipman           Simon, H. A. (1981). The Sciences of the Artificial (sec-
  & R. Brennan (Eds.), Cognitively Diagnostic Assessment          ond ed.). Cambridge, MA: MIT Press.
  (pp. 167-188). Hillsdale, NJ: Lawrence Erlbaum.
                                                             356

