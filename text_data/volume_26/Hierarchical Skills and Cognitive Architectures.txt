UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Hierarchical Skills and Cognitive Architectures
Permalink
https://escholarship.org/uc/item/3fx4w5v9
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 26(26)
Authors
Langley, Pat
Cummings, Kirstin
Shapiro, Daniel
Publication Date
2004-01-01
Peer reviewed
 eScholarship.org                                 Powered by the California Digital Library
                                                                    University of California

                       Hierarchical Skills and Cognitive Architectures
                                     Pat Langley (langley@csli.stanford.edu)
                                Kirstin Cummings (kirstinc@ccrma.stanford.edu)
                                        Daniel Shapiro (dgs@stanford.edu)
                                         Computational Learning Laboratory, CSLI
                                          Stanford University, Stanford, CA 94305
                            Abstract                              Previous Research on Hierarchical Skills
   In this paper, we examine approaches to representing          A cognitive architecture (Newell, 1990) specifies the in-
   and utilizing hierarchical skills within the context of
   a cognitive architecture. We review responses to this         frastructure for an intelligent system, indicating those
   issue by three established frameworks â€“ ACT-R, Soar,          aspects of a cognitive agent that remain unchanged over
   and Prodigy â€“ then present an alternative we have de-         time and across different application domains. Many
   veloped within Icarus, another candidate architecture.        proposals for the human cognitive architecture take the
   Unlike most earlier systems, Icarus lets skills refer di-     form of a production system, which stores long-term
   rectly to their subskills and communicate within a single
   recognize-act cycle. This assumption has implications         knowledge as a set of condition-action rules, encodes
   for the number of cycles required to complete complex         short-term elements as declarative list structures, and
   tasks. We illustrate our approach with the domain of          relies on a recognize-act cycle that matches against,
   multi-column subtraction, then discuss related methods        and executes rules that alter, the contents of short-term
   and directions for future work in this area.
                                                                 memory. Soar, ACT-R, and EPIC are all examples of
                                                                 the production-system paradigm, although other archi-
            Introduction and Overview                            tectural frameworks are also possible.
Human skills are organized in a hierarchical fashion.               Despite the general agreement that cognitive skills are
There seems to be general agreement with this claim,             organized hierarchically, there exist different ways to im-
as it is consistent not only with experimental findings          plement this basic idea. Within a production-system ar-
about the execution and acquisition of skills, but also          chitecture, the most natural scheme involves communi-
with introspection about our everyday behavior. Upon             cation between skills and their subskills through the ad-
request, most people can describe their complex skills           dition of elements to short-term memory. For instance,
at successive levels of aggregation, whether these involve       ACT-R achieves this effect using production rules that
how they drive to work each day, how they cook a meal,           match against a generalized goal structure in their condi-
or how they write a technical article.                           tion sides, such as the desire to prove that two triangles
   What remains an open question is how we should                are congruent, and, upon firing, create new subgoals,
model such skill hierarchies in computational terms. Al-         such as the desire to prove that two lines have the same
ternative approaches to modeling cognition encode the            length. This approach requires the explicit addition of
notion of hierarchy in distinct ways that have different         goal elements to short-term memory, since this is the
implications for performance and learning. The most              only mechanism through which other production rules
interesting positions are those which are embedded in            can be accessed.
theories of the human cognitive architecture, such as               Soar takes a somewhat different approach to encoding
Soar (Laird et al., 1987), ACT-R (Anderson, 1993), and           hierarchical skills that relies on multiple problem spaces.
EPIC (Kieras & Meyer, 1997). These frameworks make               For instance, Jones and Laird (1997) report a detailed
strong commitments to both the mental representations            model of ying an aircraft in combat training scenarios.
of knowledge and to the processes that operate on them.          This system organizes its capabilities in a hierarchical
   In the pages that follow, we consider the challenge of        manner, with each node implemented as a Soar problem
modeling hierarchical skills within a unified theory of          space with associated states, operators, and goals. To
cognition. We begin with a brief review of three such ar-        invoke a lower-level problem space, the system adds a
chitectures and their responses to this issue, then turn to      new element to short-term memory that refers to that
Icarus, an alternative framework that approaches hier-           space, and it must take similar action in order to exit.
archical skills from a different perspective. The key issue      The details differ from those in ACT, but the passing of
involves whether one can traverse levels of a hierarchy          messages through short-term memory is similar.
within a single cognitive cycle. Our illustrative example           The Prodigy architecture (Minton et al., 1989) pro-
comes from a familiar cognitive skill that has a hierar-         duces cognitive behavior in yet another manner. The
chical organization â€“ multi-column subtraction â€“ but we          system represents knowledge about actions as Strips-
also consider other models that incorporate multi-level          like operators, and the central module utilizes means-
skills. We conclude by discussing related work and our           ends analysis to decompose problems into subproblems.
plans to extend the architectureâ€™s capabilities.                 This gives Prodigy the ability to generate hierarchical
                                                             779

structures dynamically for each problem it encounters,             Icarus skills bear a strong resemblance to production
and it can use control rules to select among candidate          rules, but they have an even closer kinship to the oper-
operators, states, and goals that determine the decom-          ators in Prodigy and Strips. Each skill has a name,
positions. However, these hierarchical structures do not        arguments, and some optional fields. These include:
remain in memory after a problem has been solved; in-             a :start field, which encodes the situation that must
stead, the system stores its experience in generalized con-         hold to initiate the skill;
trol rules that let it reconstruct them for new problems.         a :requires field, which must be satisfied throughout
Again, this requires adding explicit elements to short-             the skillâ€™s execution across multiple cycles; and
term memory that serve as mediators.
                                                                  an :effects field, which specifies the desired situa-
   Thus, despite their diversity, these three frameworks            tion the skill is intended to achieve.
share a basic assumption about how communication oc-
curs among skills and subskills. This tenet has implica-        For example, Table 1 shows a complete set of Icarus
tions for the cognitive behavior of systems cast within         skills for the domain of multi-column subtraction, includ-
them, including whether intermediate results are avail-         ing borrow, which has the objective of getting ?digit1
able, the time required to execute complex skills, and the      to be greater than ?digit2. This skill can start only if
effects of learning on hierarchical structure. We will see      ?digit2 is greater than ?digit1 and if a third element,
shortly that another response to this issue is possible.        ?digit3, is nonzero. Moreover, its execution requires that
                                                                ?digit1 be above ?digit2, that ?digit3 be in the top row,
          Hierarchical Skills in Icarus                         and that ?digit3 be left of ?digit1.
                                                                   In addition, each Icarus skill includes another field
Icarus (Choi et al., in press) is a cognitive architecture      that specifies how to decompose it into subskills or ac-
that shares some central features with its predecessors.        tions. This may be either:
For instance, it relies on symbolic list structures to en-
code information, and it makes a clear distinction be-            an :ordered field, which indicates the agent should
tween long-term and short-term memories, with the for-              consider the components in a specific order;
mer storing generic knowledge and the latter containing           an :unordered field, which identifies a choice among
specific beliefs. Moreover, Icarus assumes a recognize-             skill components; or
act cycle, which relies on matching patterns in long-term         an :actions field, in which a primitive skill specifies
memory against elements in the short-term store, to de-             one or more actions that are directly executable.
termine behavior over time. The framework also comes            For example, borrow states that one should invoke decre-
with a programming formalism for building knowledge-            ment on one digit and call add-ten on another, in that
based systems.                                                  order. These are both primitive skills that play the same
   However, Icarus has other characteristics that distin-       role as Strips operators in a traditional planning sys-
guish it from earlier frameworks in significant ways. One       tem, with their :start fields serving as preconditions
such feature is its commitment to embodied cognition,           and their :effects fields specifying the desired results
which requires that all symbols in Icarus programs be           of execution.
grounded in sensori-motor primitives.1 A second key as-            The table also clarifies that Icarus can specify mul-
sumption is that each long-term memory structure may            tiple ways to decompose each skill in this manner, much
have not only a symbolic description but also an as-            as a Prolog program can include more than one Horn
sociated numeric function that computes its value as a          clause with the same head. Different decompositions of
function of sensory attributes. A third novel feature is        a given skill must have the same name, number of ar-
that Icarus contains distinct long-term memories for            guments, and effects. However, they can differ in their
skills, which store its knowledge about action, and for         start conditions, requirements, and subskills. The skill
concepts, which specify its knowledge about states and          borrow has two such expansions, one for borrowing from
relations. Yet another contribution lies in the strong cor-     nonzero elements and another for borrowing across zero,
respondence between long-term and short-term memory,            which involves a recursive call to itself.
specifically that every element in the latter must be an           Each skill decomposition may also include a numeric
instance of some structure in the former.                       function that encodes the utility expected if it exe-
   A fifth important assumption, which is our focus here,       cutes this decomposition. This function is specified by a
is that hierarchical structures play a central role in cog-     :percepts field that matches against the values of ob-
nition. Although production systems and related archi-          jectsâ€™ attributes and a :value field that states an arith-
tectures allow hierarchies, many do not encourage them,         metic combination of these quantities. The expected
and we maintain that Icarus supports them in a sense            utility for a skill decomposition is a linear function of the
that is stronger and more plausible psychologically than        numeric descriptors matched by that skill. Such func-
do frameworks like ACT and Soar. To understand this             tions are not required when the available skills specify
claim, we must first examine the architectureâ€™s represen-       deterministic behavior, as do those in the table, but we
tation for skills and the relations among them.                 have used them in other domains and we mention them
    1                                                           here for completeness.
      Some recent architectural variants, like ACT-R/PM and
EPIC-Soar, incorporate sensori-motor modules, but these            We should note that Icarus also organizes its long-
were grafted onto systems based on theories of human prob-      term conceptual memory in a hierarchy, with higher-level
lem solving, whereas Icarus included them from the outset.      concepts being defined in terms of lower-level ones, which
                                                            780

   Table 1: Icarus skills for multi-column subtraction.         ecute. The elements in these memories are simple literals
                                                                but, because their predicates correspond to hierarchical
(subtract ()                                                    structures in long-term memory, they encode substantial
  :percepts ((digit ?digit))                                    information about the agentâ€™s beliefs and intentions.
  :requires ((top-row ?digit) (right-col ?digit))
  :unordered ((process ?digit))                                 Distinctive Aspects of Icarus Hierarchies
(subtract ()
  :requires ((processed ?digit1) (top-row ?digit2)              From the preceding discussion, it should be clear that
              (left-of ?digit2 ?digit1))                        Icarus utilizes a more structured representation of
  :unordered ((process ?digit2))                                knowledge than traditional cognitive architectures, but
(process (?digit)                                               the implications of this structure depend directly on the
  :ordered ((borrow ?digit)                                     processes that operate over them. Together, they enable
              (find-difference ?digit))                         cognitive processing that exhibits important differences
  :effects ((processed ?digit)))
                                                                from that in older frameworks.
(borrow (?digit1)
  :percepts ((digit ?digit2) (digit ?digit3))                      One such characteristic involves the ability of Icarusâ€™
  :start     ((greater ?digit2 ?digit1)                         skills to reference subskills by their names, rather than
              (nonzero ?digit3))                                through the indirect references used in Soar, ACT, and
  :requires ((above ?digit1 ?digit2)                            Prodigy. For example, the borrow skill in Table 1 calls
              (top-row ?digit3)                                 directly on decrement and add-ten. Icarusâ€™ approach
              (left-of ?digit3 ?digit1))
  :ordered ((decrement ?digit3)                                 has some aspects of subroutine calls in procedural pro-
              (add-ten ?digit1))                                gramming languages but, when combined with multiple
  :effects ((greater ?digit1 ?digit2)))                         expansions for each skill (such as two variants for bor-
(borrow (?digit1)                                               row), effectively embeds these calls within an AND/OR
  :percepts ((digit ?digit2) (digit ?digit3))                   search. This makes our formalism a close relative of
  :start     ((greater ?digit2 ?digit1)                         logic programming languages like Prolog, which uses a
              (zero ?digit3))
  :requires ((above ?digit1 ?digit2)                            very similar syntax to support logical reasoning. But like
              (top-row ?digit3)                                 other cognitive architectures, Icarus is concerned with
              (left-of ?digit3 ?digit1))                        agents that exist over time, so it situates these compu-
  :ordered ((borrow ?digit3))                                   tations within a recognize-act cycle.
  :effects ((greater ?digit1 ?digit2)))
                                                                   As a result, Icarus retains the overall avor of a pro-
(decrement (?digit)                                             duction system but gains the ability to invoke subskills
  :percepts ((digit ?digit val ?val))
  :start     ((nonzero ?digit))                                 directly, rather than through the creation of short-term
  :actions ((*cross-out ?digit)                                 memory elements. This lets it execute complex skills in
              (*decrement ?digit ?val))                         a top-down manner without having to descend through
  :effects ((crossed-out ?digit)))                              the hierarchy one step at a time. Icarus can take advan-
(add-ten (?digit1)                                              tage of this hierarchical organization without requiring
  :percepts ((digit ?digit1 val ?val1)                          the generation of explicit intermediate goal structures
              (digit ?digit2) (digit ?digit3))
  :start     ((above ?digit1 ?digit2)                           that are needed by production systems.
              (top-row ?digit3)                                    Recall that Icarus includes a short-term memory that
              (left-of ?digit3 ?digit1)                         contains skill instances the agent considers worth execut-
              (crossed-out ?digit3))                            ing. On each cycle, for each skill instance, the architec-
  :actions ((*add-ten ?digit1 ?val1))
  :effects ((greater ?digit1 ?digit2)))                         ture retrieves all decompositions of the general skill and
                                                                checks whether they are applicable. A skill is applica-
(find-difference (?digit1)
  :percepts ((digit ?digit1 col ?col val ?val1)                 ble if, for its current variable bindings, its :effects field
              (digit ?digit2 col ?col val ?val2))               does not match, the :requires field matches, and, if the
  :start     ((above ?digit1 ?digit2)                           system has not yet started executing it, the :start field
              (greater-or-equal ?digit1 ?digit2))               matches the current situation. Moreover, at least one of
  :actions ((*add-difference ?col ?val1 ?val2))                 its subskills must also be applicable. Since this test is
  :effects ((processed ?digit1)))
                                                                recursive, a skill is only applicable if there exists at least
                                                                one acceptable path downward to executable actions.
                                                                   For each such path, the architecture computes the ex-
ultimately connect to perceptual elements. The literals         pected value and selects the candidate with the highest
that appear in the :start, :requires, and :effects              utility for execution. For a given path, it uses the value
fields must be defined concepts, thus linking the skill and     function stored with each skill and the numeric values
conceptual memories in an interleaved manner. The ar-           matched in that skillâ€™s :percepts field to calculate the
chitecture also incorporates three short-term memories.         expected value at each level, summing the results along
These include a perceptual buffer, updated on each cycle,       the path to compute the overall score. For instance, for
that contains descriptions of perceived objects, a concep-      the path ((subtract), (process digit11), (borrow digit11),
tual short-term memory that contains inferences derived         (decrement digit21)), the system would sum the ex-
from the perceptual buffer, and an intention memory             pected value for all four levels to determine the utility
that contains instances of skills the system intends to ex-     of decrementing. This means that the same action can
                                                            781

have different values on a given cycle depending on which         this ordering, are not. Because decrement is a primitive
higher-level skill invokes it, providing a natural way for        skill, it becomes the terminal node for an acceptable path
the hierarchy to incorporate the effect of context.               through the skill hierarchy. Also, because this is the only
   The architecture treats a skill expansion differently          such path Icarus finds, it executes the instantiated ac-
depending on whether its components appear in an                  tions (*cross-out digit31) and (*decrement digit31 3).
:unordered set or an :ordered list. If they are un-                  These actions alters the environment and lead to an-
ordered, the module considers each of the subskills and           other execution cycle. This time Icarus again finds a
selects the one that yields the highest scoring subpath.          single acceptable path that shares all but the last skill
If they are ordered, it instead treats the list as a reactive     instance with that from the first round. The difference
program that considers each subskill in reverse order. If         is that digit31 has been crossed out, making (decrement
the final subskill is applicable, then it expands further         digit31) inapplicable but enabling the skill instance (add-
only down paths that include that subskill. Otherwise,            ten digit21). Again this is the only acceptable path
it considers the penultimate skill, the one before that,          through the hierarchy, so Icarus executes the action
and so forth. The intuition is that the subskills are or-         associated with this primitive skill, thus altering the sim-
dered because later ones are closer to the parent skillâ€™s         ulated display so that digit21â€™s value is increased by ten.
objective, and thus should be preferred when applicable.             On the third cycle, the architecture again finds only
   We should clarify that Icarusâ€™ consideration of alter-         one path, in this case ((subtract), (process digit11), (bor-
native paths through its skill hierarchy does not involve         row digit11), (decrement digit21)), since the top number
generative planning. On each cycle, the architecture              in the second column is no longer zero and can be safely
finds the best pathway through a set of exible but con-           decremented. This action enables execution of the path
strained structures. The process is much closer to the ex-        ((subtract), (process digit11), (borrow digit11), (add-ten
ecution of a hierarchical task network (e.g., Myers, 1999)        digit11)) on the fourth cycle, after which (on the fifth
than to the construction of a plan from primitive oper-           cycle) the model selects the path ((subtract), (process
ators. Such computation can be done efficiently within            digit11), (find-difference digit11)), which writes the two
a single recognize-act cycle, at least for well-structured        digitsâ€™ difference in the rightmost column.
skill hierarchies. One can craft Icarus programs that                This altered situation leads Icarus to add the infer-
are expensive to evaluate, but the same holds for pro-            ence (processed digit11), which on the sixth cycle causes
duction systems with complex conditions on their rules.           it to select the second expansion of subtract; this in-
                                                                  vokes the skill instance (process digit21) on the revised
             An Illustrative Example                              top digit in the second row. Because this digit has al-
                                                                  ready been incremented by ten, it is greater than the one
We can best clarify Icarusâ€™ operation with an exam-
                                                                  below it, so the skill instance (find-difference digit21) is
ple that uses the skills from Table 1 on the subtraction
                                                                  now applicable. Execution of this path produces an an-
problem 305 147. The system interacts with a simu-
                                                                  swer in the second column, which leads on the next cycle
lated environment that, on each cycle, deposits percep-
                                                                  to processing of the third column and to an answer there
tual elements such as (digit digit11 col 1 row 1 val 5)
                                                                  as well. No paths are satisfied on additional cycles, so the
and (digit digit12 col 1 row 2 val 7) into the percep-
                                                                  system idles thereafter, waiting for new developments.
tual buffer. A conceptual recognition process draws in-
ferences from these elements, such as (greater digit12
digit11) and (above digit11 digit12), which it adds to                            General Implications
conceptual short-term memory.                                     The sample trace above does not illustrate all of Icarusâ€™
   The model also begins with the single top-level in-            capabilities, since it ignores details about the conceptual
tention (subtract), which focuses cognitive behavior on           inference process and it does not utilize value functions.
the skills in the table even if others are present in long-       However, it should make clear that Icarus operates over
term memory. On the first cycle, the system would                 its skill hierarchy in a different manner than frameworks
consider both expansions of subtract, selecting the first         like Soar and ACT-R. They can model behavior on com-
one and binding ?digit to digit11, the object in the top          plex tasks in two distinct ways. One scheme assumes
row and right column. This skill instance would in turn           hierarchical rules or problem spaces, which require addi-
invoke (process digit11), which would consider its sub-           tional cycles for stepping downward through each level of
skills find-difference and borrow. Only the latter skill has      the hierarchy. Another assumes that learning has pro-
its :start and :requires fields met, specifically by its          duced compiled rules that eliminate the hierarchy and
second expansion, which handles situations that require           thus the need for intermediate goal structures. Such
borrowing from zero.                                              compilation methods have been used to explain both the
   This skill instance, (borrow digit11), then invokes            power law of learning and reduced access to subgoals
itself recursively, producing the call (borrow digit21),          (e.g., Neves & Anderson, 1981).
where the argument denotes the digit 0 in the top row                However, it seems unlikely that the hierarchical struc-
and second column. Because the digit to its left is               ture of skills disappears entirely with practice, and
nonzero, this instantiation can only utilize the first ex-        Icarus offers an account that avoids the above di-
pansion of borrow, which in turn calls on (decrement              chotomy. An architecture that traverses levels in a skill
digit31) in its :ordered field, since its preconditions are       hierarchy within a single recognize-act cycle also predicts
satisfied, but those for add-ten, which occurs later in           that intermediate structures will be inacessible, and the
                                                              782

power law follows from the construction of the hierarchy              Related Efforts and Future Research
itself, which we discuss later. This account also makes           Although Icarus incorporates a number of features that
different predictions than traditional schemes about the          distinguish it from typical cognitive architectures, some
number of cycles, and thus the time, required to accom-           related ideas have appeared elsewhere under different
plish tasks with hierarchical and recursive structures.           guises. For instance, our framework has much in com-
   Again, we can use multi-column subtraction to illus-           mon with the â€˜reactive planningâ€™ movement, which often
trate this point. A standard production-system model              utilizes hierarchical procedures that combine cognition,
for this domain, like that described by Langley and Ohls-         perception, and action in physical domains.2 Examples
son (1984), finds the difference between two numbers in           include PRS (Georgeoff et al., 1985), teleoreactive pro-
a column when the top one is larger but otherwise adds            grams (Nilsson, 1994), and the 3T robotic architecture
a goal to process or borrow from the adjacent column.             (Bonasso et al., 1997), and some case-based planners
Analysis reveals that such a model will take 5 Â· b + 2 Â· n        (e.g., Hammond, 1993) embody similar notions.
cycles to complete a problem with b columns that require             However, within this paradigm, only Freedâ€™s (1998)
borrowing and n columns that do not. In contrast, the             APEX has been proposed as a candidate architecture for
Icarus model in Table 1 requires 3Â·b+2Â·n cycles on the            human cognition. This framework shares Icarusâ€™ com-
same problems. The two frameworks both indicate that              mitment to hierarchical skills, but it has a more procedu-
solution time will increase with the number of borrow             ral avor and it does not incorporate a separate concep-
columns, but they predict quite different slopes.                 tual memory or enforce a correspondence between long-
   Experiments with human subjects should reveal which            term and short-term structures. Another kindred spirit
alternative offers a better explanation of skilled behavior       is Albus and Meystelâ€™s (2001) RCS architecture, which
in this arena. We have not yet carried out such stud-             organizes knowledge hierarchically and makes a clear dis-
ies, but to test our frameworkâ€™s generality, we have de-          tinction between logical structures and value judgments.
veloped Icarus models for behavior in other domains               Icarus and RCS share many common features, but they
that appear to have hierarchical organizations. One in-           also retain many differences due to their origins in cog-
volves the well-known Tower of Hanoi puzzle, which can            nitive modeling and control theory, respectively.
be solved using a hierarchical strategy. Our model for               We should clarify that, as a cognitive architecture,
behavior on this task includes three primitive skills for         Icarus still requires some development. The framework
lifting, lowering, and moving a disk sideways, along with         lacks many processing assumptions that would make it
one high-level skill for moving a disk to a target peg that,      more plausible as a general theory of human behavior.
in two expansions, calls itself recursively. However, the         For instance, it lacks any limits on perceptual bandwidth
Tower of Hanoi is like subtraction in that the environ-           that require attention, which arises even on routine tasks
ment changes only when the agent takes some action.               like subtraction. We intend to model such behavior by
   To ensure that Icarus can also support behavior in             introducing an action that focuses the agentâ€™s attention
more dynamic domains, we have developed two addi-                 on an object and deposits its description in the percep-
tional models. One involves hierarchical skills for bal-          tual buffer, with Icarus being able to apply this action
ancing an upright pole by moving its lower end back               to only one visible object per cycle. This should produce
and forth. This system includes two high-level skills with        longer subtraction runs that require additional steps for
knowledge about the order in which the four primitive             attentional events, much as in Anderson, Matessa, and
skills should be invoked. As described elsewhere (Choi            Lebiereâ€™s (1997) ACT-R model of visual attention.
et al., in press), we have also constructed a system that            We should also extend our models for subtraction
drives a vehicle and delivers packages in a simulated in-         and other domains to handle lower levels of behavior
city environment. This model includes 46 skills that are          more faithfully. The skills in Table 1 terminate with ac-
organized in a hierarchy five levels deep. The high-level         tions for decrementing, adding ten, and finding a differ-
skills let the agent drive straight in lanes, get into right-     ence, but these can be further decomposed into subskills
most lanes, slow for intersections, drive through inter-          for writing specific digits and even drawing individual
sections, turn at intersections, and make U turns. These          lines. Our claim to model embodied cognition would be
terminate in actions for changing speed and altering the          stronger if we extended the skill hierarchy downward in
wheel angle. Another 13 skills support the delivery of            this fashion. We should also extend the hierarchy up-
packages to target addresses.                                     ward to model choices about which problem to tackle
                                                                  when many are present on the page. Such an expanded
   We have not attempted to compare the details of these          system would model subtraction behavior in a more com-
systemsâ€™ operations to human behaviors on the same                plete way than do most accounts.
tasks. Nor have we attempted to show that Icarus pro-
                                                                     However, a more important omission concerns the ori-
duces more robust behavior than programs cast in earlier
                                                                  gin of Icarusâ€™ hierarchical skills. To handle this, we
frameworks like Soar and ACT-R. Rather, our goal has
                                                                  hypothesize a mechanism that is related to chunking in
been to demonstrate the same broad functionality as we
                                                                  Soar and production composition in earlier versions of
observe in humans, including their apparent organization
                                                                  ACT. Although humans prefer to use routine behav-
of complex skills into hierarchies. We have also aimed to
                                                                  iors when possible, they can, within limits, combine
show that Icarus constitutes a viable point in the space
of cognitive architectures, which we believe has been too            2
                                                                       Our model of subtraction skills also has similarities to
thinly explored to date.                                          VanLehnâ€™s (1990) hierarchical treatment of this domain.
                                                              783

knowledge elements when needed to solve novel prob-             Choi, D., Kaufman, M., Langley, P., Nejati, N., &
lems. Means-ends analysis has been implicated in such             Shapiro, D. (in press). An architecture for persistent
situations, so we plan to incorporate this method into            reactive behavior. Proceedings of the Third Interna-
future versions of the architecture. The generalized re-          tional Joint Conference on Autonomous Agents and
sults of means-ends problem solving would be cached               Multi-Agent Systems. New York: ACM Press.
as a new skill. However, unlike chunking and composi-           Freed, M. (1998). Managing multiple tasks in complex,
tion, which produce at rules that eliminate structure,            dynamic environments. Proceedings of the National
Icarus would store a new hierarchical skill that refers           Conference on Arti cial Intelligence (pp. 921â€“927).
to the original ones as components. This method should            Madison, WI: AAAI Press.
lead to the construction of skill hierarchies in a gradual,
bottom-up manner as an agent learns about a domain.             Georgeff, M., Lansky, A., & Bessiere, P. (1985). A pro-
                                                                  cedural logic. Proceedings of the Ninth International
                Concluding Remarks                                Joint Conference on Arti cial Intelligence. Los Ange-
                                                                  les: Morgan Kaufmann.
In closing, we should review the main claims we have
made about hierarchical skills and their treatment within       Hammond, K. (1993). Toward a theory of agency. In S.
various cognitive architectures. There seems to be gen-           Minton (Ed.) Machine learning methods for planning.
eral agreement that skills are organized in some hierar-          San Francisco: Morgan Kaufmann.
chical fashion, but most existing models implement the          Jones, R. M., & Laird, J. E. (1997). Constraints on
invocation of subskills through goal structures that are          the design of a high-level model of cognition. Proceed-
deposited in short-term memory. In contrast, Icarus               ings of the Nineteenth Annual Conference of the Cog-
produces hierarchical behavior by letting skills commu-           nitive Science Society (pp. 358â€“363). Stanford, CA:
nicate directly with their subskills, as in procedural lan-       Lawrence Erlbaum.
guages and logic programming formalisms.                        Kieras, D., & Meyer, D. E. (1997). An overview of the
   We illustrated this idea by presenting an Icarus               EPIC architecture for cognition and performance with
model for multi-column subtraction and tracing its be-            application to human-computer interaction. Human-
havior on a specific problem. We saw that this system             Computer Interaction, 12 , 391â€“438.
takes the same basic steps as a production-system model,        Laird, J. E., Newell, A., & Rosenbloom, P. S. (1987).
but that steps involved in traversing the skill hierar-           Soar: An architecture for general intelligence. Arti -
chy occur within a single recognize-act cycle rather than         cial Intelligence, 33 , 1â€“64.
across successive cycles. This theoretical difference leads
to different predictions about the time required to exe-        Minton, S., Carbonell, J. G., Knoblock, C. A., Kuokka,
cute complex skills. Future research should test these            D., Etzioni, O., & Gil, Y. (1989). Explanation-based
predictions and extend Icarus to incorporate mecha-               learning: A problem solving perspective. Arti cial
nisms for attention and construction of skill hierarchies.        Intelligence, 40 , 63â€“118.
                                                                Myers, K. L. (1999). CPEF: A continuous planning and
                 Acknowledgements                                 execution framework. AI Magazine, 20 , 63â€“70.
This research was funded in part by Grant IIS-0335353           Newell, A. (1990). Uni ed theories of cognition. Cam-
from the National Science Foundation, by Grant NCC                bridge, MA: Harvard University Press.
2-1220 from NASA Ames Research Center, and by Grant             Nilsson, N. (1994). Teleoreactive programs for agent
HR0011-04-1-0008 from Rome Labs. Discussions with                 control. Journal of Arti cial Intelligence Research,
Stephanie Sage, David Nicholas, and Seth Rogers con-              1 , 139â€“158.
tributed to many of the ideas presented in this paper.
                                                                Neves, D. M., & Anderson, J. R. (1981). Knowledge
                       References                                 compilation: Mechanisms for the automatization of
                                                                  cognitive skills. In J. R. Anderson (Ed.), Cognitive
Albus, J. S., & Meystel, A. M. (2001). Engineering of             skills and their acquisition. Hillsdale, NJ: Lawrence
   mind: An introduction to the science of intelligent sys-       Erlbaum.
   tems. New York: John Wiley.
                                                                Langley, P., & Ohlsson, S. (1984). Automated cognitive
Anderson, J. R. (1993). Rules of the mind . Hillsdale,
                                                                  modeling. Proceedings of the Fourth National Confer-
   NJ: Lawrence Erlbaum.
                                                                  ence on Arti cial Intelligence (pp. 193â€“197). Austin,
Anderson, J. R. Matessa, M., & Lebiere, C. (1997).                TX: Morgan Kaufmann.
   ACT-R: A theory of higher level cognition and its ap-
   plication to visual attention. Human-Computer Inter-         Shapiro, D., Langley, P., & Shachter, R. (2001). Using
   action, 12 , 439â€“462.                                          background knowledge to speed reinforcement learn-
Bonasso, R. P., Firby, R. J., Gat, E., Kortenkamp, D.,            ing in physical agents. Proceedings of the Fifth In-
   Miller, D., & Slack, M. (1997). Experiences with an            ternational Conference on Autonomous Agents (pp.
   architecture for intelligent, reactive agents. Journal         254â€“261). Montreal: ACM Press.
   of Experimental and Theoretical Arti cial Intelligence,      VanLehn, K. (1990). Mind bugs: The origins of proce-
   9 , 237â€“256.                                                   dural misconceptions. Cambridge, MA: MIT Press.
                                                            784

