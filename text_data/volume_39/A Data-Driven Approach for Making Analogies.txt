                               A Data Driven Approach for Making Analogies
                                                        Mei Si (sim@rpi.edu)
                                Department of Cognitive Science, Rensselaer Polytechnic Institute
                                                          Troy, NY 12180 USA
                                                 Craig Carlson (carlsc2@rpi.edu)
                                Department of Computer Science, Rensselaer Polytechnic Institute
                                                          Troy, NY 12180 USA
                             Abstract
   Making analogies is an important way for people to explain          mapped to a tree or a road depending on the purpose of
   and understand new concepts. Though making analogies is             making the analogy.
   natural for human beings, it is not a trivial task for a dia-          Many cognitive theories have been proposed for ex-
   logue agent. Making analogies requires the agent to estab-          plaining how people form analogies (Keane, 2012; Ku-
   lish a correspondence between concepts in two different             bose, Holyoak, & Hummel, 2002; Larkey & Love, 2003).
   domains. In this work, we explore a data-driven approach            Structure-Mapping Theory (SMT) is one of most influen-
   for making analogies automatically. Our proposed approach
                                                                       tial theories for analogies and has been supported by a
   works with data represented as a flat graphical structure,
   which can either be designed manually or extracted from In-         number of empirical studies using human subjects
   ternet data. For a given concept from the base domain, our          (Falkenhainer, Forbus, & Gentner, 1989; Gentner, 1983;
   analogy agent can automatically suggest a corresponding             Gentner & Smith, 2012). According to SMT, an analogical
   concept from the target domain, and a set of mappings be-           mapping is created by establishing a structural alignment
   tween the relationships each concept has as supporting evi-         of relationships between two sets of concepts (in two dif-
   dence. We demonstrate the working of this algorithm by              ferent domains). The closer the structural match is, the
   both reproducing a classical example of analogy inference           more optimal the inferred analogy will be.
   and making analogies in new domains generated from                     One of the main challenges of implementing SMT is its
   DBPedia data.
                                                                       computational complexity. Many researchers have pointed
   Keywords: creativity; analogy; intelligent agents
                                                                       out that the computational time of establishing the mapping
                                                                       is intractable. Heuristics and alternative theories have been
                         Introduction                                  developed to form analogies and cut down the computa-
                                                                       tional time. Holyoak and Thagard’s Multiconstraint Theory
This work proposes a data-driven approach for dialogue                 reduces analogy inference to a constraint satisfaction prob-
agents to make analogies between concepts. Analogies                   lem (1989). (Forbus & Oblinger, 1990; Grootswagers,
describe the comparative relationships between two sets of             2013; van Rooij, 2008; Wareham, Evans, & van Rooij,
concepts, i.e. concepts A and B are related in a similar way           2011) have all worked on creating heuristics for speeding
to how concepts C and D are related. Analogies are widely              up the structural mapping process.
used in writings and dialogues for explaining new concepts                Another challenge comes from applying SMT or other
or for making the narration more vivid and more interest-              similar theories to dialogue agents. They typically require a
ing. Typically, one set of concepts is more familiar to the            hierarchical relationship structure in the data. For example,
audience than the other. Analogies can, therefore, help the            the analogy between the solar system and the Rutherford
audience understand concepts in unfamiliar domains.                    model is a classic example used in computational models
   Though making analogies is natural for human beings, it             of analogy. Figure 1 is taken from (Falkenhainer, Forbus,
is not a trivial task for dialogue agents. There are at least          and Gentner, 1989) for illustrating the solar system do-
two challenges associated with this task. One is how to                main. For representing this domain, SMT prefers to know
find out and represent what people know about a domain.                not only the relationships between the concepts, e.g. the
The other is the computational complexity of establishing              planet revolves around the sun, the sun’s mass is greater
mappings between two domains. Both challenges become                   than the planet’s mass, and the sun attracts the planet but
more significant when the domains the agent tries to make              also the relationships among relationships, i.e. the latter
analogies with are not defined explicitly. For example, it is          two relationships are the cause for the first one. When de-
much harder to represent what people know about music                  signing virtual characters with automatically generated or
genres than linear algebra. There is both more uncertainty             crowd-sourced dialogue content, we often do not have such
and more information in the first case. In addition, there             hierarchical information. The alternative is to design con-
may be multiple good mappings between the concepts in                  tent solely by hand, which creates a huge authoring burden.
the two domains. For example, one’s life can both be                   This challenge is particularly significant when we study
                                                                  3155

analogy inference not only for understanding human cogni-          as a node with a unique ID. The nodes are linked to each
tion but also for procedurally generating dialogues for vir-       other by their relationships, and thus form a directed graph.
tual characters.                                                      We will demonstrate the application of our algorithm us-
                                                                   ing two examples. The first one makes analogies between
                                                                   the solar System and the Rutherford model. This example
                                                                   has been discussed extensively by Gentner et al. (see
                                                                   (Falkenhainer, Forbus, & Gentner, 1989; Gentner, 1983)
                                                                   for more detailed descriptions of the example.) Figure 2
                                                                   shows the solar system represented as a knowledge graph
                                                                   in our system. Because we don’t use hierarchical relation-
                                                                   ships in our data representation, the higher-level relation-
                                                                   ships, such as “And” and “Cause” in Figure 1 are lost.
                                                                   However, the relationships between each pair of concepts,
                                                                   such as “Attracts” and “Revolve” are kept. We created a
                                                                   new relationship “More massive” for representing the
                                                                   sun’s mass is greater than the planet. Our representation
                                                                   does not use attributes and functions. For attributes, we
                   Figure 1: Solar System                          converted them into a relationship the concept has with
                                                                   another concept, e.g. the sun has a relationship with a con-
                                                                   cept called Yellow. Currently, we don’t have a correspond-
   In this work, we experiment with loosening up the con-          ing encoding for SMT’s concept of function in our system.
straints on input data and using a flat graphical structure
for representing the agent’s knowledge, i.e. our proposed
algorithm only needs to know the relationships between
each pair of concepts. Instead of mapping the structures of
the relationships, we seek to map the type of relationships
from one domain to another. This algorithm is completely
data driven; there is no manually designed mapping rule.
Our algorithm generates comparable results with SMT
when being applied to a classical analogy inference exam-
ple. We also demonstrate applying the algorithm to larger
domains that were automatically generated by crawling
data from DBpedia (Bizer, Lehmann, Kobilarov, Auer,                  Figure 2: Solar System without Hierarchical Relationship
Becker, Cyganiak, & Hellmann, 2009).                                                          Structure
   The results from the analogy-making module will be in-
tegrated into an automated narrative agent we developed
for making presentations using data gathered through                  The first example only contains about a dozen concepts.
crowdsourcing or from the Internet (Si, Battad, & Carlson,         For examining how well our algorithm scales up, we creat-
2016). The success of this project will contribute greatly to      ed a second set of example domains which are much larg-
creating interesting dialogues and computational creativity.       er. One domain is about music genres, and the other is
The analogy-making module is self-contained, and the de-           about programming languages. In this work, we used Wik-
tails of the presentation agent are skipped in this paper. In      ipedia data as the base of knowledge. The two domains are
the next sections, we will first describe our input data’s         generated by crawling for information from DBpedia using
format and example domains. Then, we will present our              a tool we developed in the lab. The tool uses one or more
analogy-making algorithm, and results generated by this            DBpedia entries as the starting points and iteratively ex-
algorithm, followed by discussions and future work.                panding the graph by including neighbors of the entries
                                                                   that are already in the graph.
 Example Domains and Knowledge Represen-                              Each entry in DBpedia is converted to a node in our
                                                                   knowledge graph and represents a unique concept. The
                           tation                                  type of link between them in DBpedia becomes the rela-
We want to use a knowledge representation that is both             tionship link in our data. These domains are significantly
compatible with structured data, such as the results from          larger than the ones in the first example. The music genres
querying DBpedia, and is intuitive enough for non-                 domain contains 999 nodes and 6418 relationships. The
technical authors to manually design and edit the                  programming language domain contains 2589 nodes and
knowledge base. We use a XML format that encodes                   9952 relationships. Figure 3 shows part of the data from
knowledge as a directed graph. Each concept is represented         the music domain.
                                                              3156

                                                                   Algorithm 1 Index_Relationship_Type (domain):
                                                                   loss, gain, same, diff, index = {} # empty dictionar-
                                                                   ies
                                                                   # n: concept; r: relationship; d: destination concept
                                                                   of r
                                                                   for each n in domain do
                                                                      for each r, d of n do
                                                                         # compare n’s relationships with d’s relation-
                                                                      ships
                                                                         loss[r] += n.relationship - d.relationship
                                                                         gain[r] += d.relationship - n.relationship
                                                                         same[r] += Common(n.relationship, d.relationship)
                                                                         diff[r] += Difference(n.relationship,
                                                                                                  d.relationship)
                                                                      end for
                 Figure 3: Music Genre Data                        end for
                                                                   for each r in domain do
                                                                      index[r] = (Jaccard_index(loss[r], gain[r]),
                  Proposed Approach                                                 Jaccard_index(loss[r], same[r]),
                                                                                    Jaccard_index(loss[r], diff[r]),
In this work, our main objective is to provide a dialogue                           Jaccard_index(gain[r], same[r]),
agent or a game character a tool for conducting richer and                          Jaccard_index(gain[r], diff[r]),
                                                                                    Jaccard_index(same[r], diff[r]))
more interesting dialogues, or for making explanations for         end for
a new concept to the user. We hope to help create dia-             return index
logues that are creative and innovative. Therefore, different
from most existing work on analogy inference, we do not               Algorithm 1 creates a vector of size 6 for describing
necessarily need to find the best analogy we can make giv-         each relationship type in a domain. Inspired by the struc-
en the two domains. Instead, we want to be able to make            tural mapping process in SMT, here we argue two relation-
analogies that are interesting and explainable. Furthermore,       ship types are similar if they are always used in similar
the computation needs to complete in a reasonable amount           contexts. Because we don’t have the relational structure for
of time.                                                           providing a context, we operationally defined the context
   Our proposed algorithm follows the same philosophy as           as the origin and the destination concepts linked by the
SMT in that we want to find mappings between concepts              relationship, and we judge the similarity of these two con-
and relationships that are supported by mappings between           cepts by looking at the differences between the relation-
other concepts and relationships. In other words, we want          ships they have and what they share in common. For ex-
all of the mappings to be consistent with each other. Our          ample, for the relationship “Hotter than” in Figure 2, n is
algorithm seeks to achieve these goals while working with          Sun and d is Planet. The loss set, in this case, equals to
large and uniformly structured data.                               [“More massive”, “Is”]. It contains all the relationships the
   More specifically, instead of trying to map a relationship      Sun has, but the Planet does not have. If “Hotter than” also
structure, we seek to map relationship types from one do-          links other concepts in the knowledge base, the loss set
main to another. These mappings are supported by the sim-          will be appended every time this relationship is used. The
ilarities in the concepts being linked to, and the relation-       gain set contains all the relationships the destination con-
ships related to those concepts. Because our data is large         cept has, but the origin concept doesn’t. The same set con-
and not manually designed, there may not be a single map-          tains all the relationships the origin and the destination
ping that is better than all the alternatives. Instead, there      concepts have in common, and diff contains all the rela-
may be multiple good candidates. Therefore, instead of             tionships that are either in loss or gain. Currently, we are
looking for the best mapping for all possible hypotheses           only using the measurements that represent the results of
between the concepts and the relationships in the base and         basic set operations, i.e. complement, intersection, sym-
destination domains, we seek to find the best analogy we           metric and difference. As part of our future work, we will
can make just about a single concept.                              be looking for other measurements that can help with dif-
   Algorithms 1-4 contain the pseudo code for our pro-             ferentiating the relationship types.
posed algorithm. On a high level, it works in two steps: 1)           For each relationship type, Algorithm 1 aggregates the
computes a unique index for each concept and each rela-            results from every time it is used in the domain. The sec-
tionship type. This index can be used for comparing the            ond for-loop converts the information in the four sets, i.e.
similarities between two concepts or two relationship              loss, gain, same and diff into a one-dimensional vector by
types; 2) generates and evaluates the hypotheses of map-           calculating the Jaccard indices between them. We used
ping a concept in the base domain to a concept in the target       Jaccard index because it can provide a numerical meas-
domain.                                                            urement of the similarities between two sets.
                                                              3157

Algorithm 2 Get_Node_Index (n,rtype_index):                        end for
                                                                   return hypotheses
# rtype_index: the relationship indexes computed by
Algorithm 1
# n: concept; r: relationship                                         Similar to SMT, we want the mappings to be unambigu-
tmpv = (0,0,0,0,0,0) # a zero vector                               ous. We used a greedy algorithm to resolve the conflicts in
for each r of n do
   tmpv += rtype_index[r]                                          the hypotheses. In case there are hypotheses for both map-
end for                                                            ping (r1, d1) to (r2, d2), and to (r3, d3) in the destination
return Normalize(tmpv)                                             domain, we simply accept the best -- the mapping that has
                                                                   the highest score -- hypotheses first, and reject any subse-
   Based on the relationship indices computed by Algo-             quent mappings that intend to revise an existing one (Algo-
rithm 1, Algorithm 2 returns an index for a concept. Simi-         rithm 4).
larly, this index will be used for computing the difference
between two concepts in the knowledge network. We used             Algorithm 4 Map_Relationships(hypotheses):
a simple heuristic here: a concept’s index is decided by the       map = {}
sum of the index values of all the relationships it has. This      # sort the hypotheses based on normalized_score
                                                                   hypotheses.Sort_Descending()
value is then normalized to a unit vector.                         for each h in hypotheses do
   Finally, Algorithm 3 generates and tests the matching              # ensure a one-to-one mapping
hypotheses, and Algorithm 4 creates a one-to-one mapping              if both h.r1 and h.r2 are not mapped then
between all the relationships a concept n has in the base                # map r1 in base to r2 in destination
                                                                         map[r1] = r2
domain to the relationships in the target domain. With this           end if
mapping, it is straightforward to find the concept in the          end for
target domain that has the most mapping relationships with         return map
n.
   For establishing the mapping, Algorithm 3 generates all
the possible hypotheses of mapping the relationships and                     Example Results and Discussion
destinations (r1, d1) associated with n to another pair of         The proposed algorithm has been applied to making analo-
relationship and destination (r2, d2) in the destination do-       gies in the two example scenarios described in the Exam-
main. For evaluating the quality of this mapping, Algo-            ple Domains and Knowledge Representation section.
rithm 3 looks at both how different the two relationships
(r1 and r2) are -- rdiff, and how different the two destina-
tions (d1 and d2) are -- ndiff. The difference here is given
                                                                   The Solar System and the Rutherford Model
by the cosine similarity between the two vectors. These            For making analogies between the solar system and the
two difference values are combined. The smaller the over-          Rutherford model, we obtained perfect results. Our algo-
all difference is, the stronger the mapping is. The variable       rithm correctly generated the mapping between the Nucle-
“hypotheses” contains the list of all the hypotheses and           us and the Sun, and between the Electron and the Planet.
their strengths.                                                   Our algorithm does not produce mapping relationship
                                                                   structure for supporting the analogy. Instead, it produces
Algorithm 3 Generate_Hypotheses(n, B, T):                          matching pairs of relationships and destination concepts.
# B: base domain                                                   Tables 1 and 2 list the evidence for these two mappings.
# T: destination domain
hypotheses = [] # hypotheses for mapping                                   Table 1: Mappings between Nucleus and Sun
rtype_index = Index_Relationship_Type(B, T)
# index for source node
                                                                        Nucleus                           Sun
svec = Get_Node_Index(n, rtype_index)                                  (Attracts, Electron)              (Attracts, Planet)
for each node t in T do                                                (Distance, Electron)              (Distance, Planet)
   # index for candidate node                                          (Has, Electric charge)            (Has, Mass)
   cvec = Get_Node_Index(t, rtype_index)
   for each r2, d2 of t do                                             (More massive than, Electron)     (Hotter than, Planet)
      for each r1, d1 of n do
         rdiff = Cosine_Similarity(rtype_index[r1],                   In Table 1, all the mappings except the last one are
                                rtype_index[r2])                   straightforward. We checked the intermediate results. The
         d1vec = Get_Node_Index(d1, rtype_index)
         diff1 = svec - d1vec                                      last mapping was an artifact. (Hotter than, Planet) and
         d2vec = Get_Node_Index(d2, rtype_index)                   (More massive than, Planet) received the same score, and
         diff2 = cvec - d2vec                                      the system did not know how to break the tie. All the map-
         ndiff = Cosine_Similarity(diff1, diff2)                   pings in Table 2 are consistent with the original example.
         normalized_score = (rdiff + ndiff)/2
         hypotheses.Append(normalized_score,r1,d1,r2,d2)
                                                                   We are quite encouraged to get this result without the need
      end for                                                      of using data with hierarchical relationships. We believe
   end for                                                         the flat concept-relationship structure we designed in Fig-
                                                              3158

ure 2 is friendlier to both human designers and automated             Interestingly, we also asked the system to make an anal-
programs that convert data from other sources.                     ogy about the programming language Python, and the sys-
                                                                   tem responded with Hardcore Punk. Table 4 provides the
                                                                   matching relationships for this analogy.
       Table 2: Mappings between Electron and Planet
                                                                      Most of the relationship mappings in Table 4 are reason-
   Electron                         Planet                         able. For example, we can say “Python influenced F Sharp,
   (Attracts, Nucleus)             (Attracts, Sun)                 Ruby, and Swift just like Black Metal, Thrash Metal, and
   (Distance, Nucleus)             (Distance, Sun)                 Industrial Metal are derivatives of Hardcore Punk.”
   (Has, Electric charge)          (Has, Mass)
   (Revolves around, Nucleus)      (Revolves around, Sun)               Table 4: Mapping Relationships between Python and
                                                                                           Hardcore Punk
                                                                                Python              Hardcore Punk
                                                                                Influenced          Derivative
Music Genres and Programming Languages
                                                                                Influenced by       Stylistic origin
Making analogies between these two domains generated                            Operating system Instrument
some interesting results, and inspired us with directions for                   Paradigm            Format
future work. These domains are much larger than the solar
system and the Rutherford model. In our evaluation, the
                                                                      The most interesting part of this example is the assertion
typical running time is less than a second on a Lenovo
                                                                   that Python is influenced by Perl in the same way as the
T430 laptop. We will discuss two pieces of example results
                                                                   stylistic origin of Hardcore Punk is Punk Rock (and hence
below.
                                                                   Hardcore Punk is influenced by Punk Rock). This goes
                                                                   against the previous analogy of Punk Rock being compara-
  Table 3: Mapping Relationships between Punk rock and
                                                                   ble to LPC, since Python is not influenced by LPC. We
                               LPC
                                                                   think this shows the weakness of our approach. Without
              Punk Rock             LPC                            the hierarchical relationship information which in fact pro-
              Music fusion genre Influenced                        vides a global structure of the data, our algorithm does not
              Stylistic origin      Influenced by                  do a good job in creating analogies that are globally con-
              Instrument            Paradigm                       sistent. However, the analogies are still locally consistent
                                                                   for a given topic because of Algorithm 4.
   In the first example, the system mapped the music genre            Another thing to note is the difference in mapping be-
Punk Rock to the programming language LPC. Because of              tween Instrument and Paradigm. In Table 3, “Instrument”
space limitation, in Table 3 we only list the matching rela-       is mapped to “Paradigm”, but in Table 4, “Instrument” is
tionship types the system provided for this analogy. Two of        mapped to “Operating system.” LPC does not have a rela-
these mappings are quite reasonable. By mapping “Stylistic         tionship of the type “Operating system”, so no mapping
origin” to “Influenced by”, the system provided us support-        could have been made. Table 4 indicates that “Instrument”
ing evidence such as “the stylistic origin of Punk Rock is         is more analogous to “Operating system” than to “Para-
Garage Rock, Glam Rock, and Surf Music, just like LPC is           digm.” As mentioned before, our system cannot enforce
influenced by Lisp, Perl, and C.” By mapping “Music fu-            global consistency yet. Realistically, however, it’s hard to
sion genre” to “Influenced”, the system provided corre-            say which is truly correct in this case. A similar phenome-
sponding supporting evidence “Celtic Punk is a music fu-           non can be observed with “Influenced” and “Music fusion
sion genre of Punk Rock, just like LPC influenced Pike.”           genre” in Table 3. This time in Table 4, “Influenced” is
Intuitively, these two examples make sense. Music genres           mapped to “Derivative” because the match is better, not
that are influenced by other music genres have their styles        because Hardcore Punk lacks that relation type. In Table 4,
originating from those genres. The inverse works as well;          mappings from “Influenced” to “Music fusion genre” are
if genre A is a music fusion genre for genre B, then A in-         ignored because a one-to-one mapping of relation types is
fluenced B. The system was able to equate these relation           enforced by the algorithm. Currently, one-to-one mappings
types without any explicit help.                                   must be enforced in order for coherent analogies to be
   The mapping from “Instrument” to “Paradigm” isn’t as a          made. However, there are cases when using many-to-one
clear cut as the other mappings. The evidence provided is          mappings is more suitable. This is especially true when
“the relationship between Punk rock and Bass guitar or             using crowd-sourced data or data from the Internet where
Electric guitar is Instrument, just like the relationship be-      sometimes the only real difference in relationship type is
tween LPC and Procedural programming and Functional                semantics (e.g. “Instrument” / “Instruments”).
programming is Paradigm.” This assertion isn’t inherently
wrong. However, to a human observer this mapping may
not seem intuitive enough.
                                                              3159

                       Future Work                                                            References
We have planned future work both in the direction of im-             Bizer, C., Lehmann, J., Kobilarov, G., Auer, S., Becker, C.,
proving our algorithms for finding better mappings and                 Cyganiak, R., & Hellmann, S. (2009). DBpedia-A crys-
discovering more creative uses of the algorithms.                      tallization point for the Web of Data. Web Semantics:
   First of all, we want to address the issue of the agent             science, services and agents on the world wide
sometimes creating conflicted mappings between two pairs               web, 7(3), 154-165.
of concepts. When working with a large data set, exclu-              Falkenhainer, B., Forbus, K., & Gentner, D. (1989). The
sively checking all the possible conflictions would be very            structure-mapping engine: Algorithm and examples. Ar-
time-consuming. Instead, we plan to develop a greedy so-               tificial Intelligence, 41, 1–63.
lution. When the agent needs to make a new analogy, it               Forbus, K., & Oblinger, D. (1990). Making SME greedy
will assume all the relationship mappings it used to support           and pragmatic. Proceedings of the 12th Annual Confer-
its previous analogies are already true. This way, instead of          ence of the Cognitive Science Society (pp. 61–68).
asking two separate questions of “what is LPC like” and
                                                                     Gentner, D. (1983). Structure-mapping: A theoretical
“what is Python like”, we are asking the system “If LPC is
                                                                       framework for analogy. Cognitive Science, 7 (2), 155–
like Punk Rock, what Python would be like?”
                                                                       170.
   Secondly, we are looking for better ways for indexing
the relationships and the concepts. Right now, the semantic          Gentner, D., & Smith, L. (2012). Analogical reasoning. In
information of the relationship types is rarely used. Algo-            V. Ramachandran (Ed.), Encyclopedia of human behav-
rithm 1 only looks at whether they are different or not. We            ior (2nd ed.) (pp. 130–136). Elsevier; Oxford, UK.
are considering using other semantic tools for helping us to         Grootswagers, T. (2013). Having your cake and eating it
get a direct measure of how close two relationship types               too: Towards a fast and optimal method for analogy der-
are, and even how close two concept descriptions are. This             ivation. Master dissertation, Radboud University, The
would solve the aforementioned problem caused by the                   Netherlands.
one-to-one mapping restriction. Another consideration in             Holyoak, K., & Thagard, P. (1989). Analogical mapping
the indexing process is the fact that when dealing with hu-            by constraint satisfaction. Cognitive Science, 13 (3),
man authored content, there is no guarantee that different             295–355.
contributors will use the same relation type in the same
way. Such inconsistencies could throw off the results of             Kline, P. J. (1983). Computing the similarity of structured
Algorithm 1, leading to bad analogies.                                 objects by means of a heuristic search for correspond-
                                                                       ences. Doctoral dissertation, University of Michigan.
   Thirdly, many benchmarks have been created for analo-
gy inference, such as (Holyoak & Thagard, 1989). Most of             Kubose, T. T., Holyoak, K. J., & Hummel, J. E. (2002).
the benchmarks’ formats are compatible with SMT and the                The role of textual coherence in incremental analogical
algorithms derived from it. We will be looking into ways               mapping. Journal of memory and language, 47(3), 407-
of evaluating our algorithm using a standard benchmark.                435.
   Finally, we believe this work has great potential of con-         Larkey, L. B., & Love, B. C. (2003). CAB: Connectionist
tributing to creating rich and vivid virtual characters, inter-        analogy builder. Cognitive Science, 27(5), 781-794.
esting and interactive stories, and computational creativity.        Si, M., Battad, Z. & Carlson, C. (2016) Intertwined story-
We are interested in finding new and innovative applica-               lines with anchor points. Proceedings of the 9th Interna-
tions of our proposed algorithms in addition to making                 tional Conference on Interactive Digital Storytelling
analogies for a single concept. In particular, we are inter-           (ICIDS) (pp 247-257), Los Angeles, CA.
ested in exploring how these algorithms can be used in
creating digital stories. As one of our next steps, we plan to       van Rooij, I. (2008). The tractable cognition the-
experiment with using this algorithm to learn how a person             sis. Cognitive science, 32(6), 939-984.
tells a story or how a good story is constructed and then            Wareham, T., Evans, P., & van Rooij, I. (2011). What does
apply the learning results for telling new stories using data          (and doesn’t) make analogical problem solving easy? A
from a different domain.                                               complexity-theoretic perspective. The Journal of Prob-
                                                                       lem Solving, 3 (2), 30–71.
                    Acknowledgments
This work was supported in part by the Cognitive and Im-
mersive Systems Laboratory -- a collaboration between the
IBM Research and RPI in the IBM Cognitive Horizons
Network.
                                                                3160

