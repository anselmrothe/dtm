Attacker and Defender Counting Approach for Abstract Argumentation1
Fuan Pu, Jian Luo, Yulai Zhang, and Guiming Luo
School of Software, Tsinghua University, Beijing, China
{pfa12,j-luo10,zhangyl08}@mails.tsinghua.edu.cn, gluo@mail.tsinghua.edu.cn
Abstract
In Dung’s abstract argumentation, arguments are either acceptable or unacceptable, given a chosen notion of acceptability.
This gives a coarse way to compare arguments. In this paper,
we propose a counting approach for a more fine-gained assessment to arguments by counting the number of their respective
attackers and defenders based on argument graph and argument game. An argument is more acceptable if the proponent
puts forward more number of defenders for it and the opponent
puts forward less number of attackers against it. We show that
our counting model has two well-behaved properties: normalization and convergence. Then, we define a counting semantics
based on this model, and investigate some general properties of
the semantics.
Keywords: abstract argumentation; argument graph; argument game; graded assessment; counting semantics

Introduction
Argumentation is an important cognitive process for dealing
with conflicting knowledge based on the construction and evaluation of interacting arguments [1]. It has been applied
in various domains and applications such as decision making
and e-participation. The most popularly used framework to
talk about general issues of argumentation is that of Dung’s
abstract argumentation [2], which consists of a set of arguments and a binary relation that represents the conflicting arguments. A number of argumentation semantics for abstract argumentation frameworks have been proposed that highlight different aspects of argumentation [3], such as admissible sets, preferred extension, and grounded extension. However, these semantics provide a rather rough way to evaluate
arguments and may result in some undesired results [4]. A
common case is that a semantics may give an empty answer.
Conversely, several answers may be provided, with nothing
to distinguish between them.
In order to overcome these difficulties, there is a trend towards considering and exploring the possibility of discriminating between arguments by employing a larger number of
categories or continuous numerical scales [5–9]. One of the
main advantages of these works is that it allows for a more
fine-grained assessment on arguments than is provided by the
traditional extensions-based approaches. We aim at following these works by evaluating the strength of arguments on a
scale of numerical values from 0 to 1 so as to finely compare
and rank arguments from the most acceptable to the weakest one(s). This fits well with recent interest in quantitative
measures for the ranking analysis of argumentation [10, 11].
In this paper, our fundamental idea used to formalise argument strength is essentially the same as those found in abstract argumentation theory: argument x is more acceptable
1

This work was supported by the Funds NSFC 61171121.

than argument y iff x has a better defence (for it) and a lower
attack (against it). In order to assess the strength of arguments
in an argumentation framework, we will consider their evaluation procedures as dialogue games [12], where two fictitious
agents—one PRO (the proponent) and the other OPP (the
opponent)—take part in. A dialogue game begin with PRO
putting forward an initial argument, and then PRO and OPP
take turns in a sequence of moves called a dispute, in which
each agent makes an argument that attacks its counterpart’s
last move. In general, the counterpart can try a different line
of attack and create a new dispute. This leads to a dispute
tree structure that represents the dialogue game. Nodes in a
dispute tree are labelled by arguments and are assigned the
status of defender node and attacker node of the root argument, depending upon the argument at that node is made by
the proponent or by the opponent, or depending upon whether
the walk length between the current node and the root node is
even or odd. We claim that an argument is more acceptable
if PRO puts forward more number of defender nodes for it
and OPP puts forward less number of attacker nodes against
it. We will thus introduce a graded approach to assess the
strength of each argument based on its dispute tree by counting its defender nodes and attacker nodes.
The rest of this paper is organized as follows. In Section 2
we briefly recall some background on Dung’s abstract argumentation and argument game. We present the attacker and
defender counting semantics in Section 3. Some properties
of the semantics are investigated in Section 4. Section 5 discusses related work and concludes.

Preliminaries
Abstract argumentation framework
We consider the basic concepts and insights of Dung’s abstract argumentation framework, in which both arguments
and attacks are assumed to be abstract entities [2].
Definition 1 (Argumentation framework) An argumentation framework (or AF, in short) is a pair AF = hX , Ri where
X is a set of arguments and R ⊆ X × X is a binary relation called attack relation. For two arguments x, y ∈ X ,
(x, y) ∈ R or xRy means that x attacks y.
We denote by R− (x) (respectively, R+ (x)) the subset of
X containing those arguments that attack (respectively, are
attacked by) the argument x ∈ X , extending this notation
in the natural way to sets of arguments, so that for S ⊆ X ,
R− (S) , {x ∈ X : ∃y ∈ S such that xRy} and R+ (S) ,
{x ∈ X : ∃y ∈ S such that yRx}.
To define the solutions of an AF, we mean selecting a
set of arguments that satisfy some acceptable criteria. Dung

1913

presents several of these properties, called extensions or semantics, which produce zero, one, or several sets of accepted
arguments. These semantics are based on two important concepts: conflict-freeness and defence.
Definition 2 (Conflict-free, Defense) Let AF = hX , Ri be
an argumentation framework, let S ⊆ X and x ∈ X .
• S is conflict-free iff @x, y ∈ S such that xRy.
• S defends argument x iff ∀y ∈ X if yRx then ∃z ∈ S such
that zRy. It is also said that argument x is acceptable with
respect to S.
Using the notions of conflict-freeness and defence, we can define a number of argumentation semantics, each embodying a
particular rationality criterion.

x1
x4

x2

Example 1 Consider an AF = hX , Ri, described in
Figure 1a, in which X = {x1 , x2 , x3 , x4 } and R =
{(x2 , x1 ), (x3 , x2 ), (x2 , x3 ), (x3 , x3 ), (x4 , x2 )}. For this example, AF has three admissible sets: ∅, {x4 } and {x1 , x4 }.
{x1 , x4 } is the only preferred extension of AF, and it is also
complete and grounded. AF has no stable extension.

Argument graph and argument game
An argumentation framework can be represented as a digraph,
called argument graph, in which vertices are arguments and
directed arcs characterise attack relations between arguments.
Definition 4 Let G be the argument graph associated to the
argumentation framework hX , Ri:
• A walk from x to y is a sequence of arguments S =
hx00 , x01 , · · · , x0m i such that x00 = x, x0m = y and x0t−1 Rx0t
for all t ∈ {1, 2, · · · , m}. The length of this walk, denoted
by `S , is the number of edges used in the walk. We denote
the set of all walks from x to y of length ` by S(x, y, `).
• A cycle is a walk S = x00 , x01 , · · · , x0m−1 , x00 . A cycle is
an elementary cycle iff for any i, j ∈ {1, 2, · · · , m − 1}
such that if i 6= j then x0i 6= x0j .
• G is acyclic iff there are no cycles in G.
In this paper, we assess the strengths of arguments based
on abstract argument games without regard to the specific internal structure of the arguments [12]. These games typically
assume the presence of two fictitious agents, PRO (for “proponent”) and OPP (for “opponent”). Each game start with
PRO asserting an initial argument to be tested. OPP and
PRO then take turns in moving arguments that successively attack each other’s last move. A sequence of moves in

x(0)
1

OPP

x(1)
2

PRO

x3

x(2)
4

x(2)
3
x(3)
2

OPP

OPP

(a)

Definition 3 (Acceptability semantics) Let S ⊆ X be
conflict-free, and let F : 2X 7→ 2X be a function such that
F(S) , {x ∈ X : S defends x}.
• S is admissible iff S ⊆ F(S).
• S is a preferred extension iff it is a maximal (w.r.t ⊆) admissible set.
• S is a stable extension iff it attacks all arguments in X \S.
• S is a complete extension iff S = F(S).
• S is a grounded extension iff it is the minimal (w.r.t ⊆)
complete extension.

PRO

x(4)
4

x(3)
3
x(4)
3

x(4)
2

x(4)
3

(b)

Figure 1: Argumentation framework and dispute tree. (a)
shows an argumentation framework, (b) shows the dispute
tree induced in x1 .
which each agent moves against its counterpart’s last move
is referred to as a dispute. Generally, however, an agent can
backtrack to a counterpart’s previous move and initiate a new
dispute. Thus, the data structure of an argument game can be
represented by an argument graph’s induced dispute tree, in
which each branch from root to leaf is a dispute:
Definition 5 (Dispute tree) Let AF = hX , Ri be an argumentation framework, and let x ∈ X . The dispute tree induced by x in AF is a tree T of arguments, such that the root
of T is x, and for any y, z ∈ X , y is a child of z in T iff yRz.
Nodes in a dispute tree are labelled by arguments and are
assigned the status of defender node or attacker node of the
root argument, depending upon whether the walk length from
the current node to the root node is even or odd, or depending upon whether the argument at that node is made by PRO
or by OPP. Consider two agents arguing the argumentation
framework shown in Figure 1a, and the dispute tree induced
by x1 is shown Figure 1b. Note that this dispute tree is infinite, since both agents are able to repeat counterarguments
due to the presence of cycles in the argument graph. In this
dispute tree, the blue solid nodes, put forward by PRO, are
defender nodes of x1 , whereas, the red dotted nodes, made by
OPP, are attacker nodes of x1 . Each node is also assigned a
superscript, which denotes the length of the move sequence
from the current node to the root node. Obviously, if a node
has a even-numbered superscript then it is a defender node,
otherwise it is an attacker node. Note that the root node is
also a defender node of x1 since each argument has a walk
with length 0 to itself.
In this paper, we define the argument within a defender
(respectively, attacker) node is a defender (respectively, attacker) of the argument within the root node. An argument x
is a defender or an attacker of argument y depending on the
length of the walk between them. Now, let us define attacker
and defender based on argument graph:
Definition 6 (Attacker and Defender) Let hX , Ri be an
AF, and G be its argument graph. Let arguments x, y ∈ X .
• x is an attacker of y if there exists a walk S from x to y
such that `S = 2t + 1 with t = 0, 1, 2, · · · . Then, x is said

1914

to be a `S -length attacker of y.
• x is an defender of y if there exists a walk S from x to y
such that `S = 2t with t = 0, 1, 2, · · · . Then, we call x is
said to be a `S -length defender of y.
Note that an defender can also be a attacker (e.g., an defender node and an attacker node are labelled by the same
argument). In the same way, two defenders can be the same
argument (e.g., two different lengths of defender nodes are
labelled by the same argument) and the same thing may occur for the attackers. In [5], the authors distinguish attackers
(respectively, defenders) by direct and indirect. In this paper, instead, we distinguish them by different walk and walk
length. Accordingly, if there exists m number of `-length
walks from argument x to argument y, i.e. |S(x, y, `)| = m,
then we consider that x is the m number of different `-length
attackers or defenders of y.
Example 2 Consider the argumentation graph depicted in
Figure 1. It can be easily see that there are two elementary cycles hx2 , x3 , x2 i and hx3 , x3 i. Since S(x2 , x1 , 1) =
{hx2 , x1 i} and S(x2 , x1 , 3) = {hx2 , x3 , x2 , x1 i}, thus x2
is a 1-length and 3-length attacker of x1 (corresponding
(1)
(3)
to the attacker nodes x2 and x2 in the dispute tree).
Note that x2 is also a defender of x1 due to the 4-length
walk hx2 , x3 , x3 , x2 , x1 i (corresponding to the defender node
(4)
x2 ). There exist two walks from x3 to x1 of length 4, i.e.,
S(x3 , x1 , 4) = {hx3 , x3 , x3 , x2 , x1 i , hx3 , x2 , x3 , x2 , x1 i}
(4)
(corresponding to two defender nodes x3 ), thus x3 is two
different 4-length defenders of x1 .

Attacker and Defender Counting Semantics
In classical abstract argumentation, arguments are either acceptable or unacceptable, given a chosen notion of acceptability. This gives a rather coarse way to compare arguments.
In this paper, we intend to provide a more fine-grained evaluation of arguments based on the graph structure of the argument system. Our basic starting point is that argument x
is more acceptable than argument y iff PRO makes more defenders for x and OPP makes less attackers against x.
Towards such an idea, our approach is to count the number of all attackers and defenders for each argument. The
less the attackers and the more defenders an argument has,
the more acceptable the argument. In this approach, the main
constraint is that we must be able to identify all attackers and
defenders for each argument. This is quite easy in the case
of argument graphs without cycles. In this section, we will
introduce first a matrix approach to record and track all attackers and defenders of different lengths for every argument
regardless of whether the argument graph is acyclic or cyclic.
Then, counting models are established to assess the strengths
of arguments, and a counting semantics is defined. The properties of this semantics are studied in the next section.

Finding attackers and defenders
In this subsection, we will use a series of matrices to memorise the number of all walks with different lengths between

any two arguments, and will present a matrix product approach to compute these matrices.
Let AF = hX , Ri be an argumentation framework with
(`)
X = {x1 , x2 , · · · , xn }. We use a n × n matrix A(`) = [aij ]
to memorise the number of `-length walks between any pair
of arguments, which is defined as
(`)
aij = |S(xj , xi , `)|
Intuitively, A(0) = I where I is the identity matrix. Now let
us define another n×n matrix A = [aij ], called attack matrix,
where entry aij is 1 iff xj Rxi ; otherwise 0. Obviously, A is
the transpose of the adjacency matrix of the attack graph of
AF. Then, it is easy to see that A(1) = A, and further we
have the following result:
Lemma 1 A(`) = A` for each ` = 0, 1, 2, · · · .
This lemma is common in graph theory. We introduce it
here since it provides us a way to represent and compute the
number of all walks with different lengths between any two
arguments. It implies that by this approach we can find all attackers or defenders of various lengths of an argument. From
now on, we will use A` to substitute for A(`) for brevity.
Proposition 1 Let G be the argument graph of AF = hX , Ri
and its attack matrix be A.
[P1] If there exists a cycle in AF, then for any positive integer
` it holds that A` 6= 0. 2
[P2] If G is acyclic, then there exists a positive integer r such
that A` 6= 0 for any positive integer ` ≤ r, and A` = 0
for any integer ` ≥ r + 1. Moreover, r is the length of
the longest walk in G.
This proposition reveals that if the attack graph of an argumentation framework is acyclic, the attackers and defenders
of each argument is finite; otherwise, an argument in a cyclic
graph may have infinite attackers and defenders.

The counting models for argumentation framework
Now, we will concern on establishing the counting model for
the evaluation of arguments.
The simple counting model The basic idea behind the simple counting model is: for each argument x, for each walk
length `, to count the number of `-attackers or `-defenders
for x. We positively count all defenders and negatively count
all attackers. This is easy to understand since an argument is always weakened by its attackers and is “reinstated” by
its defenders. Therefore, in any case, the greater the number
computed, the more acceptable the argument x.
Cycles in argument graphs are expensive as the attackers
and defenders of an argument may be infinite. Here we firstly
consider the approach to count attackers and defenders under
a given maximum walk length, denoted by k, which will be
used in order to capture finite attackers and defenders. Let
AF = hX , Ri with X = {x1 , x2 , · · · , xn } and let v be the
2
A matrix M 6= 0 means that there exists some entry in M is
non-zero. On the contrary, M = 0 means that all entries in M are
zeros.

1915

n-dimensional column vector over X . Given the maximum
walk length k, we define the simple counting model as
k
X
v (k) =
(−1)` A` e
(1)
`=0

where e is the column vector consisting of all ones. Note
that here (−1)` encodes the consideration of positively and
negatively counting since (−1)` is −1 for odd ` and 1 for
even `. The item A` e means counting the number of all `length attackers or defenders of each argument. As k goes to
∞, then v (k) is the evaluation on arguments.
However, there are two problems with this simple counting model. The first is that for an attack graph with cycles,
when k goes to ∞, then some arguments may have infinite
number of attackers and defenders, which may cause v (k) go
to ∞. Considering the attack graph in Figure 1a, for example, there are 3.54 × 1020 different walks from x3 to x2 of
length 100. As the representation and processing of the infinite case is difficult, the simple counting model is not conducive to comparison and practical application. For example,
if the counting values of two arguments are both infinite, we
can not compare them.
The second problem is that the simple counting model does
not distinguish different lengths of attackers and defenders. Different lengths of attackers or defenders of an argument
may have different effects on the argument. The simple model just simply counting them together and does not consider
which is more important and which is less important. In this
paper, shorter attackers and defenders are preferred, which
can effectively drive the agents to make only relevant moves,
and thus we assume that a shorter attacker (respectively, defender) of an argument has more effect than a longer one on
the argument [13]. More concretely, considering the move
(4)
(3)
(2)
(1)
(0)
sequence x3 → x3 → x3 → x2 → x1 in Figure 1b,
(0)
(2)
(4)
where x1 , x3 and x3 are three defender nodes of x1 , and
(1)
(3)
x2 and x3 are two attacker nodes of x1 . Here, we consid(0)
(2)
(2)
er x1 has more (defence) effect than x3 on x1 since x3
(2)
has a longer walk to x1 . Similar viewpoint gives that x3 has
(4)
(1)
more (defence) effect than x5 on x1 , and that x2 has more
(3)
(attack) effect than x3 on x1 .
The improved counting model To remedy these two problems, we firstly define a normalization factor, which can ensure that the argument strength scale is bounded, and secondly we define a damping factor on walk length, which allows
a more refined treatment on different length of attacker and
defenders. Then, we write the improved counting model as
k
X
e` e
v (k) =
(−1)` α` A
(2)
`=0

e is the norin which α ∈ (0, 1) is the damping factor and A
e
malized attack matrix defined as A = A/N where the scalar
N is the normalization factor. Now, we can see that the damping factor α provides a graded treatment of attackers and defenders of various lengths since the longer the walk length `,
the smaller the α` .

To ensure bounded v (k) , the underlying principle to select
the normalization factor N should satisfy the spectral radius
e no more than 1 [14, Chapter. 5]. In this paper, we select
of A
N as the matrix infinite norm of A, defined for A by
n
X
N = kAk∞ = max
|aij |
1≤i≤n

j=1

since it provides two well-behaved properties as follows:
Theorem 1 (Normalization) For any non-negative integer
k, the improved counting model v (k) defined in Equation 2
is such that 0 ≤ v (k) ≤ e.
For any argumentation system, the improved counting model
can range the strength value of each argument into the interval
[0, 1], as it uses a dynamic normalization factor N , in other
words, the norm of an attack matrix used here represents the
“size” of its corresponding argumentation framework. With
this normalization property, all arguments can be easily compared. We must note that here the strength values of arguments are relative and not the real number of their attackers
and defenders, hence, they do not make sense when they are
not compared with each other.
Another property is called convergence, which states that
as k goes to ∞, the improve counting model will converge.
Theorem 2 (Convergence) The sequence {v (k) }∞
k=0 defined
by Equation 2 necessarily converges.
The proof this theorem needs to consider two cases, i.e., attack graph G contains cycle(s) or not. We can prove that for
both cases, the improved counting model always converges to
a unique solution.

The counting semantics for AF
We now define the attacker and defender counting semantics
for an argumentation framework as the limit of {v (k) }∞
k=0 .
Definition 7 Let AF = hX , Ri be an argumentation framework with X = {x1 , x2 , · · · , xn }. The attacker and defender
counting semantics for such AF is, for all arguments X ,
v = lim v (k)
k→∞

The strength value of each argument xi is denoted as v(xi ).
To obtain this counting semantics, one basic idea is to compute v (0) , v (1) , · · · until either v (k) = v (k−1) or the approximation is considered adequate. If directly utilizing Equation 2, this may incur prohibitively expensive computational
cost since for each k we need to recompute all attackers and
defenders for every argument. By Equation 2, however, we
can easily derive the following iteration approach:
e (k−1)
v (k) = e − αAv
(3)
Then, the next valuation can be computed by the outputs of
the previous iteration. With the initial valuation v (0) = e,
we can approximate the unique solution by iteration. This
iterative approach is done by using Algorithm 1. On line 2
b for αA
e to reduce the calculation, and on line
we substitute A
6 the change δ is computed. In line 7 the iteration terminates
when the change δ is under a given tolerance . It can be
proved that the convergence speed of this iteration algorithm
is linear and no more than α.

1916

Algorithm 1: An Iteration Approach for Attacker and
Defender Counting Semantics

1
2
3
4
5
6
7
8

Definition 8 (Isomorphism) Two argumentation frameworks AF1 = hX1 , R1 i and AF2 = hX2 , R2 i are isomorphic
iff there exists a bijective function τ : X1 7→ X2 such that for
any x, y ∈ X1 , xR1 y iff τ (x)R2 τ (y).

Input: α: damping factor; A: attack matrix;
: prescribed tolerance;
Output: v (k) : the approximate counting semantics
k ←− 0; v (0) ←− e;
b ←− αA/kAk∞ ;
A
repeat
k ←− k + 1;
b · v (k−1) ;
v (k) ←− e − A
(k)
(k−1)
δ = kv − v
k;
until δ 6 ;
return v (k) ;

Theorem 3 Let vαAF1 and vαAF2 be the attacker and defender counting semantics of AF1 and AF2 respectively, under a
given damping factor α. For any isomorphism τ from AF1 to
AF2 and for any x ∈ X1 , it holds that vαAF1 (x) = vαAF2 (τ (x)).
With this result, we have the following corollary about the
argumentation framework whose argument graph is an elementary cycle:

Example 3 Consider again the argumentation framework in
Example 1. Let α = 0.98 and  = 10−3 . Then, the valuation
sequence of the attacker and defender counting model, calculated by Algorithm 1, is shown in Figure 2. The valuation
sequence reflects how the strength value of each argument
changes with various maximum walk length k. After finitely
many iterations, the valuation sequence gradually tends to be
stable and converges to the approximative counting semantics v = [0.89, 0.22, 0.60, 1.00]T within a tolerable range.
1

1.00

0.9

0.89

0.8

Argument strength

0.7
0.60

0.6
0.5
0.4
0.3

0.22

0.2
0.1
0

x1
0

5

10
15
The maximum walk length

x2

x3
20

are isomorphic have the “same” (modulo the isomorphism)
counting semantics, as stated by the following definitions:

x4
25

Figure 2: Valuation sequence of the attacker and defender
counting model for Example 1.

Some Properties of Counting Semantics
In this section, we will give some general properties about the
attacker and defender counting semantics.

Abstraction
The first fundamental property is called abstraction, which
corresponds to the fact that the counting semantics only depends on the attack relation between arguments while it is
thoroughly independent of any characteristic of arguments at
the underlying language level [10]. Formally, this property
corresponds to the fact that argumentation frameworks which

Corollary 1 If the argument graph G of an AF = hX , Ri is
an elementary cycle, then for any arguments x, y ∈ X , we
have vα (x) = vα (y).
We have stated that the strength values of arguments are
relative and do not make sense when they are not compared
with each other. Actually, in most applications, we merely
concern the ranking (ordering) over arguments induced by the
counting semantics. Given the damping factor α, the ranking
α on the set of arguments X derived from the counting semantics vα is defined by: for any x, y ∈ X , x α y iff
vα (x) ≥ vα (y). Intuitively, α is total (i.e., ∀x, y ∈ X ,
x α y or y α x) and transitive (i.e., ∀x, y, z ∈ X , if
x α y and y α z, then x α z). Note that here x α y
means that argument x is at least as acceptable as argument y
w.r.t. α. Formally, we define x 'α y if and only if x α y
and y α x, which means x and y are equally acceptable
w.r.t. α. Moreover, x α y, meaning x is strictly more acceptable than y w.r.t. α, if and only if x α y but not y α x.
Corollary 2 Assume AF1 = hX1 , R1 i and AF2 = hX2 , R2 i
be isomorphic w.r.t. τ , for a given damping factor α, then we
2
1
τ (y).
y iff τ (x) AF
have ∀x, y ∈ X1 , x AF
α
α
Actually, this corollary is equivalent to Theorem 3, and states that two isomorphic argument graphs give rise to two
equivalent rankings on arguments.

Damping-independent ranking
Different damping factor α may affect the results of the
counting semantics, and thus may give the different ranking
on arguments. More specifically, for an argumentation framework hX , Ri, for two different damping factors α and α0 , and
for two arguments x, y ∈ X , the counting semantics vα may
give that vα (x) ≥ vα (y), i.e. x α y, while the semantics vα0 may give the opposite result vα0 (y) ≥ vα0 (x), i.e.
y α0 x. To investigate how different α influence the ranking
on arguments is a quite complex thing, and we will discuss it
in our future works. In this paper, we mainly concern on the
properties which always hold for any damping factor α.
Proposition 2 Let xi , xj ∈ X . For any damping factor α ∈
(0, 1), the ranking α induced by the counting semantics vα
satisfies:

1917

[P1] If R− (xi ) = ∅ and R− (xj ) 6= ∅, then xi α xj .
[P2] If R− (xi ) = R− (xj ), then xi 'α xj ,
[P3] If R− (xi ) ⊂ R− (xj ), then xi α xj .

Related Work and Conclusion

Property [P1] states that non-attacked arguments are always the most acceptable and attacked arguments always
have non-maximal valuation. This property is common in
many proposals [5, 6, 11]. Property [P2] shows that two arguments with the same 1-length attackers always have the same
valuation (and thus are always equally acceptable). Property [P3] reveals that an argument xi , whose 1-length attackers
pertain to the set of 1-length attackers of argument xj , is always more acceptable than xj . Using these properties, we can
easily identify some rankings between arguments regardless
of the damping factor α.
Example 4 Consider again the argument graph shown in
Figure 1a where R− (x1 ) = {x2 }, R− (x2 ) = {x3 , x4 },
R− (x3 ) = {x2 , x3 } and R− (x4 ) = ∅. Obviously, x4 has
the highest rank; x1  x3 since R− (x1 ) ⊂ R− (x3 ). Then,
we have the rankings: x4  x1  x3 and x4  x2 .
One strong result generalizes Proposition 2 in two ways:
first it considers arbitrary number of 1-length attackers and
second, it considers various strengths of arguments. This involves a relation that compares sets of arguments, i.e. set
comparison: Let vα be a ranking on set X of arguments
with respect to α and let S1 , S2 ⊆ X , S1 vα S2 iff there
is an injective mapping λ from S1 to S2 such that for all
x ∈ S1 , λ(x) α x. Obviously, if S1 vα S2 , there must
be |S1 | ≤ |S2 | and for any x ∈ S1 , there exists an argument
y in S2 such that y α x.
Theorem 4 Let vα be an attacker and defender counting semantics w.r.t the damping factor α. For any xi , xj ∈ X , if
R− (xi ) vα R− (xj ), then it holds that xi α xj .
This theorem tells us that argument xi is at least as acceptable
as argument xj , when the 1-length attackers of xj at least
as numerous and well-ranked as those of xi . The relation
of set comparison between S1 and S2 is strong, denoted by
S1 <α S2 , iff it satisfies two conditions: (1) S1 vα S2 ; (2)
|S1 | < |S2 | or for some x ∈ S1 such that λ(x) α x and
λ(x) 6'α x. Then, we have the strong version of Theorem 4:
Theorem 5 Let vα be a counting semantics w.r.t the damping
factor α. For any xi , xj ∈ X , if R− (xi ) <α R− (xj ), then it
holds that xi α xj .
Example 4 (Continued) Now, let us compare arguments x2
and x3 . Intuitively, |R− (x2 )| = |R− (x3 )|. We define the injective mapping λ from R− (x3 ) to R− (x2 ) as:
λ(x3 |R− (x3 ) ) = x3 |R− (x2 ) and λ(x2 |R− (x3 ) ) = x4 |R− (x2 ) ,
where x|S means the element x in set S. Based on the previous rankings: x3 |R− (x2 ) ' x3 |R− (x3 ) and x4 |R− (x2 ) 
x2 |R− (x3 ) , we have R− (x3 ) < R− (x2 ), and by Theorem 5,
we have x3  x2 . Then, we can conclude the ranking on all
arguments in Figure 1a: x4  x1  x3  x2 , which are
consistent with the results in Example 3.

This paper mainly focuses on evaluating arguments by assigning a strength to each argument. In this regard, there exists numerous works [5–8, 11], etc. However the most related
works may be the gradual approach in [5] and the equational approach in [8] since both these two approaches and our
counting approach can be seen as interaction-based approaches, i.e., evaluating arguments based on the graph structure of
the argumentation framework. Our model can be seen as a
linear model and has significant computational advantages.
In the short term, future work mainly aim to the following
aspects. First, the damping factor plays an important role in
our counting semantics. How the damping factor influences
the results and how to decide it are two urgent problems. Second, argumentation has become social activities by Web 2.0
in our daily life 3 . How to extend our work to evaluate arguments in social context is another research point.

References
[1] I. Rahwan and G. R. Simari, Argumentation in artificial intelligence. Springer, 2009.
[2] P. M. Dung, “On the acceptability of arguments and its fundamental role in nonmonotonic reasoning, logic programming
and n-person games,” Journal of Artificial Intelligence, vol. 77,
no. 2, pp. 321–357, Sep. 1995.
[3] P. Baroni, M. Caminada, and M. Giacomin, “An introduction
to argumentation semantics,” The Knowledge Engineering Review, vol. 26, pp. 365–410, 12 2011.
[4] T. J. Bench-Capon and P. E. Dunne, “Argumentation in artificial intelligence,” Artificial intelligence, vol. 171, no. 10, pp.
619–641, 2007.
[5] C. Cayrol and M.-C. Lagasquie-Schiex, “Graduality in argumentation,” Journal Artificial Intelligence Research (JAIR),
vol. 23, pp. 245–297, 2005.
[6] P.-A. Matt and F. Toni, “A game-theoretic measure of argument strength for abstract argumentation,” in Logics in Artificial Intelligence. Springer, 2008, pp. 285–297.
[7] J. Leite and J. Martins, “Social abstract argumentation,” in Proceedings of the Twenty-Second international joint conference
on Artificial Intelligence-Volume Volume Three. AAAI Press,
2011, pp. 2287–2292.
[8] D. M. Gabbay, “Equational approach to argumentation networks,” Argument & Computation, vol. 3, no. 2-3, pp. 87–142,
2012.
[9] S. Modgil, F. Toni, F. Bex, I. Bratko, C. I. Chesñevar, W. Dvořák, M. A. Falappa, X. Fan, S. A. Gaggl, A. J. Garcı́a et al.,
“The added value of argumentation,” in Agreement Technologies. Springer, 2013, pp. 357–403.
[10] L. Amgoud and J. Ben-Naim, “Ranking-based semantics for
argumentation frameworks,” in Scalable Uncertainty Management. Springer, 2013, pp. 134–147.
[11] F. Pu, J. Luo, Y. Zhang, and G. Luo, “Argument ranking with
categoriser function,” in Knowledge Science, Engineering and
Management. Springer, 2014, pp. 290–301.
[12] S. Modgil and M. Caminada, “Proof theories and algorithms
for abstract argumentation frameworks,” in Argumentation in
Artificial Intelligence, G. Simari and I. Rahwan, Eds. Springer
US, 2009, pp. 105–129.
[13] T. Rienstra, M. Thimm, and N. Oren, “Opponent models with
uncertainty for strategic argumentation,” in Proceedings of the
Twenty-Third international joint conference on Artificial Intelligence. AAAI Press, 2013, pp. 332–338.
[14] R. A. Horn and C. R. Johnson, Matrix analysis. Cambridge
university press, 2012.
3
The websites www.livingvote.org, debategraph.
org, idebate.org are a few examples.

1918

