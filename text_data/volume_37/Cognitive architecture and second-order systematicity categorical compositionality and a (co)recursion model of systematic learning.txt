                Cognitive architecture and second-order systematicity: categorical
                 compositionality and a (co)recursion model of systematic learning
                                                   Steven Phillips (steve@ni.aist.go.jp)
         Mathematical Neuroinformatics Group, National Institute of Advanced Industrial Science and Technology (AIST),
                                                      Tsukuba, Ibaraki 305-8568 JAPAN
                                             William H. Wilson (billw@cse.unsw.edu.au)
                           School of Computer Science and Engineering, The University of New South Wales,
                                               Sydney, New South Wales, 2052 AUSTRALIA
                               Abstract                                  each other. An example that is pertinent to the classical ex-
                                                                         planation is the learning (or memorization) of arbitrary asso-
    Systematicity commonly means that having certain cognitive
    capacities entails having certain other cognitive capacities.        ciations. For instance, if one has the capacity to learn (mem-
    Learning is a cognitive capacity central to cognitive science,       orize) that the first day of the Japanese financial year is April
    but systematic learning of cognitive capacities—second-order         1st, then one also has the capacity to learn (memorize) that
    systematicity—has received little investigation. We proposed
    associative learning as an instance of second-order systematic-      the atomic number of carbon is 6. This example is a legiti-
    ity that poses a paradox for classical theory, because this form     mate instance of systematicity (at the second level) given that
    of systematicity involves the kinds of associative constructions     systematicity has been characterized as equivalence classes
    that were explicitly rejected by the classical explanation. In
    fact, both first and second-order forms of systematicity can         of cognitive capacities (McLaughlin, 2009).
    be derived from the formal, category-theoretic concept of uni-          Elsewhere (Phillips & Wilson, submitted), we argue that
    versal morphisms to address this problem. In this paper, we          associative learning is problematic for classical theory, be-
    derived a model of systematic associative learning based on
    (co)recursion, which is another kind of universal construction.      cause it involves the kinds of associative constructions that
    This result increases the extent to which category theory pro-       were explicitly rejected by the classical explanation. Our
    vides a foundation for cognitive architecture.                       category theoretic explanation of systematicity resolves this
    Keywords: cognitive architecture; systematicity; composi-            problem, because both first and second-order forms of sys-
    tionality; learning; category theory; coalgebra
                                                                         tematicity are derived from the same categorical construction:
                                                                         universal morphisms. Here, we derive a model of systematic
                            Introduction                                 associative learning based on (co)recursion, which is another
The problem of systematicity for theories of cognitive sci-              kind of universal construction.
ence is to explain why certain cognitive capacities typically
co-exist (Fodor & Pylyshyn, 1988); why, for example, having              Outline of paper
the ability to identify square as the top object in a scene con-         The remaining four sections of this paper are outlined as fol-
sisting of a square above a triangle implies having the ability          lows. The second section provides the basic category theory
to identify triangle as the top object in a scene consisting of          definitions and motivating examples needed for our model.
a triangle above a square. More formally, an instance of sys-            The third section provides concrete examples of anamor-
tematicity occurs when one has cognitive capacity c1 if and              phisms (corecursion) as a conceptual guide to the model given
only if c2 (McLaughlin, 2009): thus, systematicity is the par-           in the fourth section. Discussion of this work is in the last
titioning of cognitive capacities into equivalence classes. The          section. Readers already familiar with the category theory ap-
problem is to provide an explanation for systematicity that              proach to corecursion may prefer to skip straight to the fourth
does not rely on ad hoc assumptions: i.e., auxiliary assump-             section, since the category theory employed here is already
tions that are motivated only to fit the data, cannot be verified        well known, with the possible exception of the recently de-
independently of verifying the theory, and are unconnected to            veloped adjoint extensions (Hinze, 2013). Readers not famil-
the theory’s core principles (Aizawa, 2003).                             iar with a category theory approach may prefer to skip to the
    Learning is another cognitive capacity. Hence, using the             third section for simple concrete examples as a way of orient-
characterization of systematicity as equivalence classes of              ing themselves for the model that follows. The second sec-
cognitive capacities (McLaughlin, 2009), we have another                 tion, then, provides points of reference for technical details
form of systematicity: i.e., the capacity to learn cognitive ca-         and motivating examples when needed.
pacity c1 if and only if the capacity to learn cognitive capac-
ity c2 , which is sometimes referred to as second-order sys-                                Basic category theory
tematicity (Aizawa, 2003). Aizawa (2003), citing Chomsky                 In this section, we provide the basic category theory needed
(1980), provides an example from language: a person has the              for our model. In the interests of brevity and clarity, we only
capacity to learn one natural language (say, Chinese) if they            provide definitions and examples directly pertaining to the
have the capacity to learn another (say, German). Importantly,           model, omitting the (albeit, well known) theorems and lem-
the learned capacities need not be systematically related to             mas that justify statements. Deeper and broader introductions
                                                                     1877

to category theory and categorical treatments of (co)recursion     Example 2 (Right product functor). The right product func-
can be found in many textbooks on the topic (e.g., Mac Lane,       tor ΠB : Set → Set sends each set X to the Cartesian product
1998; Bird & de Moor, 1997). In the context of systematic-         X × B and each function f : X → Y to the product of functions
ity, this paper builds upon our earlier work (see Phillips &        f × 1B : X × B → Y × B, (x, b) 7→ ( f (x), b), i.e., f × 1B maps
Wilson, 2010), and particularly in the context of recursive ca-    (x, b) to ( f (x), b).
pacities (Phillips & Wilson, 2012), where the theoretical prin-
ciples of first-order systematicity and other technical details    Example 3 (Right exponential functor). The right exponen-
can be found.                                                      tial functor ΛB : Set → Set sends each set X to the function
                                                                   set X B , which is the set of functions { f : B → X}, and each
Definition 1 (Category). A category C consists of:                 function g : X → Y to the function Λ(g) : X B → Y B , f 7→ g ◦ f .
• a collection of objects (A, B, ...);                             Example 4 (List). List-related constructions built from a set
• a collection of morphisms ( f , g, ...), written f : A → B       of elements A are obtained from an endofunctor on the cate-
     to indicate that A and B are respectively the domain and      gory Set: i.e., FA : X 7→ 1 + A × X, f 7→ 11 + 1A × f , where 1
     codomain of f , including an identity morphism, denoted       corresponds to the empty list, and + and × are (respectively)
     1A : A → A, for each object A in C; and                       the disjoint union and Cartesian product of sets or functions.
• a composition operation that sends a pair of compatible          Definition 5 (Natural transformation). A natural transforma-
     morphisms f : A → B and g : B → C, i.e., where the            tion η from a functor F : C → D to a functor G : C → D, writ-
                                                                                 .
     codomain of f equals the domain of g, to their composite      ten η : F → G, is a family of D-morphisms {ηA : F(A) →
     morphism, denoted g ◦ f : A → C,                              G(A)|A is an object in C} such that for each morphism f :
                                                                   A → B in C we have G( f )◦ηA = ηB ◦F( f ), i.e., the following
that satisfy the axioms of: associativity—h◦(g◦ f ) = (h◦g)◦       diagram is commutative (equational):
 f ; and identity— f ◦ 1A = f = 1B ◦ f for each f in C.
                                                                                                             ηA
Example 1 (Set). The category Set has sets for objects, func-                                       F(A)              / G(A)        (1)
tions between sets for morphisms, and composition is compo-
sition of functions.                                                                        F( f )                           G( f )
                                                                                                                          
Definition 2 (Terminal object). In a category C, a terminal
                                                                                                    F(B)             / G(B)
object is an object, denoted 1, such that for every object Z                                                 ηB
there exists a unique morphism u : Z → 1.
Remark. In Set, a singleton set is a terminal object, whose        Definition 6 (Final morphism). A final morphism from a
only element is denoted ∗ when its identity is not required.       functor F : C → D to an object X in D is a pair (A, ϕ) con-
Other categories may have terminal objects with further inter-     sisting of an object A in C and an morphism ϕ : F(A) → X
nal structure, as we shall see for categories of (co)algebras.     in D such that for every object Z in Z and every morphism
                                                                    f : F(Z) → X in C there exists a unique morphism u : Z → A
Definition 3 (Isomorphism). An isomorphism is a morphism
                                                                   such that f = ϕ ◦ F(u), as indicated by the following commu-
 f : A → B such that their exists a morphism g : B → A sat-
                                                                   tative diagram (dashed arrows indicate unique existence):
isfying f ◦ g = 1B and g ◦ f = 1A . Morphism g is called the
inverse of f , and denoted f −1 .
                                                                                           Z               F(Z)                    (2)
Remark. In a category C, the collection of morphisms with                                                       BB
                                                                                                                      BB f
domain object A and codomain object B is called a hom-set,                                u               F(u)            BB
                                                                                                                           BB
denoted HomC (A, B). As we shall see, hom-sets play an im-                                        
portant role in category theory.                                                           A                F(A)                 /X
                                                                                                                         ϕ
Definition 4 (Functor). A functor F from a category C to a
category D is a structure-preserving map, written F : C → D,       Remark. The dual of final morphism is initial morphism,
that maps each object A in C to the object F(A) in D and each      whose definition is obtained by reversing the directions of the
morphism f : A → B in C to the arrow F( f ) : F(A) → F(B)          morphisms in the definition of final morphism. A universal
in D such that the following axioms are satisfied:                 morphism is either a final morphism or an initial morphism.
• identity: F(1A ) = 1F(A) for each object A in C; and             In general, category theory concepts are dualized by reversing
                                                                   all the arrows in the definition of the original concept.
• compositionality: F(g ◦C f ) = F(g) ◦D F( f ) for each pair
     of compatible morphism ( f , g).                              Definition 7 (Adjunction). An adjunction from a category C
                                                                   to a category D is a triple, written (F, G, ε) : C ⇀ D, consisting
Remark. An endofunctor is a functor F : C → C, i.e., the           of a functor F : C → D, a functor G : D → C and a natural
                                                                                                        .
domain and codomain are the same category C. Endofunctors          transformation ε : F ◦ G → 1D such that for each object Y in
are used to model (co)recursion.                                   D, the pair (G(Y ), εY ) is a final morphism from F to Y , as
                                                               1878

indicated by the following commutative diagram:                                 states, or equivalently a unary function τS : A → SS from an
                                                                                input to function between states, as given by the bijection
                    X                       F(X)
                                                        FF
                                                                        (3)     HomSet (A × S, S) ∼= HomSet (A, SS ). We make use of this uni-
                                                          FF g                 versal construction in our associative learning model.
                                                               FF
                  f
                         
                                           F( f )
                                                                  FF
                                                                    F#         Definition 8 (F-coalgebra). An F-coalgebra on an endofunc-
                 G(Y )                     F ◦ G(Y ) ε / Y                      tor F : C → C is a pair (A, α) consisting of an object A and an
                                                                Y
                                                                                morphism α : A → F(A) in C.
Remark. The functor F is called the left adjoint of functor G,
                                                                                Definition 9 (F-coalgebra homomorphism). An F-coalgebra
and G is called the right adjoint of F. The relationship be-
                                                                                homomorphism from a coalgebra (B, β) to a coalgebra (A, α)
tween F and G is called an adjoint situation, denoted F ⊣ G.
                                                                                is a morphism h : (B, β) → (A, α) such that F(h) ◦ β = α ◦ h.
The morphism εY is the component of the natural transforma-
tion ε at object Y . Definition 7 emphasizes the natural trans-                 Definition 10 (Category of F-coalgebras). Suppose an end-
formation and universal morphism aspects of adjunctions, cf.                    ofunctor F : C → C. A category of F-coalgebras, denoted
diagrams 3 and 2.                                                               CoAlg(F), has F-coalgebras for objects and F-coalgebra ho-
                                                                                momorphisms for morphisms. Composition is composition
Example 5 (Product-exponential). The right product functor
                                                                                of F-coalgebra homomorphisms.
is left adjoint to the right exponential functor, ΠB ⊣ ΛB , see
examples 2 and 3, is indicated by commutative diagram                           Definition 11 (Final F-coalgebra). Suppose we have a cate-
                                                                                gory of F-coalgebras, CoAlg(F). A final F-coalgebra is an
                            A              A × BE                      (4)     F-coalgebra, denoted (A, fin), such that for every F-coalgebra
                                                       EE
                                                         EEf                   (B, β) in CoAlg(F) there exists a unique F-coalgebra homo-
                     f˜                 f˜×1B               EE
                                                              EE              morphism h : (B, β) → (A, fin).
                                                                   "
                     CB                    CB × B                  /C
                                                           eval                 Definition 12 (Anamorphism). An anamorphism is an F-
                                                                                coalgebra homomorphism to a final F-coalgebra homomor-
where f˜ is called the exponential transpose of f , and eval is                 phism, as indicated by the following commutative diagram:
the evaluation of each function f˜ in CB at each b in B.
                                                                                                                 β
Remark. An equivalent definition of adjunction emphasizes                                               B           / F(B)                  (6)
the relationship between hom-sets: an adjunction is a bi-                                                                 
                                                                                                                            F(h)
jection (i.e., one-to-one correspondence) between hom-sets                                             h
                                                                                                                           
HomC (X, G(Y )) and HomD (F(X),Y ) that is natural (in the                                                          / F(A)
                                                                                                        A
natural transformation sense) in variables X and Y , written                                                    fin
HomD (F(X),Y ) ∼    = HomC (X, G(Y )), as indicated by diagram
                                                                                Remark. Anamorphism h is denoted [(β)], using lens brackets
                                      X             / F(X)
                                             F                                  (Meijer, Fokkinga, & Paterson, 1991), since h is completely
                                                                        (5)
                                                                                determined by β. Anamorphism is also called unfold.
                                    f                        g
                                                                               Definition 13 (Conditional function). A conditional function
                                   G(Y ) o               Y                    is a function consisting of a predicate p? : A → {False, True}
                                             G
                                                                                and two alternative functions f : A → B and g : A → C, written
Hence, one can think of an adjunction as a kind of isomor-                      (p? → f , g) : A → B +C, that is defined as:
phism that is local to hom-sets, but not necessarily global to                                                     {
categories. This aspect will be useful when considering ad-                                                            f (a) ¬p?(a);
                                                                                            (p? → f , g) : a 7→
junctions in the context of corecursion.                                                                               g(a) otherwise.
Example 6 (Curry-uncurry). The product-exponential ad-
joint is familiar in functional programming in the form of                      That is, a function that applies alternative f to argument a if
the curry-uncurry operator, which converts an n-ary function                    p?(a) is false, otherwise alternative g. Recall that B +C is the
(i.e., a function of n arguments) to a unary function (i.e., a                  disjoint union of sets B and C.
function of one argument). For instance, the curry of ad-                       Example 7 (List anamorphism). For list-related construc-
dition, written as the binary function add : N × N → N, is                      tions built from elements in a set A, we have a category of
the unary function addN : N → NN , which takes a number x                       coalgebras on the endofunctor FA : X → 1 + A × X. It can be
and returns the addx function: e.g., addN : 1 7→ add1, where                    shown that a final coalgebra for this category consists of con-
add1 : n 7→ n + 1. Uncurry is the inverse of curry. These two                   ditional function (empty? → I∗ , ⟨head, tail⟩) : L → 1 + A × L,
operators are either sides of the bijection HomSet (N×N, N) ∼            =      where L is the set of lists constructed from elements of a
HomSet (N, NN ) obtained from the product-exponential ad-                       set A, predicate empty? tests for empty list, constant function
joint. Similarly, a state transition function is a binary func-                 I∗ : L → 1 returns unnamed element ∗, and product function
tion τ : A × S → S from inputs, a ∈ A, and states, s ∈ S, to                    ⟨head, tail⟩ : L → A × L returns a pair consisting of the head
                                                                            1879

and the tail of the given list. Every anamorphism to this final                                                        is either 0, for the empty list, or one plus the count of the rest
coalgebra is given by commutative diagram                                                                              (tail) of the list. For instance,
                                         (p?→I∗ ,⟨ f ,g⟩)
                                                                     / 1+A×X                                                           fold(0, inc)[a, b, c]
                     X                                                          
                                                                                   1+1 ×[( p?→I ,⟨ f ,g⟩)]                              = 1 + fold(0, inc)[b, c]
  [( p?→I∗ ,⟨ f ,g⟩)]
                                                                                    A                    ∗
                                                                                                                                          = 1 + (1 + fold(0, inc)[c]
                      L                                               / 1+A×L                                                             = 1 + (1 + (1 + fold(0, inc)[ ]))
                                 (empty?→I∗ ,⟨head,tail⟩)
                                                                                                               (7)                        = 1 + (1 + (1 + 0))
Since (empty? → I∗ , ⟨head, tail⟩) is an isomorphism, travers-                                                                            = 3.
ing diagram 7 from X to L clockwise yields the definition:
                                              {                                                                        Remark. Every list is entirely deconstructed before folding
                                                      []                                        ¬p?(x);                into a result. This approach is unrealistic as a cognitive model
     [( p? → I∗ , ⟨ f , g⟩)] : x 7→                                                                                    of learning, since it requires having seen all examples before
                                                      f (x) · [(· · ·)](g(x)) otherwise.
                                                                                                                       any learning can take place. Nonetheless, list catamorphisms
We also write [( p? → I∗ , ⟨ f , g⟩)] as unfold(p? → I∗ , ⟨ f , g⟩).                                                   provide an important step in that they are closely related to the
                                                                                                                       dual construction that affords a model of (on-line) learning at
Remark. The preceding definitions pertaining to coalgebras                                                             each input presentation, which we turn to next.
have duals, which are obtained by reversing morphisms. For
comparison, a catamorphism k : (A, in) → (B, β) from initial                                                                                Corecursion for lists
F-algebra (A, in) to F-algebra (B, β) as indicated by
                                                                                                                       Category theory provides a systematic treatment of corecur-
                                                          in         /A                                                sion in the form of anamorphisms, which is the basis for our
                                           F(A)                                                               (8)
                                                                                                                      categorical model of associative learning. Several simple ex-
                                                                                                                     amples of anamorphisms provide a guide to our model.
                                         F(k)                                  k
                                                                                                                       Repeating an item n number of times is realized as the
                                           F(B)                      /B                                                anamorphism, unfold(0? → I∗ , ⟨1, dec⟩) : N → L, where 0?
                                                          β
                                                                                                                       tests whether a number is zero, 1 is the constant function re-
Catamorphism k is denoted (|β|), by banana brackets (Meijer                                                            turning 1, and dec decrements a number by 1 (cf. diagram 7).
et al., 1991), since k is determined by β. Catamorphism is also                                                        For instance,
called fold. For lists built from elements of A, catamorphisms
                                                                                                                                  unfold(0? → I∗ , ⟨1, dec⟩)(3)
are given by
                                                                                                                                      = 1 · unfold(0? → I∗ , ⟨1, dec⟩)(2)
                                                       [empty,cons]
                                                                                        /L                                            = 1 · 1 · unfold(0? → I∗ , ⟨1, dec⟩)(1)
                             1 + A × L                                                                       (9)
                                                                                                                                    = 1 · 1 · 1 · unfold(0? → I∗ , ⟨1, dec⟩)(0)
            1+1A ×(|Iv , f |)
                                     
                                                                                              (|Iv , f |)                          = 1·1·1·[]
                             1+A×X                                                      /X                                            = [1, 1, 1].
                                                           [Iv , f ]
where empty : ∗ 7→ [ ] returns the empty list, cons : (h,t) 7→ h ·t                                                        Notice that the anamorphism just given is a state-less (or,
returns the list with (head) element h prepended to (tail) list t,                                                     memory-less) computation. To count list items, we need to
and Iv assigns the value v to the empty list. An initial algebra                                                       maintain a state for the number of previously counted items.
is an isomorphism. Thus, traversing diagram 9 from L to X                                                              For example, unfold(e? → I∗ , ⟨incl, tailr⟩) : N × LX → LN
counterclockwise yields the following definition:                                                                      takes the number of items counted so far, n ∈ N, and a list
                                                                                                                       l ∈ LX of elements from X, and returns the progressive count
                                         {
                                          []            7→ v;                                                          of list items c ∈ LN . In this example, the conditional e?
                      (|Iv , f |) :                                                                                    tests for an empty list (at the second component of a given
                                          h · t 7→ f (h, (|Iv , f |)(t)).
                                                                                                                       pair), i.e., no more items to be counted, effectively terminat-
                                                                                                                       ing the count when the list of remaining items is empty, via
We also write (|Iv , f |) as fold(Iv , f ).                                                                            I∗ , or incrementing the count and removing the counted item
Example 8 (Counting). Counting list elements is computed                                                               from the list, via product function ⟨incl, tailr⟩. The function
by the catamorphism, fold(0, inc) : L → N, where the first ar-                                                         incl : (n, l) 7→ n + 1 increments the counter (left component)
gument, 0, assigns the result of zero to the empty list, and the                                                       and ignores the list; the function tailr : (n, h · t) 7→ (n + 1,t)
second argument, inc, ignores the head (first element) of the                                                          maintains the new count and removes the counted item from
list and increments the count of the tail (remaining elements)                                                         the list of items to be counted. Compare diagram 7: object A
of the list (cf. diagram 9). In other words, the count of a list                                                       is now the set of natural numbers N, and X is the Cartesian
                                                                                                                   1880

product N × LX of the natural numbers with the set of lists of                        • µ : P × G → G is a function that merges the current pair of
elements from a set X. For instance,                                                     associated elements with the current association network,
                                                                                         returning an association network; and
        unfold(e? → I∗ , ⟨incl, tailr⟩)(0, [a, b, c])
                                                                                      • ν : P × G → P × G is the next state function that returns
            = 1 · unfold(e? → I∗ , ⟨incl, tailr⟩)(1, [b, c])                             the list of remaining pairs, and the merged association net-
            = 1 · 2 · unfold(e? → I∗ , ⟨incl, tailr⟩)(2, [c])                            work: i.e., ν = ⟨τ, µ⟩, where τ : P × G → P returns the tail
            = 1 · 2 · 3 · unfold(e? → I∗ , ⟨incl, tailr⟩)(3, [ ])                        of the pairs list, which ignores the association network.
            = 1·2·3·[]                                                                   An example illustrates the mechanism. The anamorphism
            = [1, 2, 3].                                                              given by diagram 10 is relabeled mext , the model with exter-
                                                                                      nal memory. Suppose the initial list of pairs: [(bread, butter),
   Notice, further, that this count anamorphism returns a list                        (knife, fork), (knife, butter)]. The initial state of the associ-
of counts, not a single count. The elements of such output                            ation network is set to the empty graph e. We denote pair
(likewise, input) lists are commonly interpreted as being in-                         and network lists at time t as pt and gt , respectively. Hence,
dexed by steps in time for corecursive models of data streams,                        the initial pair list p0 contains three pairs, and the inital net-
i.e., infinite lists (Rutten, 2000). We invoke a similar temporal                     work g0 = e. One time step is the mapping mext : (p0 , g0 ) 7→
interpretation of lists for our learning model.                                       g1 · mext (p1 , g1 ), where g1 is the association network contain-
                                                                                      ing the single edge σ1 : bread → butter (i.e., an association
              Categorical (corecursion) model                                         from bread to butter with strength of association σ1 ), and p1 is
We develop our model in two steps for expository purposes.                            the pairs list [(knife, fork), (knife, butter)]. This process con-
The first step treats the association network as an explicit in-                      tinues corecursively until we obtain g1 · g2 · g3 · mext (p3 , g3 )
put. This approach is simpler, but unrealistic since memory                           at which point the model returns the empty list (of networks)
is treated as external input. The second step treats memory as                        and terminates with the list [g1 , g2 , g3 ]. That is the evolution
internal using adjoint anamorphisms (adjoint unfolds).                                of association networks over time steps, with g3 being the fi-
                                                                                      nal network state indicated by the following diagram:
Network state as external input                                                                                                   σ1
                                                                                                                         bread          / butter                          (11)
                                                                                                                                            :
The capacity for learning associations is modeled as a func-
                                                                                                                                      uuu
                                                                                                                                 σ3
                                                                                                                                    uu
tion from a list of pairs (associates) to an association network.                                                                uu
Recall, from the counting example, that a simple anamor-                                                                       uu σ2
                                                                                                                         knife            / fork
phism does not maintain a state, and so does not suffice as
an associative learning model, since previous associations are                           An important feature of the anamorphism approach, in con-
lost. A memory is maintained by passing the results of earlier                        tast to a catamorphism approach, is that the computation at
items as an explicit input to the model. Accordingly, associa-                        each (time) step proceeds independently of the remaining
tive learning is modeled as a function from a list of pairs and                       steps. For example, the first item of the list g1 · mext (p1 , g1 ),
an association network to an updated association network.                             i.e., g1 , is not affected by the computation of the rest of the
The anamorphism (model) is indicated by the diagram                                   list. This property of anamorphisms justifies the temporal in-
                                                                                      terpretation of lists. Effectively, then, there is only one associ-
                                (e?→I∗ ,⟨µ,ν⟩)                                        ation graph produced by the model, whose state is indexed by
                P × G                        / 1 + G × (P × G)
                                                                                     time step t: i.e., the network gt in the list g0 · · · gt · mext (pt , gt ).
    [(e?→I∗ ,⟨µ,ν⟩)]
                                                         1+1 ×[(e?→I ,⟨µ,ν⟩)]
                                                                      ∗
                                                            A
                                                                                      Network state as internal memory
                                                           
                     L                             / 1+G×L                            The previous model depends on treating network state as
                            (pempty →I∗ ,⟨head,tail⟩)
                                                                                      a kind of external memory. The theory of adjoint cata-
                                                                             (10)
                                                                                      morphisms and anamorphisms—adjoint folds and unfolds
where:
                                                                                      (Hinze, 2013) allows us to treat network state as internal to
• P is a list of pairs of associated items;                                           the model. We make use of the product-exponential adjoint
                                                                                      introduced earlier. Recall that this construction effectively
• G is the set of (labeled) directed graphs (association net-                         provides a universal means of transforming the external state
   works), where each graph g ∈ G is a pair (E,V ) consisting                         map into an internal state map, as indicated by the following
   of a set of edges E and a set of vertices V , and each edge                        diagram (highlighting the bijection aspect of this adjunction):
   is a triple (s, σ,t), where s and t are the source and target
                                                                                                                  P 
                                                                                                                                  ΠG
   vertices and σ is the strength of association; hence                                                                                       / P×G                       (12)
                                                                                                                                                      
                                                                                                                                                        [(e?→I ,⟨µ,ν⟩)]
                                                                                                      ^I∗ ,⟨µ,ν⟩)] 
• L is the set of lists of association networks;                                                  [(e?→
                                                                                                                                                              ∗
                                                                                                                LG o                              L
• e? tests whether the list of associates is empty;                                                                               ΛG
                                                                                  1881

The internal model, which we denote mint , is the exponential       test for the understanding of John and Mary, (2) a test for the
transpose of the external model mext . That is, mint = mgext .      understanding of a complex entity case, analogous to a test
    A final algebra is a universal construction. Thus, we have      for the understanding of John loves Mary, and (3) a test of the
shown that the (second-order) systematicity of associative          prediction for another complex entity belonging to the same
learning follows from the same category theoretical princi-         equivalence class, analogous to a test for the understanding of
ples as other (first-order) forms of systematicity.                 Mary loves John. Failure to exhibit capacity to other members
                                                                    of the equivalence class counts against the theory of system-
                           Discussion                               aticity that predicts that class. Hence, the category theory ex-
                                                                    planation that we have put forward is testable, and amenable
The advantage of a category theory approach is that it pro-         to further empirical work.
vides a principled approach to (co)recursive cognitive capac-
ities. Symbol systems admit arbitrary recursion, but not ev-                             Acknowledgments
ery recursive formulation is systematic, in the sense of being
                                                                    We thank the reviewers for helpful comments. This work was
well-defined over all possible inputs. Well-definedness, cate-
                                                                    supported by a Japanese Society for the Promotion of Science
gorically, depends only on the well-definedness of the given
                                                                    Grant-in-aid (26280051).
F-(co)algebra, since the (unique) existence of an anamor-
phism (or, catamorphism) is guaranteed by the universal                                       References
property. Existence and uniqueness were motivations for tak-
                                                                    Aizawa, K. (2003). The systematicity arguments. New York:
ing a category theory approach to recursion in the first place
                                                                       Kluwer Academic.
(see, e.g., Bird & de Moor, 1997).
                                                                    Bird, R., & de Moor, O. (1997). Algebra of programming.
    The anamorphic (corecursion) explanation for second-
                                                                       Harlow, England: Prentice Hall.
order systematicity of learning is quite general. Moreover,
                                                                    Chomsky, N. (1980). Rules and representations. New York,
extensions to other forms of learning and associated models
                                                                       NY: Columbia University Press.
are straightforward. For instance, in the case of supervised
                                                                    Fodor, J. A., & Pylyshyn, Z. W. (1988). Connectionism
learning, P is a list of pairs of input-target representations,
                                                                       and cognitive architecture: A critical analysis. Cognition,
and G is a set of neural (feedforward, error backprogagation)
                                                                       28(1–2), 3–71.
networks. Supervised learning proceeds in the same corecur-
                                                                    Halford, G. S., Wilson, W. H., Andrews, G., & Phillips, S.
sive manner as already described, except that we replace the
                                                                       (2014). Categorizing cognition: Toward conceptual coher-
coalgebra updating associative networks with one for updat-
                                                                       ence in the foundations of psychology. Cambridge, MA:
ing (feedforward) neural networks. Unsupervised learning,
                                                                       MIT Press.
which omits the target, is similarly straightforward.
                                                                    Hinze, R. (2013). Adjoint folds and unfolds—an extended
    The generality of anamorphisms may leave some people               study. Science of Computer Programming, 78, 2108–2159.
wondering whether it is too general. In particular, since many      Mac Lane, S. (1998). Categories for the working mathemati-
species have the capacity for simple associative learning, why         cian (2nd ed.). New York, NY: Springer.
then do they not also have the capacity for more advanced           McLaughlin, B. P. (2009). Systematicity redux. Synthese,
forms of learning, such as learning via analogy? Recall that           170, 251–274.
the systematicity problem is at the level of the complex en-        Meijer, E., Fokkinga, M., & Paterson, R. (1991). Functional
tities, not at the level of their components. For example, the         programming with bananas, lenses, envelopes and barbed
capacity to understand that John loves cricket implies the ca-         wire. In Proceedings on the conference on functional pro-
pacity to understand John loves baseball given that one un-            gramming and computer architecture (Vol. 523, pp. 125–
derstands that John refers to a person, and that cricket and           144). Berlin, Germany: Springer-Verlag.
baseball refer to games. The capacity to understand that John       Phillips, S., & Wilson, W. H. (2010). Categorial composition-
loves cricket does not imply the capacity to understand John           ality: A category theory explanation for the systematicity
loves hanafuda when one does not understand the meaning of             of human cognition. PLoS Computational Biology, 6(7),
hanafuda—a Japanese card game. Likewise, we don’t expect               e1000858.
a capacity for learning associations to imply a capacity for        Phillips, S., & Wilson, W. H. (2012). Categorial composition-
learning by analogy, because association and analogy involve           ality III: F-(co)algebras and the systematicity of recursive
different kinds of underlying structures (Halford, Wilson, An-         capacities in human cognition. PLoS ONE, 7(4), e35028.
drews, & Phillips, 2014); categorically, they involve the exis-     Phillips, S., & Wilson, W. H. (submitted). The second-order
tence of different objects. Rather, we expect that if a subject        systematicity of associative learning: a paradox for classi-
has the capacity for the underlying structures, then a capacity        cal compositionality and a coalgebraic resolution.
for learning with respect to one kind of structure implies a ca-    Rutten, J. J. M. M. (2000). Universal coalgebra: a theory of
pacity for learning with respect to the other kind of structure,       systems. Theoretical Computer Science, 249, 3–80.
because they both involve the same form of (co)recursion.
    To test such claims of systematicity empirically, we need
three things: (1) a test for the base capacities, analogous to a
                                                                1882

