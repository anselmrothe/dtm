UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Identifying Sources of Intractability in Cognitive Models: An Illustration Using Analogical
Structure Mapping
Permalink
https://escholarship.org/uc/item/9680r258
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 30(30)
Authors
Van Rooji, Iris
Evans, Patricia
Muller, Mortiz
et al.
Publication Date
2008-01-01
Peer reviewed
  eScholarship.org                                   Powered by the California Digital Library
                                                                         University of California

                       Identifying Sources of Intractability in Cognitive Models:
                            An Illustration using Analogical Structure Mapping
                                               Iris van Rooij (i.vanrooij@nici.ru.nl)
                                            Nijmegen Institute for Cognition and Information
                                                   6525 HR Nijmegen, The Netherlands
                                                  Patricia Evans (pevans@unb.ca)
                                                       Faculty of Computer Science
                                                    New Brunswick, E3B 5A3 Canada
                                     Moritz Müller (moritz.muller@math.uni-freiburg.de)
                                                        Department of Mathematics
                                                         79104 Freiburg, Germany
                        Jason Gedge (gedge@cs.mun.ca) and Todd Wareham (harold@cs.mun.ca)
                                                     Department of Computer Science
                                                     St. John’s, NL A1B 3X5 Canada
                               Abstract                                 labelled by predicates and objects, and arcs directed from
                                                                        higher-order predicates to the lower-order predicates and ob-
   Many computational models in cognitive science and artifi-
   cial intelligence face the problem of computational intractabil-     jects that are their arguments (see Figure 1 for an illustra-
   ity when assumed to operate for unrestricted input domains.          tion). Because both the base and the target can have many
   Tractability may be achieved by restricting the input domain,        nodes and arcs, with complex connectivity, there exist many
   but some degree of generality is typically required to model
                                                                        possible mappings to choose from. To be precise, if both
                                                                                                                                  n  2
   human-like intelligence. Moreover, it is often non-obvious
   which restrictions will render a model tractable or not. We                                                                          n
   present an analytical tool that can be used to identify sources      base and target have n nodes, then there exist ∑                      · k!
   of intractability in a model’s input domain. For our illustra-                                                                k=0 k
   tion, we use Gentner’s Structure-Mapping Theory of analogy           possible mappings. For networks with 6 nodes this already
   as a running example.                                                leads to 13,327 possible mappings and for networks with 18
   Keywords: computational complexity; intractability; parame-          or more nodes the number of mappings exceed the seconds
   terized complexity; analogy; structure mapping
                                                                        since the birth of the universe. Exhaustively searching such
                                                                        a (super-polynomially sized) search space is unfeasible even
                           Introduction                                 for intermediate problem sizes. Yet the proposal that SMT
Computational intractability is a problem that plagues many             may model the human ability for analogizing—as well as the
models of human and artificial intelligence. If such models             desire to emulate this ability in artificial systems—raises the
are assumed to apply to inputs of real-world size and com-              question if there exist algorithms that can find the right map-
plexity, then they require more computational resources (e.g.,          ping without having to perform such an exhaustive search.
time or memory) than can be reasonably attributed to any                   A finding that seems to bear on this question is that
computing machine, whether human or artificial. The prob-               structure-mapping as defined by SMT is an NP-hard problem
lem seems to often arise from the rich, combinatorial struc-            (Evans, Gedge, Müller, van Rooij, & Wareham, 2008; Veale
ture of the representations posited by our theories of cogni-           & Keane, 1997). This means that all algorithms solving the
tion, but typically it is hard to tell what it is exactly about         problem are of super-polynomial complexity.1 It also means
the structure that makes the computations defined over these            that there is only one way to ensure SMT is a computationally
structures computationally so expensive. If cognitive mod-              feasible model of analogy-making:2 The structure-mapping
elers have a means of identifying structural properties that—
                                                                            1 This interpretation of the NP-hardness of SMT holds under the
either combined or in isolation—are responsible for a model’s
                                                                        assumption that P = NP, a mathematical conjecture that is unproven
intractability, then they could use this knowledge for coming           but has strong empirical support. The interested reader is referred to
up with informed hypotheses of how an intractable cognitive             Garey and Johnson (1979) and Arora and Barak (in press) for more
theory can be rendered tractable.                                       details.
                                                                            2 The problem of intractability is so familiar that many cognitive
   Take, for example, the influential theory of Dedre Gentner
                                                                        scientists may instantaneously have ideas about how this problem
(1983) of analogy, called Structure-Mapping Theory (SMT).               could be solved, but the fact of the matter is that all such solutions
According to this theory, humans form analogies by map-                 either restrict the domain of inputs for which the theory is believed
ping relations in one predicate structure (the base) to rela-           to hold or the theory is revised so as to allow for (slightly) different
                                                                        outputs than the one specified by the original theory (van Rooij, in
tions in another (the target). One can think of predicate struc-        press). Since our purpose is to present analytical tools for identifying
tures as directed acyclic graphs with the nodes in the graph            sources of intractability in a given theory, we focus on the first option
                                                                    915

processes must be assumed to operate for a restricted domain
                                                                                  a)                                               b)
of input structures, where those structures have special prop-                                                   Cause
erties that can be exploited in the tractable computation of
                                                                                         Cause          And                                     Cause
analogies.
   How can we find out what these special properties are?                        Gravity        Greater     Attracts    Revolve    Opposite−Sign Greater         Attracts    Revolve
One way of approaching this question (though not one that
                                                                                   Mass          Mass                                  Charge         Charge
we recommend) is to implement an algorithm that computes
structure-mappings and investigate how long it runs for dif-
                                                                                                 sun         planet                                  nucleus       electron
ferent input structures (e.g., Falkenhainer, Forbus, & Gentner,                                                                c)
1989). By systematically varying structural aspects of the in-
put one may then discover that even though the algorithm runs
slow for many input structures, it runs relatively fast for some.                              Greater     Attracts    Revolve                      Greater     Attracts    Revolve
By comparing the “easy” and “hard” inputs one may observe
                                                                                  Mass          Mass                                  Charge         Charge
that they differ in several respects, e.g., certain structural as-
pects may be relatively small, relatively large, or otherwise
                                                                                                sun         planet                                  nucleus       electron
special in the “easy” inputs. One may then be led to believe
that it is the absence of these special properties in the “hard”
inputs that makes structure-mapping hard in general.                                                                            d)
   Granting that such an approach may overcome the practical                                    PartOf          Affect        Control         PartOf            PartOf
obstacle that a systematic search of the space of inputs is it-
self computationally expensive (to our knowledge, so far only                            listener    listenership    composer         orchestra       percussion         drum
unsystematic searches have been performed for SMT), the
more important theoretical obstacle remains that we cannot                                      PartOf          Affect        Control         PartOf            PartOf
infer from the slow running of an algorithm that the structure-
                                                                                         civilian       society        general          army          artillery          cannon
mapping problem is intractable for the same domain of in-
puts. There could always exist a different algorithm for the
structure-mapping problem that runs fast for those same in-
                                                                                 Figure 1: Illustrations of graph representations of predicate-
puts.3 In other words, an algorithmic simulation approach can
                                                                                 structures and analogy-mappings as defined by SMT. (a) So-
perhaps tell us something about the computational efficiency
                                                                                 lar system predicate-structure. (b) Rutherford atom predicate-
of particular structure-mapping algorithms, but it need not tell
                                                                                 structure. (c) Analogy-mapping between (a) and (b). (d)
us anything about the complexity inherent in the structure-
                                                                                 Analogy-mapping between Composer and General predicate-
mapping problem. It is for this reason that we propose to use
                                                                                 structures. Parts (a) and (b) are adapted from (Falkenhainer
a different approach.
                                                                                 et al., 1989, Fig. 9) and part (d) is adapted from (Veale et al.,
   The approach that we investigate in this paper adopts the                     1999, Fig. 8).
analytical tools of computational complexity theory. We will
first explain how these tools can be used to identify what we
call ‘sources of complexity’ in an intractable problem (i.e.,                               A Method for Identifying Sources of
problem aspects that can confine the super-polynomial time                                                            Complexity
complexity inherent in a problem). We then use these tools
to test if aspects that have been proposed to be responsible                     Computational complexity theory actually refers to a whole
for the intractability of structure-mapping are indeed sources                   family of mathematical theories developed with the purpose
of complexity in SMT. We show that none of the conjectured                       of classifying problems according to their inherent complex-
aspects are—by themselves or in combination—responsible                          ity. Of particular relevance for our purposes is a relatively re-
for the intractability of SMT. We furthermore show that some                     cent variant called parameterized complexity theory, founded
previously unidentified aspects are so responsible. The non-                     by Downey and Fellows in the 90s and currently the topic of
obvious nature of these theoretical results illustrates the util-                many new complexity results and techniques (see the special
ity of the analytical tools that we describe.                                    issue edited by Downey, Fellows, & Langston, 2008). Param-
                                                                                 eterized complexity theory is motivated by the observation
                                                                                 that many NP-hard problems can be computed by algorithms
here (but see Hamilton, Müller, van Rooij, and Wareham (2007) and               whose running time is polynomial in the overall input size n
van Rooij and Wright (2006) for discussions of the second option).               and non-polynomial only in one or more small aspects of the
    3 In general, if A and A are two algorithms that compute in-                 input. These aspects are called parameters. As the main part
                        1       2
tractable problem P : I → O. Then there can exist two distinct input             of the input contributes to the overall complexity in a “good”
domains I1 , I2 ⊂ I such that A1 is a tractable algorithm for I1 but not
for I2 , and A2 is a tractable algorithm for I2 but not for I1 . If so, then     way, and only the parameters contribute to the overall com-
the problem P is computationally tractable for I1 ∪ I2 .                         plexity in a “bad” way, the problem is well-solved even for
                                                                             916

large inputs provided only that the parameters remain small.                set K. Proving fixed-parameter tractability may be techni-
This intuitive characterization is captured by the formal no-               cally challenging but is conceptually straightforward: It suf-
tion of fixed-parameter tractability (see also Downey & Fel-                fices to produce just one algorithm that computes the problem
lows, 1999).                                                                in fixed-parameter tractable time (see, e.g., Sloper & Telle,
                                                                            2008, for a review of generic techniques for building such al-
   Definition 1. Fixed-parameter tractability. Let P :                      gorithms). Fixed-parameter intractability can be established
   I → O be a problem with input parameters k1 , k2 , ..., km .             by proving the problem W[1]-hard (the parameterized analog
   Then P is said to be fixed-parameter tractable for pa-                   of NP-hard).5 To prove this it suffices to construct a parame-
   rameter set K = {k1 , k2 , ..., km } if there exists at least one        terized reduction from a known W[1]-hard problem P to the
   algorithm that computes P for any input of size n in time                problem P.
    f (k1 , k2 , ..., km )nc , where f (.) is an arbitrary computable
   function and c is a constant. If no such algorithm exists                   Definition 3. Parameterized reduction. Let P1 : I1 →
   then P is said to be fixed-parameter intractable.                           O1 and P2 : I2 → O2 be two problems with parameter set
                                                                               K1 and K2 respectively. Then a parameterized reduction
We note the following observation, which follows from Defi-                    from P1 to P2 consist of two algorithms, Ai and Ao , that
nition 1.                                                                      are fixed-parameter tractable relative to K1 , such that
   Observation 1. If P is fixed-parameter intractable                          – Ai transforms any input i1 ∈ I1 (with associated values
   for parameter set K then P is also fixed-parameter in-                         for parameters in K1 ) into an input i2 ∈ I2 (with the
   tractable for any subset of parameters K  ⊂ K. If P is                        elements in K2 bounded by some computable function
   fixed-parameter tractable for parameter set K then P is                        of K1 ), and
   also fixed-parameter tractable for any superset of param-                   – Ao transforms any output o2 = P2 (i2 ) into an output
   eters K  ⊃ K.                                                                o1 = P1 (i1 ).
Given the notion of fixed-parameter (in)tractability and Ob-                Note that if there exists a parameterized reduction from a
servation 1 we can derive a natural candidate for what defines              problem P to another problem P, then P is fixed-parameter
a source of complexity in an intractable problem (see also                  tractable only if P is too. After all, in that situation P can be
van Rooij, Stege, & Kadlec, 2005; van Rooij & Wareham, in                   computed in fixed-parameter tractable time by first transform-
press).                                                                     ing its input into the corresponding input for P, using algo-
                                                                            rithm A1 , then solving P, and finally transforming the output
   Definition 2. Source of complexity. Let P : I → O
                                                                            of P back to the corresponding output for P using algorithm
   be an intractable problem. Then parameter set K =
                                                                            Ao . This implies that, if P is fixed-parameter intractable, then
   {k1 , k2 , ..., km } is said to be a source of complexity in P,
                                                                            so is P.
   if P is fixed-parameter tractable for parameter set K and
   fixed-parameter intractable for all subsets K  ⊂ K.                              Candidate Sources of Complexity in
In other words, a parameter set K is considered a source of                                      Structure-mapping
complexity in an intractable problem if it is sufficient for cap-           The structure-mapping problem can be informally stated as
turing the non-polynomial complexity inherent in the prob-                  follows (see Evans et al. (2008) for a formalization of this
lem and it does not contain any unnecessary elements. The                   definition).
notion of a source of complexity, so defined, expresses the
intuitive idea that a parameter is a source of complexity if,               S TRUCTURE - MAPPING
all else being equal,4 high values of the parameter cause the               Input: Two directed acyclic graphs G1 = (V1 , A1 ) and
problem to be hard, and low values of the parameter cause                   G2 = (V2 , A2 ), each encoding a predicate structure.
it to be easy. In accordance, we judge an input aspect (in                  Output: The best of all structurally consistent mappings from
this case, elements of K being large) to be responsible for                 G1 to G2 .
the intractability of the problem if its absence (in this case,
elements of K being small) renders the problem tractable.                   Here a mapping from G1 and G2 is structurally consistent if
   It remains to be explained how one can determine if a prob-              the following two conditions are met: (1) a vertex in V1 is
lem P is fixed-parameter (in)tractable for some parameter                   mapped to at most one vertex in V2 and (2) for every predi-
    4 We add the phrase ‘all else being equal’ because there may ex-        cate v ∈ V1 that is mapped to a predicate v2 ∈ V2 also all the
ist some other parameter set K  distinct from K for which P may            arguments of v1 are mapped to the arguments of v2 . Further,
also be fixed-parameter tractable. If parameters in that set are small,     a mapping m1 is considered better than another mapping m2
then even if the elements of K are large, P will be tractable. This
means that a problem P need not have one unique source of com-                  5 We will work under the assumption W[1] = FPT (here FPT
plexity. We believe that this does not undermine the intuitive inter-       the class of fixed-parameter tractable problems). Like P = NP, this
pretation of large values for parameters in K being responsible for         mathematical conjecture is unproven but has strong empirical sup-
the intractability in P, even if large values for parameters in K  are     port. The interested reader is referred to Downey and Fellows (1999)
as well.                                                                    and Flum and Grohe (2006) for more details.
                                                                        917

if m1 maps relatively more higher-order predicates than m2 .
                                                                         Table 1: Overview of parameters for structure-mapping, with
SMT defines the order of a predicate to be the maximum or-
                                                                         the corresponding value of each parameter in the Rutherford
der of its arguments plus 1, with objects being order 0.
                                                                         example in Figure 1a/b, and the Composer-General example
    Now note that every instance of the structure-mapping
                                                                         in Figure 1d. Without loss of generality, we assume that G1
problem will have values for specific problem parameters,
                                                                         is larger than G2 .
each such parameter constituting a potential source of com-
plexity. Table 1 lists the parameters considered in this paper.                 Name     Definition                     Fig.    Fig.
For simplicity, in the remainder of this paper we will drop the                                                         1a/b    1d
subscript for a parameter xi and write x to refer to either x1 or               n1       number of vertices in G1       11      11
x2 (depending on which happens to be largest).
    Our choice of parameters is motivated in part by specu-                     n2       number of vertices in G2       9       11
lations in the literature about aspects of predicate structures
that may be responsible for the computational intractability                    h1       maximum order                  4       1
of SMT.                                                                                  of predicates in G1
    Based on the finding that their implemented structure-                      h2       maximum order                  3       1
mapping algorithm ran slower for the Composer-General ex-                                of predicates in G2
ample than for the Rutherford example, Falkenhainer et al.                      n1
                                                                                h1       measure of ‘flatness’ of G1    2.75    11
(1989) conjectured that the complexity of structure-mapping
may depend not so much on the number of vertices (n), but                       n2
                                                                                h2       measure of ‘flatness’ of G2    3       11
more on the height (h) of the predicate structures. Specifi-
cally, these researchers suggested that worst-case times occur                  p1       number of predicates in G1     9       5
when relatively ‘flat’ predicate structures (i.e., structures with
minimal or no predicate-nesting (see also Veale & Keane,                        p2       number of predicates in G2     7       5
1997, p. 1). To investigate this possibility using our pro-
posed tool of parameterized complexity analysis, we need to
                                                                                r1       number of root predicates      2       5
define a parameter that is large for ‘flat’ predicate structures
                                                                                         in G1
and prove that it is fixed-parameter (in)tractable. We propose
                                                                                r2       number of root predicates      3       5
to use nh as a measure of the relative ‘flatness’ of the input
                                                                                         in G2
structures. With this measure we intend to capture the idea
                                                                                s1       number of non-root             7       0
that flatness ( nh ) is large when height (h) is small, relative to
                                                                                         predicates in G1
the overall size of the graphs (n).
                                                                                s2       number of non-root             5       0
    We noticed that the Composer-General predicate struc-                                predicates in G2
tures, besides being relatively flat, also have relatively many                 oi       number of objects in Gi=1,2    2       6
root predicates r and relatively many objects o, especially
when compared to the Rutherford example. To investigate                         fi       frequency of a given           2       3
if they could serve as alternative explanations of the apparent                          predicate label in Gi=1,2
hardness of Structure mapping for these types of predicate                      ai       number of arguments            2       2
structures we included these parameters in our analysis. For                             per predicate in Gi=1,2
completeness, we also include the total number of predicates
(p) and the number of non-root predicates (s) in our analy-
sis, to investigate if possibly they could be responsible for the
intractability of Structure mapping for other types of inputs.           (Halford, Wilson, & Phillips, 1998). It is of interest to see if
    It has also been proposed that the “performance [of algo-            a bound on the arity of mentally represented relations helps
rithms for SMT] is more a function of representation and                 keep analogical mapping computational tractable for human
repetitiveness rather than . . . size [of the predicate structures]”     minds.
(Falkenhainer et al., 1989, p. 47). One possible measure
of repetitiveness is the number of occurrences of the same                                 Results and Discussion
predicate ( f ) in a given predicate structure. To investigate if
this form of repetitiveness indeed is a cause for difficulties           We next present a list of fixed-parameter (fp-) tractability and
for Structure-mapping algorithms we included f in the set of             intractability results for sets of parameters selected from Ta-
considered parameters.                                                   ble 1. Proofs of all these results can be found in Supplemen-
    Lastly, we included arity of predicates (a) in our analy-            tary Materials published online.6 We start with the results
sis, because there exists empirical evidence that this param-            for general input structures. Subsequently we also consider
eter is naturally kept small in human mental representations
by cognitive processing (e.g., working memory) limitations                   6 http://www.nici.ru.nl/˜irisvr/supplement08.pdf
                                                                     918

results for predicate structures consisting of ordered7 predi-                Structure mapping for predicate structures with ordered
cates only. It will become clear why this has relevance for                   predicates is
SMT.                                                                         5. fp-tractable for parameter set {o}
    Structure mapping in general is                                        To interpret Result (5), first observe that the Composer-
                                                                           General example in Figure 1d contains only ordered predi-
   1.   fp-intractable for parameter set {h, a, f , s}
                                                                           cates. This means that if we want to explain why this type of
   2.   fp-intractable for parameter set { nh }                            input is hard we may assume w.l.o.g. that we are dealing only
   3.   fp-tractable for parameter set {n1 }                               with predicate structures with ordered predicates. Then Re-
   4.   fp-intractable for parameter set {n2 , r, h, a, p}                 sult (5) naturally explains why Structure mapping algorithms
                                                                           run long for this type of input. After all, Result (5) shows
Result (1) means that the height of the predicate structures               that the parameter o (the number of objects in the predicate
(h), the arity of predicates (a), the frequency of predicate la-           structures) is a source of complexity for Structure mapping
bels ( f ), and the number of non-root predicates (s = p − r,              of predicate structures with ordered predicates, and o is rela-
where p is the total number of predicates and r is the num-                tively large in the Composer-General predicate structures.
ber of root predicates) are neither individually, nor combined                At this point, the reader may wonder if perhaps the pa-
in any way, a source of complexity for Structure mapping.                  rameters shown not to be sources of complexity for Structure
In other words, even if all these parameters are small then,               mapping in general (Results (1), (2), and (4)), may also turn
all else being equal, Structure mapping remains computa-                   out to be sources of complexity if inputs are constrained to
tionally unfeasible for all but small inputs. We particularly              predicate structures with ordered predicates only. This is not
note two important implications for the SMT literature: First,             the case, however, as is evidenced by Result (6).
even if repetitiveness in predicate structures introduces diffi-
                                                                             6. Results 1 − 4 hold even if the predicate structures con-
culties for structure-mapping, as proposed by Falkenhainer et
                                                                                 tain ordered predicates only
al. (1989, p. 47), then this will not be due to the repetitive-
ness of predicate labels alone, and second, the natural bound              From Result (6) we conclude that of all the parameters that
on arity in human mental representations assumed by Halford                we have considered in this paper, the relatively large size of
et al. (1998) is insufficient to yield analogical mappings com-            only one of them (viz., o) yields a parsimonious explanation
putationally tractable for human minds, at least for analogical            of the apparent ‘hardness’ of Structure mapping for inputs of
mappings as construed by SMT.                                              Composer-General type. Admittedly, the parameter n1 could
    Interestingly, we have also Result (2), which shows that               in principle be used to explain ‘hardness’ of this type (or any
contrary to the conjecture of Falkenhainer et al. (1989), the              type!) of input as well, but it would hardly be parsimonious,
flatness of a predicate structure (measured by nh ) is not a               because n1 ≥ o + p and courtesy of Result (5) we know that
source of complexity for Structure mapping. Also, contrary to              o already suffices to capture the non-polynomial complexity
the conjecture that the number of vertices do not matter much,             inherent in the Structure mapping problem for inputs like the
we have Result (3), showing that the number of vertices—at                 Composer-General example.
least in the larger of the two predicate structures, i.e., n1 —               We remark that Result (5) does not yet explain why Struc-
is a source of complexity. We should qualify, however, that                ture mapping for inputs of the type shown in Figure 1a/b (the
it is impossible to have large input if parameter n1 is small,             Rutherford example) is “easy”, because these predicate struc-
since the whole input size n1 + n2 is bounded by 2 × n1 . Since            tures contain unordered predicates (viz., AND(X,Y)). There-
intractability is only an issue for non-small inputs, the obser-           fore it is of interest to note that we have the following result
vation that n1 is a source of complexity is more or less redun-            which establishes that Result (5) also holds for general inputs
dant. We see that if we switch from n1 to n2 (i.e., the num-               with both ordered and unordered predicates.
ber of vertices in the smaller of the two predicate structures)               Structure mapping in general is
then the ability to confine the non-polynomial complexity in
Structure mapping to the parameter is lost (Result (4)). Also,               7. fp-tractable for parameter set {o}.
Result 4 shows that the number of root predicates (r) is not               Result (7) yields a natural explanation of why inputs like the
a source of complexity, not individually nor combined with                 Rutherford example make for easy structure-mapping, viz.,
any of the parameters h, a, n2 , p. In other words, like its               because the number of objects in base and target is small (in
relative flatness, the large number of roots in the Composer-              this case, o1 = o2 = 2).
General example in Figure 1d fails to explain why inputs of                   In sum, with our analyses we have shown that several (in-
this type (or any type) are “hard” for Structure mapping. We               tuitively plausible) conjectures about what makes structure-
next present a result that can explain the apparent hardness of            mapping computationally difficult are incorrect. In addition,
this type of input.                                                        our results show that the relative difficulty of the Composer-
     7 A predicate is said to be ordered if the order of its arguments     General example compared to the Rutherford examples can
matter, otherwise it is said to be unordered. For example, the predi-      be parsimoniously explained by the difference in number of
cate AND(X,Y) is unordered, but GREATER(X,Y) is ordered.                   objects in the predicate structures.
                                                                       919

                           Conclusion                                     2008-003). Department of Computer Science: Memorial
                                                                          University of Newfoundland.
Often algorithmic simulations of computational-level theo-
                                                                        Falkenhainer, B., Forbus, K. D., & Gentner, D. (1989). The
ries give good, first guesses about input aspects that cause
                                                                          structure-mapping engine: Algorithm and examples. Arti-
the computational problem defined by a cognitive theory to
                                                                          ficial Intelligence, 41, 1–63.
be computationally intractable. However, to validate those
                                                                        Flum, J., & Grohe, M. (2006). Parameterized complexity
guesses we need evidence that we have actually identified
                                                                          theory. Berlin: Springer.
sources of intractibility in the computational problem, rather
                                                                        Forbus, K. D., & Gentner, D. (1989). Structural evaluation
than artifacts of an inadvertently inefficient implementation
                                                                          of analogies: What counts? In Proceedings of the Eleventh
of the theory.
                                                                          Annual Conference of the Cognitive Science Society (pp.
   In this paper, we have illustrated how parameterized com-              341–348). Mahwah, NJ: Erlbaum.
plexity theory provides some useful analytical tools that can           Garey, M. R., & Johnson, D. S. (1979). Computers and in-
help substantiate claims or intuitions about what makes a                 tractability: A guide to the theory of NP-completeness. San
given problem hard or easy. The same tools also can help                  Francisco, CA: W.H. Freeman.
us discover when our intuitions about sources of intractabil-           Gentner, D. (1983). Structure-mapping: A theoretical frame-
ity are in fact mistaken. That such intuitions can be mistaken,           work for analogy. Cognitive Science, 7, 155–170.
even after considerable simulation tests, is illustrated by our         Halford, G. S., Wilson, W. H., & Phillips, W. (1998). Process-
results for SMT and how they bear on existing conjectures in              ing capacity defined by relational complexity. Behavioral
the literature about potential sources of intractability in this          & Brain Sciences, 21, 803–831.
theory.                                                                 Hamilton, M., Müller, M., van Rooij, I., & Wareham, T.
   Intuitions about sources of intractability may be more often           (2007). Approximating solution structure. In E. Demaine,
mistaken than we realize. Not only are people poor at intuit-             G. Z. Gutin, D. Marx, & U. Stege (Eds.), Structure The-
ing the speed of combinatorial expansion,8 but to pinpoint ex-            ory and FPT Algorithmics for Graphs, Digraphs, and Hy-
actly which aspects of representational structures are respon-            pergraphs. Schloss Dagstuhl, Germany: Internationales
sible for (or contribute to) computational intractability one             Begegnungs- und Forschungszentrum fur Informatik.
needs to understand the subtle interaction between a com-               Sloper, C., & Telle, J. A. (2008). An overview of techniques
binatorially complex domain and the problem to be solved                  for designing parameterized algorithms. Computer Jour-
for that domain. This is a highly non-trivial task. It is not             nal, 51, 122–136.
for nothing that a whole branch of mathematics is devoted to            Tversky, A., & Kahneman, D. (1973). Availability: A heuris-
building tools and concepts for performing exactly this task.             tic for judging frequency and probability. In D. Kahne-
   We think that cognitive scientists can greatly benefit from            man, P. Slovic, & A. Tversky (Eds.), Judgment under un-
adopting the tools of parameterized complexity theory, as                 certainty: Heuristics and biases. Oxford University Press.
many cognitive theories are known to face computational in-             van Rooij, I. (in press). The tractable cognition thesis. Cog-
tractability for unrestricted domains. If a computational-level           nitive Science.
theory can be shown to be tractable under certain input con-            van Rooij, I., Stege, U., & Kadlec, H. (2005). Sources of
straints and there is empirical evidence that inputs are in-              complexity in subset choice. Journal of Mathematical Psy-
deed so constrained for human cognizers, then the theory can              chology, 49, 160–187.
maintain a status of psychological and computational plausi-            van Rooij, I., & Wareham, T. (in press). Parameterized com-
bility, despite its intractability for unrestricted domains.              plexity in cognitive modeling: Foundations, applications
                                                                          and opportunities. Computer Journal.
                           References                                   van Rooij, I., & Wright, C. D. (2006). The incoherence of
Arora, S., & Barak, B. (in press). Computational complexity:              heuristically explaining coherence. In Proceedings of the
   A modern approach.                                                     28th Annual Conference of the Cognitive Science Society
Downey, R. G., & Fellows, M. R. (1999). Parameterized                     (p. 2622).
   complexity. Berlin: Springer.                                        Veale, T., & Keane, M. T. (1997). The competence of sub-
Downey, R. G., Fellows, M. R., & Langston, M. A. (2008).                  optimal theories of structure mapping on hard analogies. In
   The Computer Journal special issue on parameterized com-               Proceeding of the 1997 International Joint Conference on
   plexity: Foreword by the guest editors. Computer Journal,              Artificial Intelligence.
   51, 1–6.                                                             Veale, T., O’Donoghue, D., & Keane, M. T. (1999). Com-
Evans, P. A., Gedge, J., Müller, M., van Rooij, I., & Ware-              putability as a limiting cognitive constraint: Complexity
   ham, T. (2008). On the computational complexity of anal-               concerns in metaphor comprehension about which cogni-
   ogy derivation in structure-mapping theory (Tech. Rep. No.             tive linguists should be aware. In E. M. Hiraga, C. Sinha,
                                                                          & S. Wilcox (Eds.), Cultural, psychological and typologi-
    8 For example, Tversky and Kahneman (1973) found that people          cal issues in cognitive linguistics. Amsterdam: John Ben-
estimate 1 × 2 × 3 × 4 × 5 × 6 × 7 × 8 to be about 500, while it is       jamins.
more than 40,000.
                                                                    920

