UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
Recursion and Cognitive Science: Data Structures and Mechanisms
Permalink
https://escholarship.org/uc/item/0m81s8zz
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 31(31)
Authors
Garcia-Albea, Jose Eugenio
Lobina, David James
Publication Date
2009-01-01
Peer reviewed
 eScholarship.org                                 Powered by the California Digital Library
                                                                    University of California

                                           Recursion and Cognitive Science:
                                           Data Structures and Mechanisms
                                          David J. Lobina (davidjames.lobina@urv.cat)
                            CRAMC, Department of Psychology (URV)\Department of Philosophy (UB)
                                                Ctra. de Valls s\n, 43007, Tarragona, Spain
                                          José E. Garcı́a-Albea (jegarcia.albea@urv.cat)
                                         CRAMC, Department of Psychology, Ctra. de Valls s\n
                                                           43007, Tarragona, Spain
                              Abstract                                   tion; that is, if it’s defined in terms of itself: the characteristic
   The origin and application of Recursion in the formal sciences        feature is that each value is specified in terms of previous va-
   is described, followed by a critical analysis of the adoption         lues that the same function has already calculated.
   and adaptation of this notion in cognitive science, with a focus         Below follows a recursive definition of the class of facto-
   on linguistics and psychology. The conclusion argues against
   a widespread mistake in cognitive science, and recommends             rials, i.e., n! = n × n − 1 × n − 2 . . . × 3 × 2 × 1, where n is a
   recursion should only be used in reference to mechanisms.             natural number:
   Keywords: Recursion; Hierarchy; Iteration; Combinatory                Def. n!
   Operations; Data-structures.
                                                                                if n = 1, n! = 1 (base case)
                          Introduction                                          if n > 1, n! = n× (n − 1)! (recursive step)
Recursion has been recently identified as the defining fea-                 The calculation of the factorial of, for instance, 4 (i.e.,
ture not only of natural language (Hauser, Fitch, & Chom-                4!= 4× 3!), sees the factorial function calling itself in or-
sky, 2002), but of human cognition overall (Corballis, 2007).            der to calculate the factorial of 3, and so on until it reaches
However, it has received less than a satisfactory characterisa-          the factorial of 1, the base case, effectively terminating the
tion. More often than not, it has been applied to the structural         recursion.“Self-reference” is therefore the prominent feature,
complexity of some of the representations the human mind                 making recursion particularly apt to define infinite sets2 .
seems to have and use, irrespective of the mechanisms opera-                Recursion is also used in what mathematicians call “induc-
ting over these representantions. This is in clear discrepancy           tive proofs”, which are usually employed to prove if a given
with the formal sciences, where recursion originated. The                property applies to, for example, every natural number. It
following section identifies its origin and describes its em-            proceeds as follows: first we show that a given statement is
ployment in mathematical logic and computer science. Sub-                true for 1, then we assume it is true for n, a fixed number (the
sequent sections provide critical descriptions of its adoption           inductive hypothesis), and finally we show it’s therefore true
in cognitive science, with particular attention to linguistics           for n + 1 (the recursive step). If every step is followed cor-
and psychology. The last section concludes the essay.                    rectly, we conclude the statement is true for all numbers. An
                                                                         inductive proof employs recursion, but it should not be confu-
         Recursion and the Formal Sciences                               sed with it proper. After all, a recursive definition involves no
The word “recursion” entered the English language in the                 “inductive hypothesis”.
17th century as an adaptation of the past participle of the
Latin verb “recurrere”. It meant ‘a running back, backward               Recursion and Computer Science
course, return’ and was used in this sense by Robert Boyle in            Computer scientists’ employment of recursion is similar, al-
his New Experiments Physico-Mechanical: ‘the recursions of               though it differs in subtle but significant ways. This seems to
that Pendulum which was swinging within the Receiver’.                   follow from the different aims these two disciplines have3 .
   By the early 20th century this use was ‘rare, and obso-                  It appears to be customary to describe what mathemati-
lete’ and was so recorded in the 1933 edition of the Oxford              cians study as “declarative knowledge”, the “what is”, while
English Dictonary. Concurrently, however, mathematicians                 computer scientists focus on “imperative (procedural) know-
were starting to use this term in a different, more technical,           ledge”, the “how to”. Consequently, computer scientists are
manner.                                                                  under a number of constraints (inter alia: memory limitations,
                                                                         computational complexity, etc.; i.e., efficiency) that mathe-
Recursion and Mathematical Logic                                         maticians don’t seem to worry too much about. Specific re-
The more technical designation made reference, as Soare                      2 Cf.:
(1996) shows, to a 19th century technique: definition by in-                        ‘[t]he power of recursion evidently lies in the possibility of
                                                                         defining an infinite set of objects by a finite statement’ (Wirth, 1986,
duction1 . Thus, a function is recursive if it’s defined by induc-       p. 136).
                                                                             3 This section draws heavily from Abelson and Sussman (1996).
    1 We here focus on the original interpretation only —see Soare’s
paper for more details.
                                                                     1347

percussions for the role of recursion therein follow, but some            The first digit (4) indicates the number whose factorial we
brief definitions must precede their description.                      want to compute. The second and third represent the counter
    Computer “procedures” describe the rules for manipulating          and the product, respectively, and both start at 1. The process
data; they are much like mathematical functions, with the dif-         proceeds thus: the product is multiplied by the counter, then
ference that the former must be effective. Each datum is cal-          the counter is increasing by 1, the previous product is now
led an “expression”, which can either be a primitive element,          multiplied by the new counter, and so on until the counter
or two or more elements linked by an operator. We interact             reaches a value higher than the number whose factorial the
with a computer language by typing expressions via an “in-             process is calculating. The product at that point is the result
terpreter”, which “evaluates” these expressions. Every eva-            of the operation.
luation follows the basic cycle: a) evaluate all the elements             Recursion and iteration are closely related. In fact, they
of an expression; if it’s a compound, evaluate all the elements        are both types of recurrence: both involve the repetition of
of the subexpressions; and b) apply the procedure of the ope-          an operation (and both need the establishment of termination
rator to the operands.                                                 conditions). The former, however, involves self-reference and
    The first step establishes that in order to evaluate a com-        as a result chains of unfinished tasks, placing a heavy burden
plex expression, the interpreter must evaluate each element            on memory. In the case of the latter, the state of an itera-
of the subexpression first. The evaluation rule contains there-        tive process can be summarized at any stage by the number
fore an invokation of the rule itself; it’s a recursively-defined      of variables plus the fixed rule that establishes how the va-
procedure.                                                             riables are updated from one state to another. This is not pos-
    More significantly, computer scientists have studied what          sible with a recursive process, as the state at any stage must
it means for a “process”(the rules of manipulation procedures          take into consideration the deferred operations stored in me-
describe) to proceed recursively. Take the recursive definition        mory. In general, this makes iteration more computationally
of the factorial functions from the precedent section. The fol-        efficient, but certain tasks naturally call for a recursive rather
lowing is the process executed by this procedure to calculate          than an iterative process.
the factorial of 4:                                                       The recursive method employed to compute factorials was
                                                                       based on the rather subtle observation that we could solve
  (factorial 4)
                                                                       the problem by reducing it to one or more subproblems iden-
  (4 × (factorial 3))                                                  tical in structure but simpler to solve (Roberts, 2006, p. 4).
                                                                       A problem must in fact meet three properties in order to be
  (4 × (3 × (factorial 2)))                                            recursively solved: a) the original problem must be decom-
  (4 × (3 × (2 × (factorial 1))))                                      posable into simpler instances of the same problem, b) the
                                                                       subproblems must be so simple that they can be solved wi-
  (4 × (3 × (2 × 1)))                                                  thout further subdivision; and c) it must be possible to com-
  (4 × (3 × 2))                                                        bine the results of solving these subproblems into a solution
                                                                       to the original problem (Roberts, 2006, p. 8). Consequently,
  (4 × 6)                                                              the description of any recursive solution —the procedure—
                                                                       must be general enough so that it applies to the original pro-
  24
                                                                       blem and any subproblems; it must be able to call the original
    As the shape of the process reveals, there is an expansion         method with new arguments as it proceeds.
followed by a contraction, as chains of deferred operations               Our recursive solution to compute factorials met all the cri-
are built up before they are orderly performed —some sort of           teria, but it took a subtle observation to do so. That is, even
memory is needed to keep track of these operations. It’s this          though we managed to divide the original problem into hie-
accumulation of unfinished tasks, the result of a given opera-         rarchically organised subtasks, there was prima facie no sign
tion calling itself (self-reference), that characterises recursive     of such hierarchy in the data themselves. There are tasks, ho-
processes.                                                             wever, where an internal hierarchy is evident and a recursive
    There exist alternative ways to calculate factorials, though.      strategy is in principle the most natural solution.
A related and relevant method starts by multiplying 1 by 2,               Paradigmatic cases include problems, functions or data
then the result by 3, then by 4, until we reach n. The process         structures that are already defined in recursive terms (Wirth,
keeps a running product together with a counter from 1 up to           1986, p. 135). By a recursive data structure, we understand,
n, and the stipulation that n! is the value of the product when        following the definition of the U.S. National Institute of Stan-
the counter exceeds n finalises it. The resulting process is           dards and Techonology, an object or class ‘that is partially
“iterative”:                                                           composed of smaller or simpler instances of the same data
     ( f actiter 4 1        1)                                         structure’4 . That is, a structure that includes an abstraction of
     ( f actiter 4 2        1)                                         itself, and “trees”, “lists” and the like constitute the prototy-
     ( f actiter 4 3        2)                                         pical cases —trees inside other trees, or lists inside lists.
     ( f actiter 4 4        6)                                             4 URL: http://www.itl.nist.gov/
     ( f actiter 4 5 24)
                                                                   1348

   This introduces a distinction between “structural recur-           (d) NP → NP PP
sion” and “generative recursion” and much work has been
devoted to work out how close the fit between the two is.             (e) VP → V S
That is, do recursively-defined structures always call for re-           The last two rules are recursive, as categories to the left
cursive mechanisms to operate over them? The answer is                of the arrow are reintroduced on the right hand side. The
yes in object-oriented programming languages, as the form             recursion in (d) is direct: the NP rule rewrites NP as a re-
of the data establishes the form of the algorithm, but it is          sult. In (e) the recursion is indirect: an S rule, (a), generates
not automatic in other cases. In general, there is in fact no         NP and VP, and (e), a VP rule, reintroduces S. These rules
guarantee that a recursive algorithm is the best way to solve         can generate embedded structures such as ‘The guy [with the
a recursively-defined problem, as iteration might be a better         green car]’, and ‘John thinks (that) [Michael killed the poli-
option.                                                               ceman]’, respectively. Recursion then applied to the rules of
   There is therefore a natural fit between hierarchy and recur-      formation, much like in the formal sciences. However, since
sion, but it’s a matter of research to work out if the orbiting       the advent of the Minimalist Program (MP; Chomsky, 1995),
conditions of each problem suggest recursion or iteration.            one single operation is postulated: Merge. The role of recur-
                                                                      sion has varied since then, and while some scholars employ it
           Recursion and Cognitive Science
                                                                      to characterise the operations of Merge, the majority focus on
Ever since the advent of the representational-computational           the structures Merge purportedly operates over. We provide
paradigm, the formal sciences have informed the study of              below critical descriptions of recent examples of both views.
cognition to a great extent, and recursion hasn’t been an ex-
ception. More often than not, however, scholars have exclu-           Recursive Structures Pinker and Jackendoff (2005, PJ) de-
sively focused on the data structures the mind seems to have          fine recursion as, firstly, a ‘procedure that calls itself’, but
and use, rather than on the mechanisms operating over them.           then add it also applies to ‘a constituent that contains a consti-
This clearly departs from the formal sciences, and this shift         tuent of the same kind’ (p. 203); self-embedding. We provi-
hasn’t really been properly justified.                                ded examples of self-embedding above, which were genera-
   The following subsection provides examples from linguis-           ted by clearly recursive rules in the 1950’s. However, PJ talk
tics, where its treatment has been the most prominent. Fol-           of recursive structures independent of the mechanisms that
lowing subsections briefly describe possible applications in          generate them, and this is rather widespread in the literature.
other domains, such as higher-order cognition, or central sys-        Boeckx and Uriagereka (2007), for instance, point out that
tems, and the final section ends the essay with a set of conclu-      embedding is responsible for the recursive characteristics of
ding remarks.                                                         language, but provide no description of the recursiveness of
   The analysis will focus on two of the three levels of ex-          the mechanisms responsible for the generation of embedded
planation Marr (1982) outlined: a) the computational, which           structures.
provides an abstract characterization of the domain under                Much can be said about PJ’s definition. ‘A constituent in-
study, focusing on the mapping between one type of informa-           side a constituent of the same kind’ has kind refer to the ele-
tion into another, including the abstract properties that derive,     ment heading a phrase, making an NP inside another NP a
and b) the algorithmic, which focuses on how this mapping is          case of self-embedding, but an NP inside a VP not quite.
actually performed —it attempts to determine the appropriate          Yet, one of the fundamental results in linguistics has been
representation of the input and output, and the algorithm em-         the discovery that all phrases (NPs, VPs, etc.) have the same
ployed for the transformation.                                        configuration: an asymmetric [Spec [Head - Comp]] struc-
   The following subsections implicitly support a Classical           ture, regardless of which element heads the phrase. In this
architecture, where both representations and computations             respect, all structures manifest self-embedding: a sentence is
are in fact postulated. It is for others to establish how any         ultimately a collection of hierarchically organised phrases in-
of the following bears for a connectionist outlook, but no im-        side phrases of the exact, same geometrical shape. Nesting is
plications can be legitimately derived from what we say.              therefore the most prominent feature of tree representations
                                                                      of sentences, and recursive mechanisms would in principle
Recursion and Linguistics                                             care little about which element heads each phrase.
Work under this epigraph is an example of Marr’s computa-                And yet for the most part linguists talk of recursion with no
tional level, and recursion has featured therein ever since the       reference to mechanisms. Neeleman and Van de Koot (2006),
1950’s. Emile Post’s “rewrite rules” were at the time used to         for instance, identify recursion with nested structures: ‘recur-
account for how sentences were generated:                             sion will result if there is a set of primitive trees that can be
                                                                      combined into a structure in which the root node is repea-
(a) S → NP VP                                                         ted in the yield’ (ft. 5, p. 1530). We are not told how these
                                                                      primitive trees are actually combined, so it’s impossible to
(b) NP → D N
                                                                      establish if the combination is recursive or not — i.e., if re-
(c) VP → V NP                                                         cursion “results”. The onus seems to be on the structures that
                                                                      are repeated, that recur, as Hinzen (2008) explicitly states: ‘it
                                                                  1349

is only particular domains of syntactic organization that pro-          sive. In order for Merge to apply recursively, the derivation
ductively “recur” at all’ (p. 359). Recur is a rather poor choice       must contain chains of deferred operations.
of words; Recurse would be the right word to use, but there’s               Di Sciullo and Isac (2008) outline the operations of Merge
no indication he has anything other than recurrence in mind.            in some detail, which allows us to see if it applies recursively.
   This is not an isolated case; many other scholars use the            However: ‘Merge is recursive, where the output of Merge
term recursion to actually mean recurrence. Medeiros (2008)             may subsequently be submitted to Merge with other elements
contains myriad mentions of recursion, recursive, etc., and an          yielding a further constituent’ (ibid., p. 261). This definition
early appearance has it that ‘certain consistent patterns in re-        is incorrect: it merely describes a recurrent operation.
cursion’ amount to ‘repeated structural “templates”’ (p. 153).              Their description of Merge merits some attention, though.
Immediately after, the phrase “recursive templates” substi-             A derivation starts with a Numeration —a list of lexical items
tutes “repeated structural templates”, and the rest of the paper        out of which Merge will yield a syntactic structure. There are
analyses the geometrical properties of syntactic trees, with an         two types of Merge: External (EM; it takes two objects from
emphasis on “the minimal template structure” (perhaps part              the Numeration and merges them) and Internal (IM; it takes
of the primitive trees mentioned above), apparently needed to           an element from an already-built object and moves/copies it
‘have recursion at all’ (p. 174). The phrase “recursive shape”          to a different location in the structure it’s constructing); both
appears throughout the paper, but it refers to the geometrical          can only operate over two objects at a time. As they describe
shape of nested tree represetantions.                                   it, EM ‘iteratively selects items from the numeration, one by
   The obvious point to make is that recursion is being applied         one, until the numeration is exhausted and a complex object
to structures even if no indication is given as to how any of           is formed that contains all of the items that started out as in-
these are actually generated. And yet, this is not the situation        dividual elements’ (Di Sciullo & Isac, 2008, p. 261). Quite
we find in the 1950’s when recursion was first employed in              right: as there are no deferred operations, EM is clearly not
linguistic studies.                                                     recursive, even if they seem unaware of the discrepancy.
                                                                            IM is another matter, though. As soon as EM introduces
Recursive Mechanisms In the 1950’s recursion was used
                                                                        an object that will be moved/copied to another location later
in reference to mechanisms: ‘the output (of the language ac-
                                                                        on by IM, a chain containing a deferred operation is crea-
quisition device) is a system of recursive rules’ (Chomsky,
                                                                        ted. It then seems that recursion is a property of IM only,
1967, p. 455). As Tomalin (2007) shows, Chomsky argued
                                                                        which it has surprisingly only been mentioned in passing:
the need for a grammar to have ‘recursive steps’ as early as
                                                                        Epstein and Hornstein (2000) mention that recursion is ‘re-
1956; ‘recursive devices’ were needed, it was then argued, in
                                                                        legated to the transformational (i.e., movement) component’
order for the grammar to be able to ‘produce infinitely many
                                                                        (p.xii), while Soschen (2008) states that a ‘relation between
sentences’. It has been ‘conventionally assumed’, as Toma-
                                                                        individuals may constitute a phase and induce movement (re-
lin puts it (2007, p. 1785), that recursive components allow
                                                                        cursion)’ (p. 212).
a grammar to generate a potentially infinite set of syntactic
                                                                            Thus, recursion appears to apply in the operations of IM
structures. This is however not reason enough to employ re-
                                                                        only, but it’s not clear how promiscuous a property of IM it is.
cursion, as iteration may suffice. One needs to add that syn-
                                                                        This depends on a number of things: how many elements trig-
tactic structures are hierarchically organised, which certainly
                                                                        gering movement are introduced in the derivation, when they
calls for a recursive mechanism. A few examples will illus-
                                                                        are introduced and in which order the movement/copying
trate5 .
                                                                        operations apply. Movement may well apply iteratively ra-
   The introduction to Maratz, Miyashita, and O’neil (2000),
                                                                        ther than recursively if these orbiting conditions don’t create
for instance, states that the ‘combination of units in language
                                                                        chains of deferred operations.
is recursive’ (p. 3), but the actual example they use actually
isn’t. According to them, the derivation of The man saw the             Coda The employment of recursion in linguistics clearly
cat starts by merging the and cat, ‘the result of (this) combi-         departs from the formal sciences in one respect: the focus
nation becomes a unit for further combination, here with the            lies on data structures, rather than on the mechanisms these
word saw’ (ibid.). As described, the operation is strictly re-          structures call for. As Roberts (2006, p. 7) puts it: ‘one needs
current, but not necessarily recursive. Things don’t improve            to recognise that “recursiveness” is a property of the solution
if we add, following Chomsky (1995, p. 248), that Merge                 to a problem and not an attribute of the problem itself’.
‘embeds (an object) within some construction . . . already for-             As a caveat, one could also talk of “structural” and “ge-
med’. That merely makes Merge an operation that embeds                  nerative” recursion, but why multiply terms unnecessarily?
elements into other elements, but it doesn’t follow it’s recur-         When referring to “recursive structures”, linguists have ei-
    5 Tomalin (2007) analyses how recursion was employed in ma-         ther self-embedding, nesting, or simply recurrence in mind,
thematical logic and its influence in syntactic theory. However, he     so why not use those terms instead? Further, some structures
doesn’t consider its employment in computer science and its poten-      described as recursive may well not be generated recursively,
tial influence in cognitive science. He therefore focuses on how to     an inconsistency that ought to be avoided.
recursively define the operations of Merge (the procedure), but not
on whether the process his recursive definition describes proceeds
recursively (see supra).
                                                                    1350

Psycholinguistics                                                           recursion within is not clear.
Most studies of syntactic processing have focused on how                       The same applies to Corballis’s other examples, like episo-
new material is added to the already-built structure as the par-            dic memory abilities (e.g., “I know I experienced X”), or in
ser proceeds (i.e., where it is attached), but no-one has so far            the apparent hierarchical conceptualization of tool making.
probed if the parser’s structure-building mechanism, for there              All these examples make reference to hierarchically nested
must be one, proceeds recursively or not6 .                                 structures, and its application can be as broad as we can ima-
   Some factors suggest recursive processing to be at least                 gine.
possible. As a sentence, a TP (or else), is an asymmetric                      It is clearly the case that a basic feature of cognition is that
phrase structure composed of other asymmetric structures                    our thoughts can be composed of different bodies of informa-
(NPs, VPs, etc.), we are then faced with a complex problem                  tion from different modalities. There must be a conceptual
(processing a TP), easily reducible to simpler instances of the             system where it all comes together, and this system is likely
same problem (processing NPs, VPs, PPs, in succession); a                   to contain thoughts within thoughts. The overall problem re-
recursive solution is prima facie ideal.                                    mains though: it’s one thing for the representations the mind
   Parsing a sentence therefore involves building a TP phrase,              has and uses to exhibit hierarchy and nesting, but it’s ano-
but its completion depends upon the completion of every in-                 ther thing completely for the mental processes operating over
ternal phrase. Both a recursive and a non-recursive strategy                these representations to apply recursively.
can in principle solve the same task; thus, figuring out the                Recursive Mechanisms Much work has been undertaken
two strategies would allow us to predict how subjects would                 in the study of the architecture of cognition, and as Pylyshyn
proceed at any given moment. Different types of structures,                 (1984, 1988) points out, a computational system, whetever
leading to different predictions, could then be devised and                 the actual details, is one that reads, writes and transforms
tested7 .                                                                   structured representations.
Recursion and General Cognition                                                Let us focus on the system’s component in charge of orde-
                                                                            ring the rules/operations that apply over the data structures:
Much like in linguistics, many cognitive scientists have also               the Control. Control is in charge of sequencing action, but
applied recursion to both data structures and mechanisms,                   not only from point to point, as it can also transfer control
and some of the same problems arise. We’ll provide a few                    to another locus, therefore creating subroutines. Subroutines
examples of both cases, and will close the essay with the                   can send control to other subroutines, and a hierarchy of nes-
conclusions.                                                                ted operations develops. Once each subroutine is completed,
Recursive Structures Corballis (2007) illustrates a few                     control is sent back up to where it was transferred from, and
examples of what he takes to be recursion in different do-                  so on until it reaches the highest Control operation.
mains. He starts with language, and much like the previous                     G. A. Miller, Galanter, and Pribram (1960) were perhaps
section, focuses on nested structures, which turns out to be                the first scholars to outline a detailed model of serially-
the main feature of his entire discussion. Other examples in-               ordered compositional systems, and the focus was on TOTE
clude Theory of Mind abilities (i.e., belief ascription), which             (test-operate-test-exit) units, which they argued were the ba-
he argues involve recursion. He divides these abilities into                sic Control unit of cognition.
two levels: a) zero-order theory of mind, i.e. mental pro-                     This operation is based on feedback loops (self-reference),
cesses such as thinking or knowing; and b) first-order, i.e.                and TOTEs can therefore be nested into other TOTEs (chains
thinking or knowing what others are thinking or knowing,                    of deferred operations therefore arise), making it ideal for
which involves recursion.                                                   solving complex tasks divisible into functionally-equivalent
   The latter is implied in statements like “Mark thinks                    but simpler subtasks. It’s been recently described as an ins-
Lauren thinks he is an idiot”. Some experimental evi-                       tantiation of the Standard Account in early cognitive science
dence suggests that children’s abilities in understanding self-             (Samuels, forthcoming) —a “plan, then execute” model of
embedded sentences and self-embedded beliefs/desires is al-                 behaviour— and it’s ideally suited to account for the hierar-
most concurrent (P. H. Miller, Kessel, & Flavell, 1970),                    chical organization of the cognitive architecture. In short, it
even if the replication of these experiments shows that com-                constitutes the clearest case of recursion in cognition.
prehension of “recursive ToM” abilities starts a bit earlier
(Oppenheimer, 1986). Still, the experiments tells us nothing                                           Conclusion
about how children represent self-embedded beliefs/desires,                 Recursion developed in the formal sciences in reference to
and even less about how children process self-embedded sen-                 combinatory operations, mechanisms and the like.
tences OR self-embedded beliefs/desires. In short, the role of                 In the 1950’s, linguists correctly employed recursion in re-
    6 Mention of recursion in the psycholinguistics literature usually
                                                                            ference to specific rewrite rules, but ever since their elimi-
refers to self-embedding (central or tail), a related but entirely dif-     nation from linguistic theory, most linguists have used recur-
ferent matter to what we’re saying here.                                    sion, rather puzzlingly, to refer to those structures that recur-
    7 This empirical work is currently being undertaken by the au-          sive rewrite rules were used to generate. This may well be the
thors.                                                                      unfortunate legacy of employing rewrite rules. Other linguists
                                                                        1351

have focused on the operation Merge, which is welcome, but          Corballis, M. (2007). The uniqueness of human recursive
a satisfactory treatment is yet to be provided.                       thinking. American Scientist, 95, 240-248.
    There seems to be a strong tendency to confuse                  Di Sciullo, A. M., & Isac, D. (2008). The asymmetry of
hierarchically-structured representations with recursion.             merge. Biolinguistics, 2, 260-290.
Even though hierarchical data structures call for recursive         Epstein, S. D., & Hornstein, R. (2000). Working minimalism.
mechanisms, the latter are not automatic because of the               Cambridge, MA.: The MIT Press.
former. Recursion always involves hierarchy, but not all            Hauser, M. D., Fitch, W. T., & Chomsky, N. (2002). The
hierarchy involves recursion —iteration may well be the right         faculty of language: what is it, who has it, and how did it
candidate for some structures/tasks. Since all computational          evolve? Science, 298, 1569-1579.
tasks that can be solved recursively can also be solved             Hinzen, W. (2008). Prospects for an explanatory theory of
iteratively, extra care needs to be employed when arguing for         semantics. Biolinguistics, 2, 348-363.
one or the other.                                                   Maratz, A., Miyashita, Y., & O’neil, W. (2000). Image, lan-
    There are however good reasons to believe that recursive          guage, brain. Cambridge, MA.: The MIT Press.
mechanisms do apply in cognition, and brief descriptions of         Marr, D. (1982). Vision: A computational investigation into
these mechanisms have been provided. Most of our discus-              the human representation and processing of visual infor-
sion has focused on Marr’s computational level (i.e., Merge           mation. San Francisco: W. H. Freeman & Company.
and TOTE units), as little work on recursive processing has         Medeiros, D. (2008). Optimal growth in phrase structure.
been undertaken in cognitive science. Some indications have           Biolinguistics, 2, 152-195.
been provided of what this empirical work might actually in-        Miller, G. A., Galanter, E., & Pribram, K. H. (1960). Plans
volve, and this short essay may well be regarded as a theore-         and the structure of behaviour. New York, New York: Holt,
tical clean-up of the role of recursion in cognitive science.         Rinehart and Winston, Inc.
    It is not a matter of terminology; applying recursion to        Miller, P. H., Kessel, F. S., & Flavell, J. H. (1970). Thin-
structures or to mechanisms, or to the fit between the two,           king about people thinking about people thinking about...:a
results in substantial claims regarding the specific properties       study of social cognitive development. Child Development,
of the representations and operations the mind manifests. It          41, 613-623.
is in this light that most statements regarding the uniqueness      Neeleman, A., & Van de Koot, J. (2006). On syntactic and
of recursion in either human language or cognition should be          phonological representations. Lingua, 116, 1524-1552.
viewed. There are strong reasons to think that hierarchically-      Oppenheimer, L. (1986). Development of recursive thinking.
structured representations are unique in humans, but it is no         International Journal of Behavioural Development, 9, 401-
small matter to discover if the mechanisms operating over             411.
them proceed recursively or not, with all the related issues        Pinker, S., & Jackendoff, R. (2005). The faculty of language:
it involves (memory load, architectural complexity, etc.).            what’s special about it? Cognition, 95, 201-236.
    It is therefore strongly recommended that the focus shifts      Pylyshyn, Z. (1984). Computation and cognition. Cam-
from representations to mechanisms, with an emphasis on               bridge, MA.: The MIT Press.
how close the correspondence between recursive representa-          Pylyshyn, Z. (1988). Computing in cognitive science. In
tions and recursive operations is.                                    M. I. Posner (Ed.), Foundations of cognitive science (p. 49-
                                                                      92). Cambridge, MA.: The MIT Press.
                     Acknowledgements                               Roberts, E. (2006). Thinking recursively with java. Hoboken,
The first author has been supported by the AGAUR grant                NJ: John Wiley and Sons, Inc.
2008FI-00058 and the Anglo-Spanish Society 2008 02 scho-            Samuels, R. (forthcoming). Classical computationalism and
larship; both authors have been supported by the Spanish Mi-          the many problems of cognitive relevance. Studies in His-
nistry of Education grant SEJ2006-11955.                              tory and Philosophy of Science.
                                                                    Soare, R. (1996). Computability and recursion. The Bulletin
                          References                                  of Symbolic Logic, 2(3), 284-321.
Abelson, H., & Sussman, J., G. J. with Sussman. (1996).             Soschen, A. (2008). On the nature of syntax. Biolinguistics,
   Structure and interpretation of computer programs. Cam-            2, 196-224.
   bridge, MA.: The MIT Press.                                      Tomalin, M. (2007). Reconsidering recursion in syntactic
Boeckx, C., & Uriagereka, J. (2007). Minimalism. In                   theory. Lingua, 117, 1784-1800.
   G. Ramchand & C. Reiss (Eds.), The Oxford handbook of            Wirth, N. (1986). Algorithms and data structures. USA:
   linguistic interfaces (p. 541-574). Oxford, England: Ox-           Prentice Hall Publishers.
   ford University Press.
Chomsky, N. (1967). Recent contributions to the theory of
   innate ideas. Synthese, 17, 2-11.
Chomsky, N. (1995). The minimalist program. Cambridge,
   MA.: The MIT Press.
                                                                1352

