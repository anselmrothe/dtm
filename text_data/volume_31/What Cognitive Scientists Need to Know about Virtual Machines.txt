UC Merced
Proceedings of the Annual Meeting of the Cognitive Science
Society
Title
What Cognitive Scientists Need to Know about Virtual Machines
Permalink
https://escholarship.org/uc/item/8nb4n0vf
Journal
Proceedings of the Annual Meeting of the Cognitive Science Society, 31(31)
Author
Sloman, Aaron
Publication Date
2009-01-01
Peer reviewed
 eScholarship.org                                 Powered by the California Digital Library
                                                                    University of California

                What Cognitive Scientists Need to Know about Virtual Machines
                                            Aaron Sloman (A.Sloman@cs.bham.ac.uk)
                         School of Computer Science, University of Birmingham, Birmingham, B15 2TT, UK
                              Abstract
                                                                          Philosophers have offered metaphysical, epistemological
   Many people interact with a collection of man-made virtual          and conceptual theories about the status of such entities,
   machines (VMs) every day without reflecting on what that im-        for example in discussing dualism, “supervenience”, “real-
   plies about options open to biological evolution, and the im-       ization”, mind-brain identity, epiphenomenalism and other
   plications for relations between mind and body. This tutorial
   position paper introduces some of the roles different sorts of      “isms”. Many deny that non-physical events can be causes,
   running VMs (e.g. single function VMs, “platform” VMs) can          unless they are identical with their physical realizations.
   play in engineering designs, including “vertical separation of      Non-philosophers either avoid the issues by adopting various
   concerns” and suggests that biological evolution “discovered”
   problems that require VMs for their solution long before we         forms of reductionism (if they are scientists) or talk about lev-
   did. This paper explains some of the unnoticed complexity in-       els of explanation, or emergence, without being able to give
   volved in making artificial VMs possible, some of the implica-      a precise account of how that is possible. I shall try to show
   tions for philosophical and cognitive theories about mind-brain
   supervenience and some options for design of cognitive archi-       how recent solutions to engineering problems produce a kind
   tectures with self-monitoring and self-control.                     of emergence that can be called “mechanism supervenience”,
   Keywords: virtual machine; virtual machine supervenience;           and conjecture that biological evolution produced similar so-
   causation; counterfactuals; evolution; self-monitoring; self-       lutions.1 Moore (1903) introduced the idea of supervenience.
   control; epigenesis; nature-nurture; mind-body;                     Davidson (1970) transferred it from ethics to the context of
                                                                       mind/body relations, inspiring much subsequent discussion,
                          Introduction                                 e.g. (Kim, 1993, 1998). Space limits rule out discussing re-
Two concepts of a “virtual machine” (VM), have been devel-             lations between “supervenience” and “realization”. A useful
oped in the last half century to aid the theoretical understand-       introduction is in the Stanford Encyclopedia of Philosophy,
ing of computational systems and to solve engineering design           though it ignores the engineering (computing) examples.
problems. The first, Abstract virtual machine (AVM), refers               Several varieties of supervenience can be distinguished:
to an abstract specification of a type of system, e.g. a Turing        • property supervenience: (e.g. having a certain temperature su-
machine, a Universal Turing machine, the Intel pentium, or                pervenes on having molecules with a certain kinetic energy);
the virtual machine defined by a language or operating sys-            • pattern supervenience: (e.g., supervenience of various horizon-
tem, e.g. the Java VM, the Prolog VM, the SOAR VM, the                    tal, vertical and diagonal rows of dots on a rectangular array of
                                                                          dots, or the supervenience of a rotating square on changes in the
Linux VM, etc. An AVM is an abstract object that can be                   pixel matrix of a computer screen);
studied mathematically, e.g. to show that one AVM can be               • mereological, or agglomeration, supervenience: possession of
modelled in another, or to investigate complexity issues.                 some feature by a whole as the result of a summation of features
   The second concept refers to a running instance of a VM                of parts (e.g. supervenience of the centre of mass of a rock on the
                                                                          masses and locations of its parts, each with its own mass);
(Running virtual machine, RVM), e.g. the chess RVM against
which an individual is playing a game at a certain time, the           • mathematical supervenience: e.g. Euclidean geometry can be
                                                                          modelled in arithmetic, using Cartesian coordinates, and in that
editor RVM I am using to type these words, the Linux RVM                  sense geometry supervenes on arithmetic.
running on my computer, the networked file-system RVM in               • mechanism supervenience: supervenience of one machine on
our department and the internet – a massive RVM composed                  another: a set of interacting objects, states, events and processes
of many smaller RVMs, instantiating many different AVMs.                  supervenes on a lower level reality (e.g., supervenience of a run-
                                                                          ning operating system on the computer hardware).
   The RVM concept has deep features that have not been
widely recognized, or adequately described. Importantly dif-              This paper is about mechanism supervenience, relating
ferent sub-cases are defined below, e.g. specific VMs (SVMs)           RVMs with PMs. It is not concerned with the simple case
and platform VMs (PVMs). I conjecture that biological evo-             of how one property, pattern, or entity relates to others, but
lution “discovered” some of the problems for which different           with how a complex ontology (collection of diverse entities,
sorts of VM are solutions long before we did and produced              events, processes, states, with many properties, relationships
designs for RVMs whose functions we need to understand                 and causal interactions) relates to another ontology. It could
better. Moreover, understanding relations between these VMs            also be called “ontology supervenience”, or perhaps “ontol-
and the underlying physical machines (PMs) in which they               ogy instance supervenience”. Davidson described superve-
are implemented can help to clear up some old philosophical            nience as a relation between properties or “respects”, whereas
problems and pose new ones, including problems about men-              mechanism supervenience involves a relation between inter-
tal causation. This will add clarity and precision (including          acting parts and relations of complex ontology-instances, not
engineering design information) to the closely related pair of         just properties. A single object with a property that super-
concepts “realization” and “supervenience”, and can provide            venes on some other property is a very simple special case.
new insights into old puzzles about emergence and the exis-
tence and causal efficacy of non-physical states and processes             1 See http://www.cs.bham.ac.uk/research/projects/cogaff/09.html#vms
e.g. mental and socio-economic states and processes.                   for more details than this conference paper can include.
                                                                   1210

                    What Is a Machine?                              transferred to a new PM, and the old PM destroyed, but no
A machine is a complex enduring entity with a (possibly             RVM can work without being implemented in a PM. A more
changing) set of parts that interact causally with one another      complete discussion (Sloman, 1978, Ch. 6) would show that
and/or with the machine’s environment. The interactions may         human-like RVMs are implemented partly in the physical en-
be discrete or continuous, sequential or concurrent. Different      vironment (e.g. extending short term memories) and partly in
parts of the machine, e.g. different sensors and effectors, may     other people, e.g. needed for reference to remote events and
interact with different parts of the environment concurrently.      places (as P.F. Strawson showed), and for use of concepts like
The machine may treat parts of itself as parts of the environ-      ‘date’, ‘country’, ‘money’, ‘crime’, ‘fame’, etc.
ment (during self-monitoring), and parts of the environment
as parts of itself, e.g. tools, or diagrams (Sloman, 1978, Ch       Not All RVMs Are Computer-based
6&7). The machine may be fully describable using concepts           Things mentioned in gossip, political debate, novels, plays,
of the physical sciences (plus mathematics), in which case it       social sciences, etc., include RVMs, even though the label
is a physical machine (PM). Examples include gear mecha-            “machine” is unusual in this context. Such RVMs are in-
nisms, clouds, electric motors, tornadoes, plate tectonic sys-      volved in many causal interactions: e.g. jealousy can cause
tems, and molecular machines in organisms. Many machines            weeping, poverty can cause crime, and crime can cause mis-
manipulate only matter and energy, whereas some, including          ery. There are socio-economic NPDMs implemented (partly)
biological organisms, manipulate information (often in order        in running mental VMs, implemented partly in brains and
to control manipulation of matter and energy).                      partly in aspects of the physical environment. These enti-
                                                                    ties and their causal interactions, properties, relations, struc-
Not All Machines Are Physical Machines                              tures, states, events, and processes, are accurately describ-
Some information-processing machines have states, pro-              able only by using concepts that are not physically definable,
cesses and interactions whose best descriptions use concepts        even though the mechanisms are implemented (ultimately) in
that cannot be defined in terms of those of the physical sci-       PMs. Neural mechanisms appear to be VMs implemented
ences, e.g. “inferring”, “checking spelling”, “playing chess”,      in physical/chemical machines. Chemical processes can be
“winning”, “threat”, “strategy”, “desire”. “belief”, “plan”,        viewed as running VMs, whose entities, states, processes,
“crime”, and “economic recession”. There is no space to de-         and causal interactions are “fully implemented” in lower
fend the indefinability claim here, though many will find it        level PMs. Physics itself has layers, including common-
obvious. Examples of Non Physically Describable Machines            sense physics of billiard ball interactions, implemented in the
(NPDMs) include socio-economic machines, ecosystems and             atomic/molecular layer, which physicists are trying to explain
some biological control systems, e.g. motivational mecha-           as implemented in deeper layers. Nobody knows how many
nisms. NPDMs are ubiquitous in computing systems, but               layers will be required.
go unnoticed, or misunderstood, by many researchers trying
to understand relations between physical and non-physical           Misconceptions About VMs
states and processes. If an RVM contains causally interact-         Philosophers and others have written about VMs, but most ig-
ing components that cannot be described using concepts of           nore the variety of types, the complexity of relations between
the physical sciences, then some of its states and processes        VMs and PMs, and the variety of causal interactions. Some
cannot be directly measured or detected using the techniques        suggest wrongly that talk of VMs is just metaphorical: this
of physics alone, although some physical measures may cor-          ignores advances in science and engineering that go far be-
relate with non-physical phenomena. Examples are run-               yond making metaphors. The engineer who fixes a bug in a
ning computer programs doing things like checking spelling,         VM specification that caused a plane to crash is not dealing
playing chess, sorting email, computing statistics, etc. “In-       with metaphors: future runs of the VM will include different
correct spelling” cannot be defined in terms of concepts of         processes. Many still assume that every virtual machine is
physics (e.g. “length”, “velocity”, “mass”, “energy”, “force”,      a finite state machine (FSM), with a collection of states be-
“charge”, “temperature”).                                           tween which it switches, triggered by input signals, with only
   Computer scientists and engineers refer to NPDMs as “Vir-        one (atomic) state existing at a time. A theory that minds are
tual Machines” (VMs). This can cause confusion, since “vir-         like that (Block, 1996) could be called atomic state function-
tual” sometimes implies “unreal”, as in “virtual reality” (VR).     alism. Turing demonstrated that, with an infinite tape, this
However, a running NPDM/VM really has parts that inter-             can provide a surprisingly powerful model of possible forms
act with one another and with the environment, in computing         of information processing. But it is not general enough for
systems, e.g. spread-sheets, word-processors, and flight con-       our purposes. It cannot cope with what goes on in current
trollers. They can make things happen outside the computer.         multiprocessing computers with multiple external interfaces,
A person in a VR game is an entity in a RVM, and its actions        because the machine table is not the only controller.
can cause things to happen even though it is not a real person.        A richer model involves a RVM composed of multiple in-
   Every RVM depends for its existence and efficacy on a PM         teracting FSMs, only some of which interact directly with the
on which it is implemented. This is causal, not substance           environment, possibly using external input and output inter-
dualism: an RVM and its main causal interactions can be             faces including analog-to-digital and digital-to-analog con-
                                                                1211

verters, all requiring “device driver” software.                    e.g. list A contains list B and B contains A (Sloman, 1978).
   Instead of having a fixed set of sub-processes, modern com-          If you open up such systems you will not see the virtual
puting systems allow new VMs of varying complexity to be            machine components, only the hardware components. Like-
constructed dynamically, some running for a while then stop-        wise, as explained above, the existence and properties of the
ping, others going on indefinitely, some spawning new sub-          RVMs (e.g. playing chess, or correcting spelling) cannot be
VMs, which in turn can spawn new sub-VMs. If analog de-             directly detected by physical measuring devices. They can
vices are included, there can be VM states that change con-         only detect more or less reliable physical correlates. Reliable
tinuously, instead of only discrete changes. Some VMs can           detection of VM states, processes, and events by external de-
effectively model continuous change while running on digi-          vices may be impossible for systems with highly dynamic or
tal devices (e.g. in digital video and digital audio systems).      idiosyncratic virtual-physical mappings. This may also be
Other VMs may not be able to tell whether they are interact-        true of some mental RVMs.
ing with discrete or physically continuous mechanisms.
   Not only static parts and relations but also processes and       Causation in computing systems
causal interactions can supervene on physical phenomena.            A common misconception about causation in computers is
Many people think multiple processes cannot run in paral-           that PM events occur in sequence, every VM event is caused
lel on a single-CPU computer, because only one process can          by a specific PM process associated with a particular phys-
run at a time. This ignores how memory mechanisms work in           ical part, and causation is one-way, as depicted crudely in
computers. Different software processes have (overlapping)          Fig. 1. This is how the supervenience or realization of mind
regions of memory allocated to them, which endure in par-           on matter is conceptualised by many philosophers. The popu-
allel, so that a temporarily passive process can affect an ac-
tive one that reads some of its memory, justifying the descrip-
tion of “enduring interacting sub-systems”. In any case, how
many CPUs share the burden of running a multi-component
VM is a contingent feature of its implementation, since some
operating systems on multi-cpu systems can dynamically dis-
tribute processes among processors as available. Moreover,
interrupt handlers connected to constantly “on” physical de-
vices, e.g. keyboard and mouse interfaces, video cameras,
etc., allow some processes to constantly watch or control the               Figure 1: A tempting but incorrect causal model
environment even when they don’t have control of the CPU.
   Another common misconception is that there are fixed cor-
relations between VM and PM entities and events. The rela-
tionships between RVMs and PMs can be continually altered
by virtual memory systems (paging mechanisms), and sys-
tems using “garbage collection” (reclaiming physical or vir-
tual memory that’s no longer in use). The use of structure
sharing, changing mixtures of precomputed and computed-
on-the-fly structures, and dynamic process creation and ter-
mination, can cause enduring and fleeting VM entities, rela-
tionships, events, and processes, to have no fixed PM corre-
lates. Different subsets of physical entities can implement an
enduring VM entity at different times in its history.                    Figure 2: A (slightly) more accurate model – see text.
   A PM and the VM it implements need not be isomorphic.            lar model of computers as supporting a single ordered stream
There need not be any part of the PM that is isomorphic with        of discrete events is false: a modern computing system has
the VM, not even instantaneously. The structure of the VM           many different physical components that are active in paral-
can change significantly without structural changes occurring       lel, including memories, external sensor interfaces reading in-
at the physical level though the physical states of millions        formation into memory, and output interfaces transmitting in-
of switches may need to change to alter conditional connec-         formation to external systems, some measuring or controlling
tions. A very large “sparse array” in the VM may contain            continuously varying signals: voltages, speeds, temperatures,
many more locations than there are switches in the PM. An-          tilting (e.g. using gyroscopes) and chemical concentrations.
other process will find the sparse array indistinguishable from     As indicated in Fig. 2, the (spatial and temporal) granular-
one implemented using an isomorphic PM structure. Distinct          ity of VMs and PMs is very different, and there can be causal
objects in a VM can have implementations that share parts of        chains between coarse-grained VM events linking PM events,
the PM. Redundant implementations used for reliability can          vastly reducing the combinatorics of programming, debug-
map one VM entity to a set of PM entities. In a PM, circu-          ging, or modifying VMs, compared with controlling PMs.
lar containment is impossible, whereas it is possible in a VM,      This contradicts the view that there is causation by VMs only
                                                                1212

because the VM events just are the PM events described in           specific applications with concurrently executing subsystems.
a different way. On this “VM-PM identity theory” causation             This vertical separation of design tasks contrasts with hor-
by VM events (e.g. decisions) just is causation by the corre-       izontal separation, i.e. designing and implementing different
sponding physical events. However, there are statements true        concurrent or switchable functions. Both can make very com-
of VM events and false of PM events and vice versa. More-           plex systems much simpler and easier to specify, design, im-
over, if VMs were identical with their implementations, then        plement, and debug, because each engineer (or team) works
PMs would be implemented in VMs. They aren’t.                       on different, easier problems than getting the whole system
   A combination of hardware and software technology en-            to work. Over time, designers of high level systems need to
sures (most of the time!) the truth of a complex web of con-        know less and less about the details of what happens when
ditional statements relating what happens if so and so occurs       their programs run, leaving low level designs for others, e.g.
in physical or virtual machines. The support for that network       people writing compilers, device drivers, operating systems,
of relationships, including counterfactual conditional truths       etc. VMs also reduce complexity for system maintainers,
(about what would have happened if ....), is equivalent to sup-     allowing them to monitor and debug packages, by looking
port for a complex web of causal connections, between in-           only at patterns of VM operations, to find out what is go-
teracting VM and PM components crudely indicated in Fig. 2.         ing wrong. Another important development was from spe-
A corollary is that events can be causally overdetermined.          cialised VMs (SVMs) implemented to perform specific func-
   Such causal webs in computers required decades of devel-         tions, to platform VMs (PVMs) each capable of supporting
opment of physical devices performing many functions, in-           many SVMs. Examples of PVMs include operating systems,
terfaces/transducers linking computers to other devices, and a      which are RVMs on top of which many different SVMs can
plethora of interacting software or hybrid hardware-software        run. Using a high level PVM as the control interface makes a
sub-systems, including: schedulers, device drivers, file man-       very complex system much more controllable: relatively few
agement systems, memory management systems, compil-                 high level factors, shared between different functions, are in-
ers, interpreters, interrupt handlers, caches, programmable         volved in running the system, compared with monitoring and
firmware stores, error-correcting memory, wired and wire-           driving sub-processes at the transistor or neuron level. This
less network interfaces, network protocol handlers, email sys-      advantage can apply to self monitoring and self control in
tems, web browsers, and many more. Evolution has had                complex systems that need to take high level control deci-
far more time, however, We’ll return to the implications of         sions McCarthy (1995); Minsky (2006).
that below. Virtual machine functionalism, using mechanism
supervenience, unlike atomic state functionalism, postulates        Biological Virtual Machines
mind-brain relations more like Fig. 2.                              Evolution clearly produced horizontal modularity, using sep-
   Most man-made virtual machines have a fixed architecture         arate designs for sub-systems with separate functions: dif-
at present. However there is no reason why RVMs should not          ferent neural or other control subsystems coexist and con-
extend themselves, e.g. through learning processes, just as         trol different body parts, or produce different behaviours, e.g.
(Chappell & Sloman, 2007) suggested some biological virtual         eating, walking, breathing, circulating blood, repairing dam-
machines grow themselves.                                           aged tissue. But if developing new behaviours for the whole
                                                                    organism requires each new behaviour to be implemented
Why VMs Are Important In Engineering                                in terms of low level states of muscles and sensors shared
As explained more fully in (Sloman, 2008) the use of VMs            between competences (e.g. typing, piano playing, prepar-
makes a huge difference in the engineering of complex sys-          ing food), that could be unmanageable, and very hard to
tems – for several reasons. It would be impossible to spec-         change. Perhaps evolution also “discovered” the advantages
ify directly all the low level physical processes in a mod-         of vertical modularity based on PVMs, long before we did,
ern computing system as was done with the earliest comput-          e.g. using layered VMs running on brains to provide high
ers, programmed at the bit level. Formalisms for program-           level control interfaces between subsystems, including self-
ming abstract VMs using concepts determined by the tasks,           monitoring. Moreover, if different control regimes (including
rather than the usually much greater bit-level complexity, al-      motive generation, and conflict detection and management)
low some designers to specify processes running on those            are implemented on a multi-purpose VM layer, a PVM, the
VMs (games, browsers, databases, etc.), while others work           regimes will have much simpler specifications than neural
on the mappings between VMs and PMs. Initially compil-              implementations – e.g. making learning by self-monitoring
ers could statically map VM instructions to PM instructions.        much easier.
Later, as concurrency, multiple users with different privileges        For self-monitoring biological and artificial VMs, the com-
and external interfaces were added, the variety and unpre-          pressed, abstract information, ignoring much physiologi-
dictability of run-time possibilities ruled out static mapping      cal detail, may often suffice. If self-monitoring and self-
of VMs to PMs, and the tasks had to be allocated to inter-          controlling systems are grown during an organism’s lifetime,
mediate sub-systems taking decisions at run time. Allowing          as in humans, platform-based vertical modularity could sim-
generic hardware and software designed by specialists to han-       plify a genome’s support for multiple possible developmen-
dle those decisions, further simplified tasks for designers of      tal trajectories, influenced by demands of the environment
                                                                1213

(Chappell & Sloman, 2007). Biological PVMs could al-                stands. So the widespread belief that computers can do only
low developing individuals to explore and select different          what a programmer specifies is false, except in simple cases
kinds of new functionality, e.g. different behaviours, differ-      (with write-protected code!). There are similar erroneous be-
ent languages, different control strategies, different policies     liefs about genetic influences in humans.
for choosing goals or planning actions, and different ways of
learning things. There would not be fixed machine table as          Supervenience and Causation
suggested in (Pollock, 2008).                                       Many philosophers who investigate mind-matter relation-
   Designs can survive in evolution for the same reason as          ships are generally either ignorant of or simply ignore most of
they are useful for human designers. A design modification          the facts about complex artificial VMs, e.g. the otherwise ex-
giving an organism a kind of PVM-based self-understanding           cellent (Kim, 1993, 1998). Notable exceptions include Bech-
lacked by its competitors, could make it more successful. E.g.      tel, Boden, Clark, Dennett, Polger, and Pollock. Mental states
it may monitor its own reasoning, planning, and learning pro-       and processes are said to supervene on or be realized in phys-
cesses (at a certain level of abstraction) and find ways to im-     ical ones. Problems arising include: Can mental processes
prove them. If those improved procedures can also be taught,        cause physical events (“downward causation”)? If previous
the benefits need not be rediscovered only by chance. So            physical states and processes suffice to explain physical states
PVMs can directly support teaching and learning, and thereby        and processes at any time, how can mental ones have any ef-
cultural evolution. Using them in control mechanisms goes           fect? How could your deciding to come here influence your
further than the common suggestion that a robot needs to            movement, if physical causes (in brain and environment) suf-
build a self-model.                                                 fice to produce the motion? Before trying to answer such
   However, such mechanisms, while useful much of the time,         questions for minds and brains it is worth considering sys-
can also produce incomplete self knowledge and errors in            tems we already understand much better, because humans de-
self analysis, etc. Simplifications in self-monitoring VMs          signed, built, and can extend and debug them. E.g. a move
could lead robot-philosophers to produce confused philo-            in a chess VM can cause a computer display to change. Soft-
sophical theories about their own mind-body relationships,          ware engineers finding a software bug that causes an airliner
e.g. theories about “qualia”. “Ineffable” qualia arising out        to crash, can re-design the system so that early detection of a
of learning in self-monitoring VMs could cause muddle (Slo-         problem causes a control mechanism to take remedial action,
man & Chrisley, 2003). Intelligent, human-like robots will          saving lives. Virtual machines can do things.
start thinking about these issues. As science fiction writers          Some philosophers believe that causal connections can ex-
have pointed out, they could become as muddled as human             ist only between physical events and processes; but that raises
philosophers. So to protect future robots from muddled think-       the problem: at what level of physics? Billiard-ball interac-
ing, we shall have to teach them philosophy, provided that we       tions and even chemical interactions can be argued to involve
have good philosophical theories to teach. Likewise children.       virtual machines implemented on lower level machines. So if
   This raises many research questions, including: How could        they can be causes, why not allow causation in other virtual
PVMs have evolved? Do some species allow the environment            machines? Normal human decision making and policy mak-
to influence features of VM construction during epigenesis          ing requires talk of ignorance causing poverty, poverty caus-
(Chappell & Sloman, 2007)? How? Can genes specify con-              ing crime, preferences causing decisions, intentions causing
struction of virtual machines under environmental influence?        actions, experiences causing learning, greed in one person
   It is often assumed that only mechanisms with biologi-           causing harm to others, and many more. If we interpret causa-
cal benefits could evolve. However a VM can include low             tion in terms of truth of appropriate (often very complex) sets
cost “decoupled” subsystems that process information, even          of conditional statements the mystery can be removed. Fig. 2
though they have only intermittent or no connections with           indicates (crudely) how causes can operate simultaneously at
sensors or motors; e.g. a VM playing chess with itself or           different levels because a tangled web of true counterfactual
solving problems in number theory, without any connection           conditionals supported by complex technology links events
to sensors or effectors. Such things may earn their biologi-        at different levels, showing how virtual machines and physi-
cal keep by occasionally passing discoveries to VMs that are        cal machines are related so that the same thing can be caused
linked to the environment. Some VMs, e.g. sensory process-          in two very different ways, by causes operating at different
ing VMs, may have more going on in them than can possi-             levels of abstraction. Software engineers have an intuitive
bly be expressed externally using the available external band-      understanding of this, but don’t do philosophical analysis.
width. Some constantly active sub-VMs may be capable of                A key feature of causation is its relationship with
being only very slightly influenced by sensor data, with very       conditional and counterfactual conditional questions and
minor perturbations, while others are strongly driven by the        statements: Would Fred have crashed if he had drunk less, if
environment.                                                        the road camber had been greater, if there had been no ice on
   A system that can change its own instructions can create         the road, if he had driven more slowly, etc.? Without offering
its own new sub-systems while running, and if this is done          an analysis of these usages, I have tried to indicate how they
largely under external influences, it may turn out to be a sys-     relate to causation in VMs, loosely indicated in Fig. 2, which
tem whose development nobody planned, and nobody under-             depicts a web of interconnected counterfactual conditional
                                                                1214

statements corresponding to detailed implementational               Functionalism, not Atomic State Functionalism.
mechanisms. A lot more detail is needed to make the points             If VMs are objects of self-monitoring and self-control they
precise.                                                            can deceive themselves because many details are inaccessi-
                                                                    ble, as humans have done, including some scientists who ex-
Multiple layers of virtual machinery                                amine physical structures and processes in brains in the hope
Just as some physical machines (e.g. modern computers)              of explaining virtual machine phenomena, without under-
have a kind of generality that enables them to support many         standing the complexity and sophistication of the mappings
different VMs (e.g. the same computer may be able to run            that can exist.
different operating systems Windows, Linux, or ....) so are
there some platform VMs with a kind of generality that en-                              Acknowledgements
ables them to support many different “higher level” VMs (e.g.       Many colleagues have helped with these ideas, especially
the same operating system VM may be able to run many                Ron Chrisley, Matthias Scheutz, Jackie Chappell, and col-
different applications – window managers, word processors,          leagues working on the EU-funded CoSy robotics project and
mail systems, spelling correctors, spreadsheets, compilers,         its successor CogX, both making heavy use of VMs. Luiz
games, internet browsers, CAD packages, virtual worlds, chat        Carlos Baptista reminded me about causation in VR systems.
software, etc. ....). More generally, VMs may be layered:           An early version of some of these ideas is (Sloman, 1993).
V M1 supports V M2 which supports V M3 , etc. The layers can        Later ideas inspired by the CoSy project, including ideas
branch, and also be circular, e.g. if V M1 includes a compo-        about levels of interacting dynamical systems, are in my web-
nent that invokes a component in a higher level V Mk , which        site and papers in press. Many of the ideas have been devel-
is implemented in V M1 . Layered virtual machines are not the       oped in parallel by other authors, e.g. (Dyson, 1997). There
same as layered hierarchical control systems (e.g. Brooks’          is much more relevant literature than I have space for here.
“subsumption architecture”), where control layers implement
different functions for the whole system, and can be turned on                               References
and off independently (mostly). When a VM provides func-            Block, N. (1996). What is functionalism? In The Encyclope-
tionality that is implemented in lower levels: the lower levels        dia of Philosophy Supplement. Macmillan.
can’t be turned off leaving the higher levels running. Marr’s       Chappell, J., & Sloman, A. (2007). Natural and artificial
third level, the “computational level” is sometimes regarded           meta-configured altricial information-processing systems.
as a virtual machine level. However Marr did not allow mul-            Int. Jour. of Unconventional Computing, 3(3), 211–239.
tiple VM levels, and insofar as his third level was a mapping       Davidson, D. (1970). Mental Events. In L. Foster & J. W.
from sensor data to a scene description, it was a single func-         Swanson (Eds.), Experience and Theory. London: Duck-
tion, not a machine specification as in Fig. 2.                        worth.
   The label ‘emergence’ can indicate that a VM non-                Dyson, G. B. (1997). Darwin Among The Machines: The
definitionally extends an ontology: the new concepts required          Evolution Of Global Intelligence. Addison-Wesley.
to describe the VM are not definable in terms of old ones. En-      Kim, J. (1993). Supervenience and Mind: Selected philo-
gineers discussing implementation of VMs in computers and              sophical essays. CUP.
philosophers discussing supervenience of minds on brains are        Kim, J. (1998). Mind in a Physical World. MIT Press.
talking about the same ‘emergence’ relationship. This is not        McCarthy, J. (1995). Making robots conscious of their mental
a metaphor: both are examples of the same type.                        states. In Aaai spring symposium on representing mental
                                                                       states and mechanisms. Palo Alto, CA: AAAI.
                         Conclusion                                 Minsky, M. L. (2006). The Emotion Machine. New York:
                                                                       Pantheon.
The idea of a virtual machine (or NPDM) is deep, full of            Moore, G. (1903). Principia ethica. CUP.
subtleties and of great philosophical significance, challeng-       Pollock, J. L. (2008). What Am I? Virtual machines
ing philosophical theories of mind, of causation, and of what          and the mind/body problem.          Philosophy and Phe-
exists. The use of virtual machines has been of profound im-           nomenological Research., 76(2), 237–309. (http://philsci-
portance in engineering in the last half century, even though          archive.pitt.edu/archive/00003341)
many of those closely involved have not noticed the wider           Sloman, A.          (1978).    The computer revolution in
significance of what they were doing, especially the benefits          philosophy.        Hassocks, Sussex: Harvester Press.
of vertical separation of concerns, and the complexity of what         (http://www.cs.bham.ac.uk/research/cogaff/crp)
has to be done to make it all work. The biological relevance        Sloman, A. (1993). The mind as a control system. In
has not been widely acknowledged, whereas it seems that                C. Hookway & D. Peterson (Eds.), Philosophy and the cog-
evolution “discovered” both the problems and many solutions            nitive sciences (pp. 69–110). CUP.
long before we did, long before humans existed. I expect            Sloman, A. (2008). The Well-Designed Young Mathemati-
the biological importance of VMs, including the importance             cian. AIJ, 172(18), 2015–2034.
of VMS that grow themselves, will be increasingly acknowl-          Sloman, A., & Chrisley, R. (2003). Virtual machines and
edged. The resulting mind-brain theory is Virtual Machine              consciousness. JCS, 10(4-5), 113–172.
                                                                1215

